
Infontainment_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e40  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000090  00800060  00002e40  00002ed4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000049  008000f0  008000f0  00002f64  2**0
                  ALLOC
  3 .stab         00002c28  00000000  00000000  00002f64  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001398  00000000  00000000  00005b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006f24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007064  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000071d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008e1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000aab8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ac18  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000aea5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b673  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 77 13 	jmp	0x26ee	; 0x26ee <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e4       	ldi	r30, 0x40	; 64
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3f       	cpi	r26, 0xF0	; 240
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 ef       	ldi	r26, 0xF0	; 240
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 33       	cpi	r26, 0x39	; 57
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d2 05 	call	0xba4	; 0xba4 <main>
      8a:	0c 94 1e 17 	jmp	0x2e3c	; 0x2e3c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b6 16 	jmp	0x2d6c	; 0x2d6c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 ed       	ldi	r26, 0xD4	; 212
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d2 16 	jmp	0x2da4	; 0x2da4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c2 16 	jmp	0x2d84	; 0x2d84 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 de 16 	jmp	0x2dbc	; 0x2dbc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c2 16 	jmp	0x2d84	; 0x2d84 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 de 16 	jmp	0x2dbc	; 0x2dbc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b6 16 	jmp	0x2d6c	; 0x2d6c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	84 ed       	ldi	r24, 0xD4	; 212
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d2 16 	jmp	0x2da4	; 0x2da4 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c2 16 	jmp	0x2d84	; 0x2d84 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 de 16 	jmp	0x2dbc	; 0x2dbc <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 c2 16 	jmp	0x2d84	; 0x2d84 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 de 16 	jmp	0x2dbc	; 0x2dbc <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 c2 16 	jmp	0x2d84	; 0x2d84 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 de 16 	jmp	0x2dbc	; 0x2dbc <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 c6 16 	jmp	0x2d8c	; 0x2d8c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 e2 16 	jmp	0x2dc4	; 0x2dc4 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Task_1ms_GetKey>:
#include "infotainment.h"
/************************************************************************/
/*				OS tasks definitions                                     */
/************************************************************************/
void Task_1ms_GetKey(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	if (Infotainment_Status == INFOTAINMENT_GET_ANSWER)
     b4e:	80 91 f3 00 	lds	r24, 0x00F3
     b52:	82 30       	cpi	r24, 0x02	; 2
     b54:	11 f4       	brne	.+4      	; 0xb5a <Task_1ms_GetKey+0x14>
	{
		Infotainment_GetAnswer();
     b56:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <Infotainment_GetAnswer>
	}
	/*get keypad */
}
     b5a:	cf 91       	pop	r28
     b5c:	df 91       	pop	r29
     b5e:	08 95       	ret

00000b60 <Task_10ms_Game>:

void Task_10ms_Game(void)
{ 
     b60:	df 93       	push	r29
     b62:	cf 93       	push	r28
     b64:	cd b7       	in	r28, 0x3d	; 61
     b66:	de b7       	in	r29, 0x3e	; 62
	if (Infotainment_Status == INFOTAINMENT_IDLE)
     b68:	80 91 f3 00 	lds	r24, 0x00F3
     b6c:	88 23       	and	r24, r24
     b6e:	19 f4       	brne	.+6      	; 0xb76 <Task_10ms_Game+0x16>
	{
		Infotainment_Start();
     b70:	0e 94 c6 14 	call	0x298c	; 0x298c <Infotainment_Start>
     b74:	14 c0       	rjmp	.+40     	; 0xb9e <Task_10ms_Game+0x3e>
	}
	else if (Infotainment_Status == INFOTAINMENT_QUESTION )
     b76:	80 91 f3 00 	lds	r24, 0x00F3
     b7a:	81 30       	cpi	r24, 0x01	; 1
     b7c:	19 f4       	brne	.+6      	; 0xb84 <Task_10ms_Game+0x24>
	{
	    Infotainment_PrintQuestion ();
     b7e:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <Infotainment_PrintQuestion>
     b82:	0d c0       	rjmp	.+26     	; 0xb9e <Task_10ms_Game+0x3e>
	}
	else if (Infotainment_Status == INFOTAINMENT_SCORE )
     b84:	80 91 f3 00 	lds	r24, 0x00F3
     b88:	83 30       	cpi	r24, 0x03	; 3
     b8a:	19 f4       	brne	.+6      	; 0xb92 <Task_10ms_Game+0x32>
	{
		Infotainment_ScoreDisplay();
     b8c:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <Infotainment_ScoreDisplay>
     b90:	06 c0       	rjmp	.+12     	; 0xb9e <Task_10ms_Game+0x3e>
	}
	else if (Infotainment_Status == INFOTAINMENT_FINAL)
     b92:	80 91 f3 00 	lds	r24, 0x00F3
     b96:	84 30       	cpi	r24, 0x04	; 4
     b98:	11 f4       	brne	.+4      	; 0xb9e <Task_10ms_Game+0x3e>
	{
		
		Infotainment_FinalScore();
     b9a:	0e 94 88 15 	call	0x2b10	; 0x2b10 <Infotainment_FinalScore>
	}
		
}
     b9e:	cf 91       	pop	r28
     ba0:	df 91       	pop	r29
     ba2:	08 95       	ret

00000ba4 <main>:

int main (void)
{
     ba4:	df 93       	push	r29
     ba6:	cf 93       	push	r28
     ba8:	cd b7       	in	r28, 0x3d	; 61
     baa:	de b7       	in	r29, 0x3e	; 62
	OS_init();
     bac:	0e 94 79 11 	call	0x22f2	; 0x22f2 <OS_init>
	LCD_init();
     bb0:	0e 94 6d 08 	call	0x10da	; 0x10da <LCD_init>
	//keypad_init();
	Create_Task(Task_1ms_GetKey,1,2);
     bb4:	83 ea       	ldi	r24, 0xA3	; 163
     bb6:	95 e0       	ldi	r25, 0x05	; 5
     bb8:	61 e0       	ldi	r22, 0x01	; 1
     bba:	42 e0       	ldi	r20, 0x02	; 2
     bbc:	50 e0       	ldi	r21, 0x00	; 0
     bbe:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <Create_Task>
	Create_Task(Task_10ms_Game,0,999);
     bc2:	80 eb       	ldi	r24, 0xB0	; 176
     bc4:	95 e0       	ldi	r25, 0x05	; 5
     bc6:	60 e0       	ldi	r22, 0x00	; 0
     bc8:	47 ee       	ldi	r20, 0xE7	; 231
     bca:	53 e0       	ldi	r21, 0x03	; 3
     bcc:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <Create_Task>
	OS_Run();
     bd0:	0e 94 b3 12 	call	0x2566	; 0x2566 <OS_Run>
	return 0 ;
     bd4:	80 e0       	ldi	r24, 0x00	; 0
     bd6:	90 e0       	ldi	r25, 0x00	; 0
}
     bd8:	cf 91       	pop	r28
     bda:	df 91       	pop	r29
     bdc:	08 95       	ret

00000bde <cpu_sleep>:
#include "function_macros.h"
#include "standard_types.h"
#include "CPU_SLEEP.h"

void cpu_sleep(void)
{
     bde:	df 93       	push	r29
     be0:	cf 93       	push	r28
     be2:	cd b7       	in	r28, 0x3d	; 61
     be4:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(MCUCR,SE);
     be6:	a5 e5       	ldi	r26, 0x55	; 85
     be8:	b0 e0       	ldi	r27, 0x00	; 0
     bea:	e5 e5       	ldi	r30, 0x55	; 85
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	80 81       	ld	r24, Z
     bf0:	80 68       	ori	r24, 0x80	; 128
     bf2:	8c 93       	st	X, r24
	Clear_Bit(MCUCR,SM0);
     bf4:	a5 e5       	ldi	r26, 0x55	; 85
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e5 e5       	ldi	r30, 0x55	; 85
     bfa:	f0 e0       	ldi	r31, 0x00	; 0
     bfc:	80 81       	ld	r24, Z
     bfe:	8f 7e       	andi	r24, 0xEF	; 239
     c00:	8c 93       	st	X, r24
	Clear_Bit(MCUCR,SM1);
     c02:	a5 e5       	ldi	r26, 0x55	; 85
     c04:	b0 e0       	ldi	r27, 0x00	; 0
     c06:	e5 e5       	ldi	r30, 0x55	; 85
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	80 81       	ld	r24, Z
     c0c:	8f 7d       	andi	r24, 0xDF	; 223
     c0e:	8c 93       	st	X, r24
	Clear_Bit(MCUCR,SM2);
     c10:	a5 e5       	ldi	r26, 0x55	; 85
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	e5 e5       	ldi	r30, 0x55	; 85
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	80 81       	ld	r24, Z
     c1a:	8f 7b       	andi	r24, 0xBF	; 191
     c1c:	8c 93       	st	X, r24
     c1e:	cf 91       	pop	r28
     c20:	df 91       	pop	r29
     c22:	08 95       	ret

00000c24 <DIO_WritePin>:
 */

#include "DIO_operations.h"
#include "Memory_map.h"
void DIO_WritePin(uint8 PinNum,uint8 PinValue)
{
     c24:	df 93       	push	r29
     c26:	cf 93       	push	r28
     c28:	00 d0       	rcall	.+0      	; 0xc2a <DIO_WritePin+0x6>
     c2a:	cd b7       	in	r28, 0x3d	; 61
     c2c:	de b7       	in	r29, 0x3e	; 62
     c2e:	89 83       	std	Y+1, r24	; 0x01
     c30:	6a 83       	std	Y+2, r22	; 0x02
if(PinValue==1)
     c32:	8a 81       	ldd	r24, Y+2	; 0x02
     c34:	81 30       	cpi	r24, 0x01	; 1
     c36:	09 f0       	breq	.+2      	; 0xc3a <DIO_WritePin+0x16>
     c38:	70 c0       	rjmp	.+224    	; 0xd1a <DIO_WritePin+0xf6>
{
	if(PinNum>=PinA0&&PinNum<=PinA7)
     c3a:	89 81       	ldd	r24, Y+1	; 0x01
     c3c:	88 30       	cpi	r24, 0x08	; 8
     c3e:	a0 f4       	brcc	.+40     	; 0xc68 <DIO_WritePin+0x44>
	{
		Set_Bit(PORTA,PinNum);
     c40:	ab e3       	ldi	r26, 0x3B	; 59
     c42:	b0 e0       	ldi	r27, 0x00	; 0
     c44:	eb e3       	ldi	r30, 0x3B	; 59
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	80 81       	ld	r24, Z
     c4a:	48 2f       	mov	r20, r24
     c4c:	89 81       	ldd	r24, Y+1	; 0x01
     c4e:	28 2f       	mov	r18, r24
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	02 2e       	mov	r0, r18
     c58:	02 c0       	rjmp	.+4      	; 0xc5e <DIO_WritePin+0x3a>
     c5a:	88 0f       	add	r24, r24
     c5c:	99 1f       	adc	r25, r25
     c5e:	0a 94       	dec	r0
     c60:	e2 f7       	brpl	.-8      	; 0xc5a <DIO_WritePin+0x36>
     c62:	84 2b       	or	r24, r20
     c64:	8c 93       	st	X, r24
     c66:	ce c0       	rjmp	.+412    	; 0xe04 <DIO_WritePin+0x1e0>
	}
	else if(PinNum>=PinB0&&PinNum<=PinB7)
     c68:	89 81       	ldd	r24, Y+1	; 0x01
     c6a:	88 30       	cpi	r24, 0x08	; 8
     c6c:	d0 f0       	brcs	.+52     	; 0xca2 <DIO_WritePin+0x7e>
     c6e:	89 81       	ldd	r24, Y+1	; 0x01
     c70:	80 31       	cpi	r24, 0x10	; 16
     c72:	b8 f4       	brcc	.+46     	; 0xca2 <DIO_WritePin+0x7e>
	{
		Set_Bit(PORTB,(PinNum-8));
     c74:	a8 e3       	ldi	r26, 0x38	; 56
     c76:	b0 e0       	ldi	r27, 0x00	; 0
     c78:	e8 e3       	ldi	r30, 0x38	; 56
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	80 81       	ld	r24, Z
     c7e:	48 2f       	mov	r20, r24
     c80:	89 81       	ldd	r24, Y+1	; 0x01
     c82:	88 2f       	mov	r24, r24
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	9c 01       	movw	r18, r24
     c88:	28 50       	subi	r18, 0x08	; 8
     c8a:	30 40       	sbci	r19, 0x00	; 0
     c8c:	81 e0       	ldi	r24, 0x01	; 1
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	02 2e       	mov	r0, r18
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <DIO_WritePin+0x74>
     c94:	88 0f       	add	r24, r24
     c96:	99 1f       	adc	r25, r25
     c98:	0a 94       	dec	r0
     c9a:	e2 f7       	brpl	.-8      	; 0xc94 <DIO_WritePin+0x70>
     c9c:	84 2b       	or	r24, r20
     c9e:	8c 93       	st	X, r24
     ca0:	b1 c0       	rjmp	.+354    	; 0xe04 <DIO_WritePin+0x1e0>
	}
	else if(PinNum>=PinC0&&PinNum<=PinC7)
     ca2:	89 81       	ldd	r24, Y+1	; 0x01
     ca4:	80 31       	cpi	r24, 0x10	; 16
     ca6:	d0 f0       	brcs	.+52     	; 0xcdc <DIO_WritePin+0xb8>
     ca8:	89 81       	ldd	r24, Y+1	; 0x01
     caa:	88 31       	cpi	r24, 0x18	; 24
     cac:	b8 f4       	brcc	.+46     	; 0xcdc <DIO_WritePin+0xb8>
	{
		Set_Bit(PORTC,(PinNum-16));
     cae:	a5 e3       	ldi	r26, 0x35	; 53
     cb0:	b0 e0       	ldi	r27, 0x00	; 0
     cb2:	e5 e3       	ldi	r30, 0x35	; 53
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	80 81       	ld	r24, Z
     cb8:	48 2f       	mov	r20, r24
     cba:	89 81       	ldd	r24, Y+1	; 0x01
     cbc:	88 2f       	mov	r24, r24
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	9c 01       	movw	r18, r24
     cc2:	20 51       	subi	r18, 0x10	; 16
     cc4:	30 40       	sbci	r19, 0x00	; 0
     cc6:	81 e0       	ldi	r24, 0x01	; 1
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	02 2e       	mov	r0, r18
     ccc:	02 c0       	rjmp	.+4      	; 0xcd2 <DIO_WritePin+0xae>
     cce:	88 0f       	add	r24, r24
     cd0:	99 1f       	adc	r25, r25
     cd2:	0a 94       	dec	r0
     cd4:	e2 f7       	brpl	.-8      	; 0xcce <DIO_WritePin+0xaa>
     cd6:	84 2b       	or	r24, r20
     cd8:	8c 93       	st	X, r24
     cda:	94 c0       	rjmp	.+296    	; 0xe04 <DIO_WritePin+0x1e0>
	}
	else if(PinNum>=PinD0&&PinNum<=PinD7)
     cdc:	89 81       	ldd	r24, Y+1	; 0x01
     cde:	88 31       	cpi	r24, 0x18	; 24
     ce0:	08 f4       	brcc	.+2      	; 0xce4 <DIO_WritePin+0xc0>
     ce2:	90 c0       	rjmp	.+288    	; 0xe04 <DIO_WritePin+0x1e0>
     ce4:	89 81       	ldd	r24, Y+1	; 0x01
     ce6:	80 32       	cpi	r24, 0x20	; 32
     ce8:	08 f0       	brcs	.+2      	; 0xcec <DIO_WritePin+0xc8>
     cea:	8c c0       	rjmp	.+280    	; 0xe04 <DIO_WritePin+0x1e0>
	{
		Set_Bit(PORTD,(PinNum-24));
     cec:	a2 e3       	ldi	r26, 0x32	; 50
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e2 e3       	ldi	r30, 0x32	; 50
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	48 2f       	mov	r20, r24
     cf8:	89 81       	ldd	r24, Y+1	; 0x01
     cfa:	88 2f       	mov	r24, r24
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	9c 01       	movw	r18, r24
     d00:	28 51       	subi	r18, 0x18	; 24
     d02:	30 40       	sbci	r19, 0x00	; 0
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	02 2e       	mov	r0, r18
     d0a:	02 c0       	rjmp	.+4      	; 0xd10 <DIO_WritePin+0xec>
     d0c:	88 0f       	add	r24, r24
     d0e:	99 1f       	adc	r25, r25
     d10:	0a 94       	dec	r0
     d12:	e2 f7       	brpl	.-8      	; 0xd0c <DIO_WritePin+0xe8>
     d14:	84 2b       	or	r24, r20
     d16:	8c 93       	st	X, r24
     d18:	75 c0       	rjmp	.+234    	; 0xe04 <DIO_WritePin+0x1e0>
	}
}
else if(PinValue==0)
     d1a:	8a 81       	ldd	r24, Y+2	; 0x02
     d1c:	88 23       	and	r24, r24
     d1e:	09 f0       	breq	.+2      	; 0xd22 <DIO_WritePin+0xfe>
     d20:	71 c0       	rjmp	.+226    	; 0xe04 <DIO_WritePin+0x1e0>
{
	if(PinNum>=PinA0&&PinNum<=PinA7)
     d22:	89 81       	ldd	r24, Y+1	; 0x01
     d24:	88 30       	cpi	r24, 0x08	; 8
     d26:	a8 f4       	brcc	.+42     	; 0xd52 <DIO_WritePin+0x12e>
	{
		Clear_Bit(PORTA,PinNum);
     d28:	ab e3       	ldi	r26, 0x3B	; 59
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	eb e3       	ldi	r30, 0x3B	; 59
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	48 2f       	mov	r20, r24
     d34:	89 81       	ldd	r24, Y+1	; 0x01
     d36:	28 2f       	mov	r18, r24
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	02 2e       	mov	r0, r18
     d40:	02 c0       	rjmp	.+4      	; 0xd46 <DIO_WritePin+0x122>
     d42:	88 0f       	add	r24, r24
     d44:	99 1f       	adc	r25, r25
     d46:	0a 94       	dec	r0
     d48:	e2 f7       	brpl	.-8      	; 0xd42 <DIO_WritePin+0x11e>
     d4a:	80 95       	com	r24
     d4c:	84 23       	and	r24, r20
     d4e:	8c 93       	st	X, r24
     d50:	59 c0       	rjmp	.+178    	; 0xe04 <DIO_WritePin+0x1e0>
	}
	else if(PinNum>=PinB0&&PinNum<=PinB7)
     d52:	89 81       	ldd	r24, Y+1	; 0x01
     d54:	88 30       	cpi	r24, 0x08	; 8
     d56:	d8 f0       	brcs	.+54     	; 0xd8e <DIO_WritePin+0x16a>
     d58:	89 81       	ldd	r24, Y+1	; 0x01
     d5a:	80 31       	cpi	r24, 0x10	; 16
     d5c:	c0 f4       	brcc	.+48     	; 0xd8e <DIO_WritePin+0x16a>
	{
		Clear_Bit(PORTB,(PinNum-8));
     d5e:	a8 e3       	ldi	r26, 0x38	; 56
     d60:	b0 e0       	ldi	r27, 0x00	; 0
     d62:	e8 e3       	ldi	r30, 0x38	; 56
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	80 81       	ld	r24, Z
     d68:	48 2f       	mov	r20, r24
     d6a:	89 81       	ldd	r24, Y+1	; 0x01
     d6c:	88 2f       	mov	r24, r24
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	9c 01       	movw	r18, r24
     d72:	28 50       	subi	r18, 0x08	; 8
     d74:	30 40       	sbci	r19, 0x00	; 0
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	02 2e       	mov	r0, r18
     d7c:	02 c0       	rjmp	.+4      	; 0xd82 <DIO_WritePin+0x15e>
     d7e:	88 0f       	add	r24, r24
     d80:	99 1f       	adc	r25, r25
     d82:	0a 94       	dec	r0
     d84:	e2 f7       	brpl	.-8      	; 0xd7e <DIO_WritePin+0x15a>
     d86:	80 95       	com	r24
     d88:	84 23       	and	r24, r20
     d8a:	8c 93       	st	X, r24
     d8c:	3b c0       	rjmp	.+118    	; 0xe04 <DIO_WritePin+0x1e0>
	}
	else if(PinNum>=PinC0&&PinNum<=PinC7)
     d8e:	89 81       	ldd	r24, Y+1	; 0x01
     d90:	80 31       	cpi	r24, 0x10	; 16
     d92:	d8 f0       	brcs	.+54     	; 0xdca <DIO_WritePin+0x1a6>
     d94:	89 81       	ldd	r24, Y+1	; 0x01
     d96:	88 31       	cpi	r24, 0x18	; 24
     d98:	c0 f4       	brcc	.+48     	; 0xdca <DIO_WritePin+0x1a6>
	{
		Clear_Bit(PORTC,(PinNum-16));
     d9a:	a5 e3       	ldi	r26, 0x35	; 53
     d9c:	b0 e0       	ldi	r27, 0x00	; 0
     d9e:	e5 e3       	ldi	r30, 0x35	; 53
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	80 81       	ld	r24, Z
     da4:	48 2f       	mov	r20, r24
     da6:	89 81       	ldd	r24, Y+1	; 0x01
     da8:	88 2f       	mov	r24, r24
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	9c 01       	movw	r18, r24
     dae:	20 51       	subi	r18, 0x10	; 16
     db0:	30 40       	sbci	r19, 0x00	; 0
     db2:	81 e0       	ldi	r24, 0x01	; 1
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	02 2e       	mov	r0, r18
     db8:	02 c0       	rjmp	.+4      	; 0xdbe <DIO_WritePin+0x19a>
     dba:	88 0f       	add	r24, r24
     dbc:	99 1f       	adc	r25, r25
     dbe:	0a 94       	dec	r0
     dc0:	e2 f7       	brpl	.-8      	; 0xdba <DIO_WritePin+0x196>
     dc2:	80 95       	com	r24
     dc4:	84 23       	and	r24, r20
     dc6:	8c 93       	st	X, r24
     dc8:	1d c0       	rjmp	.+58     	; 0xe04 <DIO_WritePin+0x1e0>
	}
	else if(PinNum>=PinD0&&PinNum<=PinD7)
     dca:	89 81       	ldd	r24, Y+1	; 0x01
     dcc:	88 31       	cpi	r24, 0x18	; 24
     dce:	d0 f0       	brcs	.+52     	; 0xe04 <DIO_WritePin+0x1e0>
     dd0:	89 81       	ldd	r24, Y+1	; 0x01
     dd2:	80 32       	cpi	r24, 0x20	; 32
     dd4:	b8 f4       	brcc	.+46     	; 0xe04 <DIO_WritePin+0x1e0>
	{
		Clear_Bit(PORTD,(PinNum-24));
     dd6:	a2 e3       	ldi	r26, 0x32	; 50
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	e2 e3       	ldi	r30, 0x32	; 50
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	48 2f       	mov	r20, r24
     de2:	89 81       	ldd	r24, Y+1	; 0x01
     de4:	88 2f       	mov	r24, r24
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	9c 01       	movw	r18, r24
     dea:	28 51       	subi	r18, 0x18	; 24
     dec:	30 40       	sbci	r19, 0x00	; 0
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	02 2e       	mov	r0, r18
     df4:	02 c0       	rjmp	.+4      	; 0xdfa <DIO_WritePin+0x1d6>
     df6:	88 0f       	add	r24, r24
     df8:	99 1f       	adc	r25, r25
     dfa:	0a 94       	dec	r0
     dfc:	e2 f7       	brpl	.-8      	; 0xdf6 <DIO_WritePin+0x1d2>
     dfe:	80 95       	com	r24
     e00:	84 23       	and	r24, r20
     e02:	8c 93       	st	X, r24
	}
}
}
     e04:	0f 90       	pop	r0
     e06:	0f 90       	pop	r0
     e08:	cf 91       	pop	r28
     e0a:	df 91       	pop	r29
     e0c:	08 95       	ret

00000e0e <DIO_ReadPin>:
uint8 DIO_ReadPin(uint8 PinNum)
{
     e0e:	df 93       	push	r29
     e10:	cf 93       	push	r28
     e12:	00 d0       	rcall	.+0      	; 0xe14 <DIO_ReadPin+0x6>
     e14:	cd b7       	in	r28, 0x3d	; 61
     e16:	de b7       	in	r29, 0x3e	; 62
     e18:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Pin_Value;
	if(PinNum>=PinA0&&PinNum<=PinA7)
     e1a:	8a 81       	ldd	r24, Y+2	; 0x02
     e1c:	88 30       	cpi	r24, 0x08	; 8
     e1e:	90 f4       	brcc	.+36     	; 0xe44 <DIO_ReadPin+0x36>
	{
		Pin_Value=Get_Bit(PINA,PinNum);
     e20:	e9 e3       	ldi	r30, 0x39	; 57
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
     e26:	48 2f       	mov	r20, r24
     e28:	8a 81       	ldd	r24, Y+2	; 0x02
     e2a:	28 2f       	mov	r18, r24
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	02 2e       	mov	r0, r18
     e34:	02 c0       	rjmp	.+4      	; 0xe3a <DIO_ReadPin+0x2c>
     e36:	88 0f       	add	r24, r24
     e38:	99 1f       	adc	r25, r25
     e3a:	0a 94       	dec	r0
     e3c:	e2 f7       	brpl	.-8      	; 0xe36 <DIO_ReadPin+0x28>
     e3e:	84 23       	and	r24, r20
     e40:	89 83       	std	Y+1, r24	; 0x01
     e42:	50 c0       	rjmp	.+160    	; 0xee4 <DIO_ReadPin+0xd6>
	}
	else if(PinNum>=PinB0&&PinNum<=PinB7)
     e44:	8a 81       	ldd	r24, Y+2	; 0x02
     e46:	88 30       	cpi	r24, 0x08	; 8
     e48:	c0 f0       	brcs	.+48     	; 0xe7a <DIO_ReadPin+0x6c>
     e4a:	8a 81       	ldd	r24, Y+2	; 0x02
     e4c:	80 31       	cpi	r24, 0x10	; 16
     e4e:	a8 f4       	brcc	.+42     	; 0xe7a <DIO_ReadPin+0x6c>
	{
		Pin_Value=Get_Bit(PINB,(PinNum-8));
     e50:	e6 e3       	ldi	r30, 0x36	; 54
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	80 81       	ld	r24, Z
     e56:	48 2f       	mov	r20, r24
     e58:	8a 81       	ldd	r24, Y+2	; 0x02
     e5a:	88 2f       	mov	r24, r24
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	9c 01       	movw	r18, r24
     e60:	28 50       	subi	r18, 0x08	; 8
     e62:	30 40       	sbci	r19, 0x00	; 0
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	02 2e       	mov	r0, r18
     e6a:	02 c0       	rjmp	.+4      	; 0xe70 <DIO_ReadPin+0x62>
     e6c:	88 0f       	add	r24, r24
     e6e:	99 1f       	adc	r25, r25
     e70:	0a 94       	dec	r0
     e72:	e2 f7       	brpl	.-8      	; 0xe6c <DIO_ReadPin+0x5e>
     e74:	84 23       	and	r24, r20
     e76:	89 83       	std	Y+1, r24	; 0x01
     e78:	35 c0       	rjmp	.+106    	; 0xee4 <DIO_ReadPin+0xd6>
	}
	else if(PinNum>=PinC0&&PinNum<=PinC7)
     e7a:	8a 81       	ldd	r24, Y+2	; 0x02
     e7c:	80 31       	cpi	r24, 0x10	; 16
     e7e:	c0 f0       	brcs	.+48     	; 0xeb0 <DIO_ReadPin+0xa2>
     e80:	8a 81       	ldd	r24, Y+2	; 0x02
     e82:	88 31       	cpi	r24, 0x18	; 24
     e84:	a8 f4       	brcc	.+42     	; 0xeb0 <DIO_ReadPin+0xa2>
	{
		Pin_Value=Get_Bit(PINC,(PinNum-16));
     e86:	e3 e3       	ldi	r30, 0x33	; 51
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	48 2f       	mov	r20, r24
     e8e:	8a 81       	ldd	r24, Y+2	; 0x02
     e90:	88 2f       	mov	r24, r24
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	9c 01       	movw	r18, r24
     e96:	20 51       	subi	r18, 0x10	; 16
     e98:	30 40       	sbci	r19, 0x00	; 0
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	02 2e       	mov	r0, r18
     ea0:	02 c0       	rjmp	.+4      	; 0xea6 <DIO_ReadPin+0x98>
     ea2:	88 0f       	add	r24, r24
     ea4:	99 1f       	adc	r25, r25
     ea6:	0a 94       	dec	r0
     ea8:	e2 f7       	brpl	.-8      	; 0xea2 <DIO_ReadPin+0x94>
     eaa:	84 23       	and	r24, r20
     eac:	89 83       	std	Y+1, r24	; 0x01
     eae:	1a c0       	rjmp	.+52     	; 0xee4 <DIO_ReadPin+0xd6>
	}
	else if(PinNum>=PinD0&&PinNum<=PinD7)
     eb0:	8a 81       	ldd	r24, Y+2	; 0x02
     eb2:	88 31       	cpi	r24, 0x18	; 24
     eb4:	b8 f0       	brcs	.+46     	; 0xee4 <DIO_ReadPin+0xd6>
     eb6:	8a 81       	ldd	r24, Y+2	; 0x02
     eb8:	80 32       	cpi	r24, 0x20	; 32
     eba:	a0 f4       	brcc	.+40     	; 0xee4 <DIO_ReadPin+0xd6>
	{
		Pin_Value=Get_Bit(PIND,(PinNum-24));
     ebc:	e0 e3       	ldi	r30, 0x30	; 48
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	48 2f       	mov	r20, r24
     ec4:	8a 81       	ldd	r24, Y+2	; 0x02
     ec6:	88 2f       	mov	r24, r24
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	9c 01       	movw	r18, r24
     ecc:	28 51       	subi	r18, 0x18	; 24
     ece:	30 40       	sbci	r19, 0x00	; 0
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	02 2e       	mov	r0, r18
     ed6:	02 c0       	rjmp	.+4      	; 0xedc <DIO_ReadPin+0xce>
     ed8:	88 0f       	add	r24, r24
     eda:	99 1f       	adc	r25, r25
     edc:	0a 94       	dec	r0
     ede:	e2 f7       	brpl	.-8      	; 0xed8 <DIO_ReadPin+0xca>
     ee0:	84 23       	and	r24, r20
     ee2:	89 83       	std	Y+1, r24	; 0x01
	}
	return Pin_Value;
     ee4:	89 81       	ldd	r24, Y+1	; 0x01
}
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	cf 91       	pop	r28
     eec:	df 91       	pop	r29
     eee:	08 95       	ret

00000ef0 <DIO_SetPinDirection>:
void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection)
{
     ef0:	df 93       	push	r29
     ef2:	cf 93       	push	r28
     ef4:	00 d0       	rcall	.+0      	; 0xef6 <DIO_SetPinDirection+0x6>
     ef6:	cd b7       	in	r28, 0x3d	; 61
     ef8:	de b7       	in	r29, 0x3e	; 62
     efa:	89 83       	std	Y+1, r24	; 0x01
     efc:	6a 83       	std	Y+2, r22	; 0x02
	if(PinDirection==1)
     efe:	8a 81       	ldd	r24, Y+2	; 0x02
     f00:	81 30       	cpi	r24, 0x01	; 1
     f02:	09 f0       	breq	.+2      	; 0xf06 <DIO_SetPinDirection+0x16>
     f04:	70 c0       	rjmp	.+224    	; 0xfe6 <DIO_SetPinDirection+0xf6>
	{
		if(PinNum>=PinA0&&PinNum<=PinA7)
     f06:	89 81       	ldd	r24, Y+1	; 0x01
     f08:	88 30       	cpi	r24, 0x08	; 8
     f0a:	a0 f4       	brcc	.+40     	; 0xf34 <DIO_SetPinDirection+0x44>
		{
			Set_Bit(DDRA,PinNum);
     f0c:	aa e3       	ldi	r26, 0x3A	; 58
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	ea e3       	ldi	r30, 0x3A	; 58
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	48 2f       	mov	r20, r24
     f18:	89 81       	ldd	r24, Y+1	; 0x01
     f1a:	28 2f       	mov	r18, r24
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	02 2e       	mov	r0, r18
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <DIO_SetPinDirection+0x3a>
     f26:	88 0f       	add	r24, r24
     f28:	99 1f       	adc	r25, r25
     f2a:	0a 94       	dec	r0
     f2c:	e2 f7       	brpl	.-8      	; 0xf26 <DIO_SetPinDirection+0x36>
     f2e:	84 2b       	or	r24, r20
     f30:	8c 93       	st	X, r24
     f32:	ce c0       	rjmp	.+412    	; 0x10d0 <DIO_SetPinDirection+0x1e0>
		}
		else if(PinNum>=PinB0&&PinNum<=PinB7)
     f34:	89 81       	ldd	r24, Y+1	; 0x01
     f36:	88 30       	cpi	r24, 0x08	; 8
     f38:	d0 f0       	brcs	.+52     	; 0xf6e <DIO_SetPinDirection+0x7e>
     f3a:	89 81       	ldd	r24, Y+1	; 0x01
     f3c:	80 31       	cpi	r24, 0x10	; 16
     f3e:	b8 f4       	brcc	.+46     	; 0xf6e <DIO_SetPinDirection+0x7e>
		{
			Set_Bit(DDRB,(PinNum-8));
     f40:	a7 e3       	ldi	r26, 0x37	; 55
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	e7 e3       	ldi	r30, 0x37	; 55
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	48 2f       	mov	r20, r24
     f4c:	89 81       	ldd	r24, Y+1	; 0x01
     f4e:	88 2f       	mov	r24, r24
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	9c 01       	movw	r18, r24
     f54:	28 50       	subi	r18, 0x08	; 8
     f56:	30 40       	sbci	r19, 0x00	; 0
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	02 2e       	mov	r0, r18
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <DIO_SetPinDirection+0x74>
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	0a 94       	dec	r0
     f66:	e2 f7       	brpl	.-8      	; 0xf60 <DIO_SetPinDirection+0x70>
     f68:	84 2b       	or	r24, r20
     f6a:	8c 93       	st	X, r24
     f6c:	b1 c0       	rjmp	.+354    	; 0x10d0 <DIO_SetPinDirection+0x1e0>
		}
		else if(PinNum>=PinC0&&PinNum<=PinC7)
     f6e:	89 81       	ldd	r24, Y+1	; 0x01
     f70:	80 31       	cpi	r24, 0x10	; 16
     f72:	d0 f0       	brcs	.+52     	; 0xfa8 <DIO_SetPinDirection+0xb8>
     f74:	89 81       	ldd	r24, Y+1	; 0x01
     f76:	88 31       	cpi	r24, 0x18	; 24
     f78:	b8 f4       	brcc	.+46     	; 0xfa8 <DIO_SetPinDirection+0xb8>
		{
			Set_Bit(DDRC,(PinNum-16));
     f7a:	a4 e3       	ldi	r26, 0x34	; 52
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	e4 e3       	ldi	r30, 0x34	; 52
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	48 2f       	mov	r20, r24
     f86:	89 81       	ldd	r24, Y+1	; 0x01
     f88:	88 2f       	mov	r24, r24
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	9c 01       	movw	r18, r24
     f8e:	20 51       	subi	r18, 0x10	; 16
     f90:	30 40       	sbci	r19, 0x00	; 0
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	02 2e       	mov	r0, r18
     f98:	02 c0       	rjmp	.+4      	; 0xf9e <DIO_SetPinDirection+0xae>
     f9a:	88 0f       	add	r24, r24
     f9c:	99 1f       	adc	r25, r25
     f9e:	0a 94       	dec	r0
     fa0:	e2 f7       	brpl	.-8      	; 0xf9a <DIO_SetPinDirection+0xaa>
     fa2:	84 2b       	or	r24, r20
     fa4:	8c 93       	st	X, r24
     fa6:	94 c0       	rjmp	.+296    	; 0x10d0 <DIO_SetPinDirection+0x1e0>
		}
		else if(PinNum>=PinD0&&PinNum<=PinD7)
     fa8:	89 81       	ldd	r24, Y+1	; 0x01
     faa:	88 31       	cpi	r24, 0x18	; 24
     fac:	08 f4       	brcc	.+2      	; 0xfb0 <DIO_SetPinDirection+0xc0>
     fae:	90 c0       	rjmp	.+288    	; 0x10d0 <DIO_SetPinDirection+0x1e0>
     fb0:	89 81       	ldd	r24, Y+1	; 0x01
     fb2:	80 32       	cpi	r24, 0x20	; 32
     fb4:	08 f0       	brcs	.+2      	; 0xfb8 <DIO_SetPinDirection+0xc8>
     fb6:	8c c0       	rjmp	.+280    	; 0x10d0 <DIO_SetPinDirection+0x1e0>
		{
			Set_Bit(DDRC,(PinNum-24));
     fb8:	a4 e3       	ldi	r26, 0x34	; 52
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	e4 e3       	ldi	r30, 0x34	; 52
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	48 2f       	mov	r20, r24
     fc4:	89 81       	ldd	r24, Y+1	; 0x01
     fc6:	88 2f       	mov	r24, r24
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	9c 01       	movw	r18, r24
     fcc:	28 51       	subi	r18, 0x18	; 24
     fce:	30 40       	sbci	r19, 0x00	; 0
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	02 2e       	mov	r0, r18
     fd6:	02 c0       	rjmp	.+4      	; 0xfdc <DIO_SetPinDirection+0xec>
     fd8:	88 0f       	add	r24, r24
     fda:	99 1f       	adc	r25, r25
     fdc:	0a 94       	dec	r0
     fde:	e2 f7       	brpl	.-8      	; 0xfd8 <DIO_SetPinDirection+0xe8>
     fe0:	84 2b       	or	r24, r20
     fe2:	8c 93       	st	X, r24
     fe4:	75 c0       	rjmp	.+234    	; 0x10d0 <DIO_SetPinDirection+0x1e0>
		}
	}
	else if(PinDirection==0)
     fe6:	8a 81       	ldd	r24, Y+2	; 0x02
     fe8:	88 23       	and	r24, r24
     fea:	09 f0       	breq	.+2      	; 0xfee <DIO_SetPinDirection+0xfe>
     fec:	71 c0       	rjmp	.+226    	; 0x10d0 <DIO_SetPinDirection+0x1e0>
	{
		if(PinNum>=PinA0&&PinNum<=PinA7)
     fee:	89 81       	ldd	r24, Y+1	; 0x01
     ff0:	88 30       	cpi	r24, 0x08	; 8
     ff2:	a8 f4       	brcc	.+42     	; 0x101e <DIO_SetPinDirection+0x12e>
		{
			Clear_Bit(PORTA,PinNum);
     ff4:	ab e3       	ldi	r26, 0x3B	; 59
     ff6:	b0 e0       	ldi	r27, 0x00	; 0
     ff8:	eb e3       	ldi	r30, 0x3B	; 59
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	48 2f       	mov	r20, r24
    1000:	89 81       	ldd	r24, Y+1	; 0x01
    1002:	28 2f       	mov	r18, r24
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	02 2e       	mov	r0, r18
    100c:	02 c0       	rjmp	.+4      	; 0x1012 <DIO_SetPinDirection+0x122>
    100e:	88 0f       	add	r24, r24
    1010:	99 1f       	adc	r25, r25
    1012:	0a 94       	dec	r0
    1014:	e2 f7       	brpl	.-8      	; 0x100e <DIO_SetPinDirection+0x11e>
    1016:	80 95       	com	r24
    1018:	84 23       	and	r24, r20
    101a:	8c 93       	st	X, r24
    101c:	59 c0       	rjmp	.+178    	; 0x10d0 <DIO_SetPinDirection+0x1e0>
		}
		else if(PinNum>=PinB0&&PinNum<=PinB7)
    101e:	89 81       	ldd	r24, Y+1	; 0x01
    1020:	88 30       	cpi	r24, 0x08	; 8
    1022:	d8 f0       	brcs	.+54     	; 0x105a <DIO_SetPinDirection+0x16a>
    1024:	89 81       	ldd	r24, Y+1	; 0x01
    1026:	80 31       	cpi	r24, 0x10	; 16
    1028:	c0 f4       	brcc	.+48     	; 0x105a <DIO_SetPinDirection+0x16a>
		{
			Clear_Bit(DDRB,(PinNum-8));
    102a:	a7 e3       	ldi	r26, 0x37	; 55
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	e7 e3       	ldi	r30, 0x37	; 55
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	48 2f       	mov	r20, r24
    1036:	89 81       	ldd	r24, Y+1	; 0x01
    1038:	88 2f       	mov	r24, r24
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	9c 01       	movw	r18, r24
    103e:	28 50       	subi	r18, 0x08	; 8
    1040:	30 40       	sbci	r19, 0x00	; 0
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	02 2e       	mov	r0, r18
    1048:	02 c0       	rjmp	.+4      	; 0x104e <DIO_SetPinDirection+0x15e>
    104a:	88 0f       	add	r24, r24
    104c:	99 1f       	adc	r25, r25
    104e:	0a 94       	dec	r0
    1050:	e2 f7       	brpl	.-8      	; 0x104a <DIO_SetPinDirection+0x15a>
    1052:	80 95       	com	r24
    1054:	84 23       	and	r24, r20
    1056:	8c 93       	st	X, r24
    1058:	3b c0       	rjmp	.+118    	; 0x10d0 <DIO_SetPinDirection+0x1e0>
		}
		else if(PinNum>=PinC0&&PinNum<=PinC7)
    105a:	89 81       	ldd	r24, Y+1	; 0x01
    105c:	80 31       	cpi	r24, 0x10	; 16
    105e:	d8 f0       	brcs	.+54     	; 0x1096 <DIO_SetPinDirection+0x1a6>
    1060:	89 81       	ldd	r24, Y+1	; 0x01
    1062:	88 31       	cpi	r24, 0x18	; 24
    1064:	c0 f4       	brcc	.+48     	; 0x1096 <DIO_SetPinDirection+0x1a6>
		{
			Clear_Bit(DDRC,(PinNum-16));
    1066:	a4 e3       	ldi	r26, 0x34	; 52
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	e4 e3       	ldi	r30, 0x34	; 52
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	48 2f       	mov	r20, r24
    1072:	89 81       	ldd	r24, Y+1	; 0x01
    1074:	88 2f       	mov	r24, r24
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	9c 01       	movw	r18, r24
    107a:	20 51       	subi	r18, 0x10	; 16
    107c:	30 40       	sbci	r19, 0x00	; 0
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	02 2e       	mov	r0, r18
    1084:	02 c0       	rjmp	.+4      	; 0x108a <DIO_SetPinDirection+0x19a>
    1086:	88 0f       	add	r24, r24
    1088:	99 1f       	adc	r25, r25
    108a:	0a 94       	dec	r0
    108c:	e2 f7       	brpl	.-8      	; 0x1086 <DIO_SetPinDirection+0x196>
    108e:	80 95       	com	r24
    1090:	84 23       	and	r24, r20
    1092:	8c 93       	st	X, r24
    1094:	1d c0       	rjmp	.+58     	; 0x10d0 <DIO_SetPinDirection+0x1e0>
		}
		else if(PinNum>=PinD0&&PinNum<=PinD7)
    1096:	89 81       	ldd	r24, Y+1	; 0x01
    1098:	88 31       	cpi	r24, 0x18	; 24
    109a:	d0 f0       	brcs	.+52     	; 0x10d0 <DIO_SetPinDirection+0x1e0>
    109c:	89 81       	ldd	r24, Y+1	; 0x01
    109e:	80 32       	cpi	r24, 0x20	; 32
    10a0:	b8 f4       	brcc	.+46     	; 0x10d0 <DIO_SetPinDirection+0x1e0>
		{
			Clear_Bit(DDRD,(PinNum-24));
    10a2:	a1 e3       	ldi	r26, 0x31	; 49
    10a4:	b0 e0       	ldi	r27, 0x00	; 0
    10a6:	e1 e3       	ldi	r30, 0x31	; 49
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	48 2f       	mov	r20, r24
    10ae:	89 81       	ldd	r24, Y+1	; 0x01
    10b0:	88 2f       	mov	r24, r24
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	9c 01       	movw	r18, r24
    10b6:	28 51       	subi	r18, 0x18	; 24
    10b8:	30 40       	sbci	r19, 0x00	; 0
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	02 2e       	mov	r0, r18
    10c0:	02 c0       	rjmp	.+4      	; 0x10c6 <DIO_SetPinDirection+0x1d6>
    10c2:	88 0f       	add	r24, r24
    10c4:	99 1f       	adc	r25, r25
    10c6:	0a 94       	dec	r0
    10c8:	e2 f7       	brpl	.-8      	; 0x10c2 <DIO_SetPinDirection+0x1d2>
    10ca:	80 95       	com	r24
    10cc:	84 23       	and	r24, r20
    10ce:	8c 93       	st	X, r24
		}
	}
}
    10d0:	0f 90       	pop	r0
    10d2:	0f 90       	pop	r0
    10d4:	cf 91       	pop	r28
    10d6:	df 91       	pop	r29
    10d8:	08 95       	ret

000010da <LCD_init>:
 * OUTPUTS 		 : void
 *
 * Return		 : void
 **************************************************************************/
void LCD_init(void)
{
    10da:	df 93       	push	r29
    10dc:	cf 93       	push	r28
    10de:	cd b7       	in	r28, 0x3d	; 61
    10e0:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    10e2:	aa e3       	ldi	r26, 0x3A	; 58
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	ea e3       	ldi	r30, 0x3A	; 58
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	8e 60       	ori	r24, 0x0E	; 14
    10ee:	8c 93       	st	X, r24

	#if (DATA_BITS_MODE == 4)
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT_DIR |= 0xF0; /* Configure the highest 4 bits of the data port as output pins */
    10f0:	aa e3       	ldi	r26, 0x3A	; 58
    10f2:	b0 e0       	ldi	r27, 0x00	; 0
    10f4:	ea e3       	ldi	r30, 0x3A	; 58
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	80 6f       	ori	r24, 0xF0	; 240
    10fc:	8c 93       	st	X, r24
		#else
			LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
		#endif
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
    10fe:	82 e0       	ldi	r24, 0x02	; 2
    1100:	0e 94 8e 08 	call	0x111c	; 0x111c <LCD_sendCommand>
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
    1104:	88 e2       	ldi	r24, 0x28	; 40
    1106:	0e 94 8e 08 	call	0x111c	; 0x111c <LCD_sendCommand>
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
	#endif

	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    110a:	8c e0       	ldi	r24, 0x0C	; 12
    110c:	0e 94 8e 08 	call	0x111c	; 0x111c <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	0e 94 8e 08 	call	0x111c	; 0x111c <LCD_sendCommand>
}
    1116:	cf 91       	pop	r28
    1118:	df 91       	pop	r29
    111a:	08 95       	ret

0000111c <LCD_sendCommand>:
 * OUTPUTS 		 : void
 *
 * Return		 : void
 **************************************************************************/
void LCD_sendCommand(uint8 command)
{
    111c:	0f 93       	push	r16
    111e:	1f 93       	push	r17
    1120:	df 93       	push	r29
    1122:	cf 93       	push	r28
    1124:	cd b7       	in	r28, 0x3d	; 61
    1126:	de b7       	in	r29, 0x3e	; 62
    1128:	c3 56       	subi	r28, 0x63	; 99
    112a:	d0 40       	sbci	r29, 0x00	; 0
    112c:	0f b6       	in	r0, 0x3f	; 63
    112e:	f8 94       	cli
    1130:	de bf       	out	0x3e, r29	; 62
    1132:	0f be       	out	0x3f, r0	; 63
    1134:	cd bf       	out	0x3d, r28	; 61
    1136:	fe 01       	movw	r30, r28
    1138:	ed 59       	subi	r30, 0x9D	; 157
    113a:	ff 4f       	sbci	r31, 0xFF	; 255
    113c:	80 83       	st	Z, r24
	Clear_Bit(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    113e:	ab e3       	ldi	r26, 0x3B	; 59
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	eb e3       	ldi	r30, 0x3B	; 59
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	8d 7f       	andi	r24, 0xFD	; 253
    114a:	8c 93       	st	X, r24
	Clear_Bit(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    114c:	ab e3       	ldi	r26, 0x3B	; 59
    114e:	b0 e0       	ldi	r27, 0x00	; 0
    1150:	eb e3       	ldi	r30, 0x3B	; 59
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 81       	ld	r24, Z
    1156:	8b 7f       	andi	r24, 0xFB	; 251
    1158:	8c 93       	st	X, r24
    115a:	fe 01       	movw	r30, r28
    115c:	e1 5a       	subi	r30, 0xA1	; 161
    115e:	ff 4f       	sbci	r31, 0xFF	; 255
    1160:	80 e0       	ldi	r24, 0x00	; 0
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	a0 e8       	ldi	r26, 0x80	; 128
    1166:	bf e3       	ldi	r27, 0x3F	; 63
    1168:	80 83       	st	Z, r24
    116a:	91 83       	std	Z+1, r25	; 0x01
    116c:	a2 83       	std	Z+2, r26	; 0x02
    116e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1170:	8e 01       	movw	r16, r28
    1172:	05 5a       	subi	r16, 0xA5	; 165
    1174:	1f 4f       	sbci	r17, 0xFF	; 255
    1176:	fe 01       	movw	r30, r28
    1178:	e1 5a       	subi	r30, 0xA1	; 161
    117a:	ff 4f       	sbci	r31, 0xFF	; 255
    117c:	60 81       	ld	r22, Z
    117e:	71 81       	ldd	r23, Z+1	; 0x01
    1180:	82 81       	ldd	r24, Z+2	; 0x02
    1182:	93 81       	ldd	r25, Z+3	; 0x03
    1184:	20 e0       	ldi	r18, 0x00	; 0
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	4a ef       	ldi	r20, 0xFA	; 250
    118a:	54 e4       	ldi	r21, 0x44	; 68
    118c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1190:	dc 01       	movw	r26, r24
    1192:	cb 01       	movw	r24, r22
    1194:	f8 01       	movw	r30, r16
    1196:	80 83       	st	Z, r24
    1198:	91 83       	std	Z+1, r25	; 0x01
    119a:	a2 83       	std	Z+2, r26	; 0x02
    119c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    119e:	fe 01       	movw	r30, r28
    11a0:	e5 5a       	subi	r30, 0xA5	; 165
    11a2:	ff 4f       	sbci	r31, 0xFF	; 255
    11a4:	60 81       	ld	r22, Z
    11a6:	71 81       	ldd	r23, Z+1	; 0x01
    11a8:	82 81       	ldd	r24, Z+2	; 0x02
    11aa:	93 81       	ldd	r25, Z+3	; 0x03
    11ac:	20 e0       	ldi	r18, 0x00	; 0
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	40 e8       	ldi	r20, 0x80	; 128
    11b2:	5f e3       	ldi	r21, 0x3F	; 63
    11b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11b8:	88 23       	and	r24, r24
    11ba:	44 f4       	brge	.+16     	; 0x11cc <LCD_sendCommand+0xb0>
		__ticks = 1;
    11bc:	fe 01       	movw	r30, r28
    11be:	e7 5a       	subi	r30, 0xA7	; 167
    11c0:	ff 4f       	sbci	r31, 0xFF	; 255
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	91 83       	std	Z+1, r25	; 0x01
    11c8:	80 83       	st	Z, r24
    11ca:	64 c0       	rjmp	.+200    	; 0x1294 <LCD_sendCommand+0x178>
	else if (__tmp > 65535)
    11cc:	fe 01       	movw	r30, r28
    11ce:	e5 5a       	subi	r30, 0xA5	; 165
    11d0:	ff 4f       	sbci	r31, 0xFF	; 255
    11d2:	60 81       	ld	r22, Z
    11d4:	71 81       	ldd	r23, Z+1	; 0x01
    11d6:	82 81       	ldd	r24, Z+2	; 0x02
    11d8:	93 81       	ldd	r25, Z+3	; 0x03
    11da:	20 e0       	ldi	r18, 0x00	; 0
    11dc:	3f ef       	ldi	r19, 0xFF	; 255
    11de:	4f e7       	ldi	r20, 0x7F	; 127
    11e0:	57 e4       	ldi	r21, 0x47	; 71
    11e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11e6:	18 16       	cp	r1, r24
    11e8:	0c f0       	brlt	.+2      	; 0x11ec <LCD_sendCommand+0xd0>
    11ea:	43 c0       	rjmp	.+134    	; 0x1272 <LCD_sendCommand+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11ec:	fe 01       	movw	r30, r28
    11ee:	e1 5a       	subi	r30, 0xA1	; 161
    11f0:	ff 4f       	sbci	r31, 0xFF	; 255
    11f2:	60 81       	ld	r22, Z
    11f4:	71 81       	ldd	r23, Z+1	; 0x01
    11f6:	82 81       	ldd	r24, Z+2	; 0x02
    11f8:	93 81       	ldd	r25, Z+3	; 0x03
    11fa:	20 e0       	ldi	r18, 0x00	; 0
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	40 e2       	ldi	r20, 0x20	; 32
    1200:	51 e4       	ldi	r21, 0x41	; 65
    1202:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1206:	dc 01       	movw	r26, r24
    1208:	cb 01       	movw	r24, r22
    120a:	8e 01       	movw	r16, r28
    120c:	07 5a       	subi	r16, 0xA7	; 167
    120e:	1f 4f       	sbci	r17, 0xFF	; 255
    1210:	bc 01       	movw	r22, r24
    1212:	cd 01       	movw	r24, r26
    1214:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1218:	dc 01       	movw	r26, r24
    121a:	cb 01       	movw	r24, r22
    121c:	f8 01       	movw	r30, r16
    121e:	91 83       	std	Z+1, r25	; 0x01
    1220:	80 83       	st	Z, r24
    1222:	1f c0       	rjmp	.+62     	; 0x1262 <LCD_sendCommand+0x146>
    1224:	fe 01       	movw	r30, r28
    1226:	e9 5a       	subi	r30, 0xA9	; 169
    1228:	ff 4f       	sbci	r31, 0xFF	; 255
    122a:	88 ec       	ldi	r24, 0xC8	; 200
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	91 83       	std	Z+1, r25	; 0x01
    1230:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1232:	fe 01       	movw	r30, r28
    1234:	e9 5a       	subi	r30, 0xA9	; 169
    1236:	ff 4f       	sbci	r31, 0xFF	; 255
    1238:	80 81       	ld	r24, Z
    123a:	91 81       	ldd	r25, Z+1	; 0x01
    123c:	01 97       	sbiw	r24, 0x01	; 1
    123e:	f1 f7       	brne	.-4      	; 0x123c <LCD_sendCommand+0x120>
    1240:	fe 01       	movw	r30, r28
    1242:	e9 5a       	subi	r30, 0xA9	; 169
    1244:	ff 4f       	sbci	r31, 0xFF	; 255
    1246:	91 83       	std	Z+1, r25	; 0x01
    1248:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    124a:	de 01       	movw	r26, r28
    124c:	a7 5a       	subi	r26, 0xA7	; 167
    124e:	bf 4f       	sbci	r27, 0xFF	; 255
    1250:	fe 01       	movw	r30, r28
    1252:	e7 5a       	subi	r30, 0xA7	; 167
    1254:	ff 4f       	sbci	r31, 0xFF	; 255
    1256:	80 81       	ld	r24, Z
    1258:	91 81       	ldd	r25, Z+1	; 0x01
    125a:	01 97       	sbiw	r24, 0x01	; 1
    125c:	11 96       	adiw	r26, 0x01	; 1
    125e:	9c 93       	st	X, r25
    1260:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1262:	fe 01       	movw	r30, r28
    1264:	e7 5a       	subi	r30, 0xA7	; 167
    1266:	ff 4f       	sbci	r31, 0xFF	; 255
    1268:	80 81       	ld	r24, Z
    126a:	91 81       	ldd	r25, Z+1	; 0x01
    126c:	00 97       	sbiw	r24, 0x00	; 0
    126e:	d1 f6       	brne	.-76     	; 0x1224 <LCD_sendCommand+0x108>
    1270:	27 c0       	rjmp	.+78     	; 0x12c0 <LCD_sendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1272:	8e 01       	movw	r16, r28
    1274:	07 5a       	subi	r16, 0xA7	; 167
    1276:	1f 4f       	sbci	r17, 0xFF	; 255
    1278:	fe 01       	movw	r30, r28
    127a:	e5 5a       	subi	r30, 0xA5	; 165
    127c:	ff 4f       	sbci	r31, 0xFF	; 255
    127e:	60 81       	ld	r22, Z
    1280:	71 81       	ldd	r23, Z+1	; 0x01
    1282:	82 81       	ldd	r24, Z+2	; 0x02
    1284:	93 81       	ldd	r25, Z+3	; 0x03
    1286:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    128a:	dc 01       	movw	r26, r24
    128c:	cb 01       	movw	r24, r22
    128e:	f8 01       	movw	r30, r16
    1290:	91 83       	std	Z+1, r25	; 0x01
    1292:	80 83       	st	Z, r24
    1294:	de 01       	movw	r26, r28
    1296:	ab 5a       	subi	r26, 0xAB	; 171
    1298:	bf 4f       	sbci	r27, 0xFF	; 255
    129a:	fe 01       	movw	r30, r28
    129c:	e7 5a       	subi	r30, 0xA7	; 167
    129e:	ff 4f       	sbci	r31, 0xFF	; 255
    12a0:	80 81       	ld	r24, Z
    12a2:	91 81       	ldd	r25, Z+1	; 0x01
    12a4:	8d 93       	st	X+, r24
    12a6:	9c 93       	st	X, r25
    12a8:	fe 01       	movw	r30, r28
    12aa:	eb 5a       	subi	r30, 0xAB	; 171
    12ac:	ff 4f       	sbci	r31, 0xFF	; 255
    12ae:	80 81       	ld	r24, Z
    12b0:	91 81       	ldd	r25, Z+1	; 0x01
    12b2:	01 97       	sbiw	r24, 0x01	; 1
    12b4:	f1 f7       	brne	.-4      	; 0x12b2 <LCD_sendCommand+0x196>
    12b6:	fe 01       	movw	r30, r28
    12b8:	eb 5a       	subi	r30, 0xAB	; 171
    12ba:	ff 4f       	sbci	r31, 0xFF	; 255
    12bc:	91 83       	std	Z+1, r25	; 0x01
    12be:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	Set_Bit(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    12c0:	ab e3       	ldi	r26, 0x3B	; 59
    12c2:	b0 e0       	ldi	r27, 0x00	; 0
    12c4:	eb e3       	ldi	r30, 0x3B	; 59
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	80 81       	ld	r24, Z
    12ca:	88 60       	ori	r24, 0x08	; 8
    12cc:	8c 93       	st	X, r24
    12ce:	fe 01       	movw	r30, r28
    12d0:	ef 5a       	subi	r30, 0xAF	; 175
    12d2:	ff 4f       	sbci	r31, 0xFF	; 255
    12d4:	80 e0       	ldi	r24, 0x00	; 0
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	a0 e8       	ldi	r26, 0x80	; 128
    12da:	bf e3       	ldi	r27, 0x3F	; 63
    12dc:	80 83       	st	Z, r24
    12de:	91 83       	std	Z+1, r25	; 0x01
    12e0:	a2 83       	std	Z+2, r26	; 0x02
    12e2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12e4:	8e 01       	movw	r16, r28
    12e6:	03 5b       	subi	r16, 0xB3	; 179
    12e8:	1f 4f       	sbci	r17, 0xFF	; 255
    12ea:	fe 01       	movw	r30, r28
    12ec:	ef 5a       	subi	r30, 0xAF	; 175
    12ee:	ff 4f       	sbci	r31, 0xFF	; 255
    12f0:	60 81       	ld	r22, Z
    12f2:	71 81       	ldd	r23, Z+1	; 0x01
    12f4:	82 81       	ldd	r24, Z+2	; 0x02
    12f6:	93 81       	ldd	r25, Z+3	; 0x03
    12f8:	20 e0       	ldi	r18, 0x00	; 0
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	4a ef       	ldi	r20, 0xFA	; 250
    12fe:	54 e4       	ldi	r21, 0x44	; 68
    1300:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1304:	dc 01       	movw	r26, r24
    1306:	cb 01       	movw	r24, r22
    1308:	f8 01       	movw	r30, r16
    130a:	80 83       	st	Z, r24
    130c:	91 83       	std	Z+1, r25	; 0x01
    130e:	a2 83       	std	Z+2, r26	; 0x02
    1310:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1312:	fe 01       	movw	r30, r28
    1314:	e3 5b       	subi	r30, 0xB3	; 179
    1316:	ff 4f       	sbci	r31, 0xFF	; 255
    1318:	60 81       	ld	r22, Z
    131a:	71 81       	ldd	r23, Z+1	; 0x01
    131c:	82 81       	ldd	r24, Z+2	; 0x02
    131e:	93 81       	ldd	r25, Z+3	; 0x03
    1320:	20 e0       	ldi	r18, 0x00	; 0
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	40 e8       	ldi	r20, 0x80	; 128
    1326:	5f e3       	ldi	r21, 0x3F	; 63
    1328:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    132c:	88 23       	and	r24, r24
    132e:	44 f4       	brge	.+16     	; 0x1340 <LCD_sendCommand+0x224>
		__ticks = 1;
    1330:	fe 01       	movw	r30, r28
    1332:	e5 5b       	subi	r30, 0xB5	; 181
    1334:	ff 4f       	sbci	r31, 0xFF	; 255
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	91 83       	std	Z+1, r25	; 0x01
    133c:	80 83       	st	Z, r24
    133e:	64 c0       	rjmp	.+200    	; 0x1408 <LCD_sendCommand+0x2ec>
	else if (__tmp > 65535)
    1340:	fe 01       	movw	r30, r28
    1342:	e3 5b       	subi	r30, 0xB3	; 179
    1344:	ff 4f       	sbci	r31, 0xFF	; 255
    1346:	60 81       	ld	r22, Z
    1348:	71 81       	ldd	r23, Z+1	; 0x01
    134a:	82 81       	ldd	r24, Z+2	; 0x02
    134c:	93 81       	ldd	r25, Z+3	; 0x03
    134e:	20 e0       	ldi	r18, 0x00	; 0
    1350:	3f ef       	ldi	r19, 0xFF	; 255
    1352:	4f e7       	ldi	r20, 0x7F	; 127
    1354:	57 e4       	ldi	r21, 0x47	; 71
    1356:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    135a:	18 16       	cp	r1, r24
    135c:	0c f0       	brlt	.+2      	; 0x1360 <LCD_sendCommand+0x244>
    135e:	43 c0       	rjmp	.+134    	; 0x13e6 <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1360:	fe 01       	movw	r30, r28
    1362:	ef 5a       	subi	r30, 0xAF	; 175
    1364:	ff 4f       	sbci	r31, 0xFF	; 255
    1366:	60 81       	ld	r22, Z
    1368:	71 81       	ldd	r23, Z+1	; 0x01
    136a:	82 81       	ldd	r24, Z+2	; 0x02
    136c:	93 81       	ldd	r25, Z+3	; 0x03
    136e:	20 e0       	ldi	r18, 0x00	; 0
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	40 e2       	ldi	r20, 0x20	; 32
    1374:	51 e4       	ldi	r21, 0x41	; 65
    1376:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    137a:	dc 01       	movw	r26, r24
    137c:	cb 01       	movw	r24, r22
    137e:	8e 01       	movw	r16, r28
    1380:	05 5b       	subi	r16, 0xB5	; 181
    1382:	1f 4f       	sbci	r17, 0xFF	; 255
    1384:	bc 01       	movw	r22, r24
    1386:	cd 01       	movw	r24, r26
    1388:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    138c:	dc 01       	movw	r26, r24
    138e:	cb 01       	movw	r24, r22
    1390:	f8 01       	movw	r30, r16
    1392:	91 83       	std	Z+1, r25	; 0x01
    1394:	80 83       	st	Z, r24
    1396:	1f c0       	rjmp	.+62     	; 0x13d6 <LCD_sendCommand+0x2ba>
    1398:	fe 01       	movw	r30, r28
    139a:	e7 5b       	subi	r30, 0xB7	; 183
    139c:	ff 4f       	sbci	r31, 0xFF	; 255
    139e:	88 ec       	ldi	r24, 0xC8	; 200
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	91 83       	std	Z+1, r25	; 0x01
    13a4:	80 83       	st	Z, r24
    13a6:	fe 01       	movw	r30, r28
    13a8:	e7 5b       	subi	r30, 0xB7	; 183
    13aa:	ff 4f       	sbci	r31, 0xFF	; 255
    13ac:	80 81       	ld	r24, Z
    13ae:	91 81       	ldd	r25, Z+1	; 0x01
    13b0:	01 97       	sbiw	r24, 0x01	; 1
    13b2:	f1 f7       	brne	.-4      	; 0x13b0 <LCD_sendCommand+0x294>
    13b4:	fe 01       	movw	r30, r28
    13b6:	e7 5b       	subi	r30, 0xB7	; 183
    13b8:	ff 4f       	sbci	r31, 0xFF	; 255
    13ba:	91 83       	std	Z+1, r25	; 0x01
    13bc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13be:	de 01       	movw	r26, r28
    13c0:	a5 5b       	subi	r26, 0xB5	; 181
    13c2:	bf 4f       	sbci	r27, 0xFF	; 255
    13c4:	fe 01       	movw	r30, r28
    13c6:	e5 5b       	subi	r30, 0xB5	; 181
    13c8:	ff 4f       	sbci	r31, 0xFF	; 255
    13ca:	80 81       	ld	r24, Z
    13cc:	91 81       	ldd	r25, Z+1	; 0x01
    13ce:	01 97       	sbiw	r24, 0x01	; 1
    13d0:	11 96       	adiw	r26, 0x01	; 1
    13d2:	9c 93       	st	X, r25
    13d4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13d6:	fe 01       	movw	r30, r28
    13d8:	e5 5b       	subi	r30, 0xB5	; 181
    13da:	ff 4f       	sbci	r31, 0xFF	; 255
    13dc:	80 81       	ld	r24, Z
    13de:	91 81       	ldd	r25, Z+1	; 0x01
    13e0:	00 97       	sbiw	r24, 0x00	; 0
    13e2:	d1 f6       	brne	.-76     	; 0x1398 <LCD_sendCommand+0x27c>
    13e4:	27 c0       	rjmp	.+78     	; 0x1434 <LCD_sendCommand+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13e6:	8e 01       	movw	r16, r28
    13e8:	05 5b       	subi	r16, 0xB5	; 181
    13ea:	1f 4f       	sbci	r17, 0xFF	; 255
    13ec:	fe 01       	movw	r30, r28
    13ee:	e3 5b       	subi	r30, 0xB3	; 179
    13f0:	ff 4f       	sbci	r31, 0xFF	; 255
    13f2:	60 81       	ld	r22, Z
    13f4:	71 81       	ldd	r23, Z+1	; 0x01
    13f6:	82 81       	ldd	r24, Z+2	; 0x02
    13f8:	93 81       	ldd	r25, Z+3	; 0x03
    13fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13fe:	dc 01       	movw	r26, r24
    1400:	cb 01       	movw	r24, r22
    1402:	f8 01       	movw	r30, r16
    1404:	91 83       	std	Z+1, r25	; 0x01
    1406:	80 83       	st	Z, r24
    1408:	de 01       	movw	r26, r28
    140a:	a9 5b       	subi	r26, 0xB9	; 185
    140c:	bf 4f       	sbci	r27, 0xFF	; 255
    140e:	fe 01       	movw	r30, r28
    1410:	e5 5b       	subi	r30, 0xB5	; 181
    1412:	ff 4f       	sbci	r31, 0xFF	; 255
    1414:	80 81       	ld	r24, Z
    1416:	91 81       	ldd	r25, Z+1	; 0x01
    1418:	8d 93       	st	X+, r24
    141a:	9c 93       	st	X, r25
    141c:	fe 01       	movw	r30, r28
    141e:	e9 5b       	subi	r30, 0xB9	; 185
    1420:	ff 4f       	sbci	r31, 0xFF	; 255
    1422:	80 81       	ld	r24, Z
    1424:	91 81       	ldd	r25, Z+1	; 0x01
    1426:	01 97       	sbiw	r24, 0x01	; 1
    1428:	f1 f7       	brne	.-4      	; 0x1426 <LCD_sendCommand+0x30a>
    142a:	fe 01       	movw	r30, r28
    142c:	e9 5b       	subi	r30, 0xB9	; 185
    142e:	ff 4f       	sbci	r31, 0xFF	; 255
    1430:	91 83       	std	Z+1, r25	; 0x01
    1432:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (command & 0xF0);
    1434:	ab e3       	ldi	r26, 0x3B	; 59
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	eb e3       	ldi	r30, 0x3B	; 59
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	98 2f       	mov	r25, r24
    1440:	9f 70       	andi	r25, 0x0F	; 15
    1442:	fe 01       	movw	r30, r28
    1444:	ed 59       	subi	r30, 0x9D	; 157
    1446:	ff 4f       	sbci	r31, 0xFF	; 255
    1448:	80 81       	ld	r24, Z
    144a:	80 7f       	andi	r24, 0xF0	; 240
    144c:	89 2b       	or	r24, r25
    144e:	8c 93       	st	X, r24
    1450:	fe 01       	movw	r30, r28
    1452:	ed 5b       	subi	r30, 0xBD	; 189
    1454:	ff 4f       	sbci	r31, 0xFF	; 255
    1456:	80 e0       	ldi	r24, 0x00	; 0
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	a0 e8       	ldi	r26, 0x80	; 128
    145c:	bf e3       	ldi	r27, 0x3F	; 63
    145e:	80 83       	st	Z, r24
    1460:	91 83       	std	Z+1, r25	; 0x01
    1462:	a2 83       	std	Z+2, r26	; 0x02
    1464:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1466:	8e 01       	movw	r16, r28
    1468:	01 5c       	subi	r16, 0xC1	; 193
    146a:	1f 4f       	sbci	r17, 0xFF	; 255
    146c:	fe 01       	movw	r30, r28
    146e:	ed 5b       	subi	r30, 0xBD	; 189
    1470:	ff 4f       	sbci	r31, 0xFF	; 255
    1472:	60 81       	ld	r22, Z
    1474:	71 81       	ldd	r23, Z+1	; 0x01
    1476:	82 81       	ldd	r24, Z+2	; 0x02
    1478:	93 81       	ldd	r25, Z+3	; 0x03
    147a:	20 e0       	ldi	r18, 0x00	; 0
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	4a ef       	ldi	r20, 0xFA	; 250
    1480:	54 e4       	ldi	r21, 0x44	; 68
    1482:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1486:	dc 01       	movw	r26, r24
    1488:	cb 01       	movw	r24, r22
    148a:	f8 01       	movw	r30, r16
    148c:	80 83       	st	Z, r24
    148e:	91 83       	std	Z+1, r25	; 0x01
    1490:	a2 83       	std	Z+2, r26	; 0x02
    1492:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1494:	fe 01       	movw	r30, r28
    1496:	ff 96       	adiw	r30, 0x3f	; 63
    1498:	60 81       	ld	r22, Z
    149a:	71 81       	ldd	r23, Z+1	; 0x01
    149c:	82 81       	ldd	r24, Z+2	; 0x02
    149e:	93 81       	ldd	r25, Z+3	; 0x03
    14a0:	20 e0       	ldi	r18, 0x00	; 0
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	40 e8       	ldi	r20, 0x80	; 128
    14a6:	5f e3       	ldi	r21, 0x3F	; 63
    14a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14ac:	88 23       	and	r24, r24
    14ae:	2c f4       	brge	.+10     	; 0x14ba <LCD_sendCommand+0x39e>
		__ticks = 1;
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	9e af       	std	Y+62, r25	; 0x3e
    14b6:	8d af       	std	Y+61, r24	; 0x3d
    14b8:	46 c0       	rjmp	.+140    	; 0x1546 <LCD_sendCommand+0x42a>
	else if (__tmp > 65535)
    14ba:	fe 01       	movw	r30, r28
    14bc:	ff 96       	adiw	r30, 0x3f	; 63
    14be:	60 81       	ld	r22, Z
    14c0:	71 81       	ldd	r23, Z+1	; 0x01
    14c2:	82 81       	ldd	r24, Z+2	; 0x02
    14c4:	93 81       	ldd	r25, Z+3	; 0x03
    14c6:	20 e0       	ldi	r18, 0x00	; 0
    14c8:	3f ef       	ldi	r19, 0xFF	; 255
    14ca:	4f e7       	ldi	r20, 0x7F	; 127
    14cc:	57 e4       	ldi	r21, 0x47	; 71
    14ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14d2:	18 16       	cp	r1, r24
    14d4:	64 f5       	brge	.+88     	; 0x152e <LCD_sendCommand+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14d6:	fe 01       	movw	r30, r28
    14d8:	ed 5b       	subi	r30, 0xBD	; 189
    14da:	ff 4f       	sbci	r31, 0xFF	; 255
    14dc:	60 81       	ld	r22, Z
    14de:	71 81       	ldd	r23, Z+1	; 0x01
    14e0:	82 81       	ldd	r24, Z+2	; 0x02
    14e2:	93 81       	ldd	r25, Z+3	; 0x03
    14e4:	20 e0       	ldi	r18, 0x00	; 0
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	40 e2       	ldi	r20, 0x20	; 32
    14ea:	51 e4       	ldi	r21, 0x41	; 65
    14ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14f0:	dc 01       	movw	r26, r24
    14f2:	cb 01       	movw	r24, r22
    14f4:	bc 01       	movw	r22, r24
    14f6:	cd 01       	movw	r24, r26
    14f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14fc:	dc 01       	movw	r26, r24
    14fe:	cb 01       	movw	r24, r22
    1500:	9e af       	std	Y+62, r25	; 0x3e
    1502:	8d af       	std	Y+61, r24	; 0x3d
    1504:	0f c0       	rjmp	.+30     	; 0x1524 <LCD_sendCommand+0x408>
    1506:	88 ec       	ldi	r24, 0xC8	; 200
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	9c af       	std	Y+60, r25	; 0x3c
    150c:	8b af       	std	Y+59, r24	; 0x3b
    150e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1510:	9c ad       	ldd	r25, Y+60	; 0x3c
    1512:	01 97       	sbiw	r24, 0x01	; 1
    1514:	f1 f7       	brne	.-4      	; 0x1512 <LCD_sendCommand+0x3f6>
    1516:	9c af       	std	Y+60, r25	; 0x3c
    1518:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    151a:	8d ad       	ldd	r24, Y+61	; 0x3d
    151c:	9e ad       	ldd	r25, Y+62	; 0x3e
    151e:	01 97       	sbiw	r24, 0x01	; 1
    1520:	9e af       	std	Y+62, r25	; 0x3e
    1522:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1524:	8d ad       	ldd	r24, Y+61	; 0x3d
    1526:	9e ad       	ldd	r25, Y+62	; 0x3e
    1528:	00 97       	sbiw	r24, 0x00	; 0
    152a:	69 f7       	brne	.-38     	; 0x1506 <LCD_sendCommand+0x3ea>
    152c:	16 c0       	rjmp	.+44     	; 0x155a <LCD_sendCommand+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    152e:	fe 01       	movw	r30, r28
    1530:	ff 96       	adiw	r30, 0x3f	; 63
    1532:	60 81       	ld	r22, Z
    1534:	71 81       	ldd	r23, Z+1	; 0x01
    1536:	82 81       	ldd	r24, Z+2	; 0x02
    1538:	93 81       	ldd	r25, Z+3	; 0x03
    153a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    153e:	dc 01       	movw	r26, r24
    1540:	cb 01       	movw	r24, r22
    1542:	9e af       	std	Y+62, r25	; 0x3e
    1544:	8d af       	std	Y+61, r24	; 0x3d
    1546:	8d ad       	ldd	r24, Y+61	; 0x3d
    1548:	9e ad       	ldd	r25, Y+62	; 0x3e
    154a:	9a af       	std	Y+58, r25	; 0x3a
    154c:	89 af       	std	Y+57, r24	; 0x39
    154e:	89 ad       	ldd	r24, Y+57	; 0x39
    1550:	9a ad       	ldd	r25, Y+58	; 0x3a
    1552:	01 97       	sbiw	r24, 0x01	; 1
    1554:	f1 f7       	brne	.-4      	; 0x1552 <LCD_sendCommand+0x436>
    1556:	9a af       	std	Y+58, r25	; 0x3a
    1558:	89 af       	std	Y+57, r24	; 0x39
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((command & 0xF0) >> 4);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	Clear_Bit(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    155a:	ab e3       	ldi	r26, 0x3B	; 59
    155c:	b0 e0       	ldi	r27, 0x00	; 0
    155e:	eb e3       	ldi	r30, 0x3B	; 59
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	87 7f       	andi	r24, 0xF7	; 247
    1566:	8c 93       	st	X, r24
    1568:	80 e0       	ldi	r24, 0x00	; 0
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	a0 e8       	ldi	r26, 0x80	; 128
    156e:	bf e3       	ldi	r27, 0x3F	; 63
    1570:	8d ab       	std	Y+53, r24	; 0x35
    1572:	9e ab       	std	Y+54, r25	; 0x36
    1574:	af ab       	std	Y+55, r26	; 0x37
    1576:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1578:	6d a9       	ldd	r22, Y+53	; 0x35
    157a:	7e a9       	ldd	r23, Y+54	; 0x36
    157c:	8f a9       	ldd	r24, Y+55	; 0x37
    157e:	98 ad       	ldd	r25, Y+56	; 0x38
    1580:	20 e0       	ldi	r18, 0x00	; 0
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	4a ef       	ldi	r20, 0xFA	; 250
    1586:	54 e4       	ldi	r21, 0x44	; 68
    1588:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    158c:	dc 01       	movw	r26, r24
    158e:	cb 01       	movw	r24, r22
    1590:	89 ab       	std	Y+49, r24	; 0x31
    1592:	9a ab       	std	Y+50, r25	; 0x32
    1594:	ab ab       	std	Y+51, r26	; 0x33
    1596:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1598:	69 a9       	ldd	r22, Y+49	; 0x31
    159a:	7a a9       	ldd	r23, Y+50	; 0x32
    159c:	8b a9       	ldd	r24, Y+51	; 0x33
    159e:	9c a9       	ldd	r25, Y+52	; 0x34
    15a0:	20 e0       	ldi	r18, 0x00	; 0
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	40 e8       	ldi	r20, 0x80	; 128
    15a6:	5f e3       	ldi	r21, 0x3F	; 63
    15a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15ac:	88 23       	and	r24, r24
    15ae:	2c f4       	brge	.+10     	; 0x15ba <LCD_sendCommand+0x49e>
		__ticks = 1;
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	98 ab       	std	Y+48, r25	; 0x30
    15b6:	8f a7       	std	Y+47, r24	; 0x2f
    15b8:	3f c0       	rjmp	.+126    	; 0x1638 <LCD_sendCommand+0x51c>
	else if (__tmp > 65535)
    15ba:	69 a9       	ldd	r22, Y+49	; 0x31
    15bc:	7a a9       	ldd	r23, Y+50	; 0x32
    15be:	8b a9       	ldd	r24, Y+51	; 0x33
    15c0:	9c a9       	ldd	r25, Y+52	; 0x34
    15c2:	20 e0       	ldi	r18, 0x00	; 0
    15c4:	3f ef       	ldi	r19, 0xFF	; 255
    15c6:	4f e7       	ldi	r20, 0x7F	; 127
    15c8:	57 e4       	ldi	r21, 0x47	; 71
    15ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15ce:	18 16       	cp	r1, r24
    15d0:	4c f5       	brge	.+82     	; 0x1624 <LCD_sendCommand+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15d2:	6d a9       	ldd	r22, Y+53	; 0x35
    15d4:	7e a9       	ldd	r23, Y+54	; 0x36
    15d6:	8f a9       	ldd	r24, Y+55	; 0x37
    15d8:	98 ad       	ldd	r25, Y+56	; 0x38
    15da:	20 e0       	ldi	r18, 0x00	; 0
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	40 e2       	ldi	r20, 0x20	; 32
    15e0:	51 e4       	ldi	r21, 0x41	; 65
    15e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15e6:	dc 01       	movw	r26, r24
    15e8:	cb 01       	movw	r24, r22
    15ea:	bc 01       	movw	r22, r24
    15ec:	cd 01       	movw	r24, r26
    15ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15f2:	dc 01       	movw	r26, r24
    15f4:	cb 01       	movw	r24, r22
    15f6:	98 ab       	std	Y+48, r25	; 0x30
    15f8:	8f a7       	std	Y+47, r24	; 0x2f
    15fa:	0f c0       	rjmp	.+30     	; 0x161a <LCD_sendCommand+0x4fe>
    15fc:	88 ec       	ldi	r24, 0xC8	; 200
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	9e a7       	std	Y+46, r25	; 0x2e
    1602:	8d a7       	std	Y+45, r24	; 0x2d
    1604:	8d a5       	ldd	r24, Y+45	; 0x2d
    1606:	9e a5       	ldd	r25, Y+46	; 0x2e
    1608:	01 97       	sbiw	r24, 0x01	; 1
    160a:	f1 f7       	brne	.-4      	; 0x1608 <LCD_sendCommand+0x4ec>
    160c:	9e a7       	std	Y+46, r25	; 0x2e
    160e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1610:	8f a5       	ldd	r24, Y+47	; 0x2f
    1612:	98 a9       	ldd	r25, Y+48	; 0x30
    1614:	01 97       	sbiw	r24, 0x01	; 1
    1616:	98 ab       	std	Y+48, r25	; 0x30
    1618:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    161a:	8f a5       	ldd	r24, Y+47	; 0x2f
    161c:	98 a9       	ldd	r25, Y+48	; 0x30
    161e:	00 97       	sbiw	r24, 0x00	; 0
    1620:	69 f7       	brne	.-38     	; 0x15fc <LCD_sendCommand+0x4e0>
    1622:	14 c0       	rjmp	.+40     	; 0x164c <LCD_sendCommand+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1624:	69 a9       	ldd	r22, Y+49	; 0x31
    1626:	7a a9       	ldd	r23, Y+50	; 0x32
    1628:	8b a9       	ldd	r24, Y+51	; 0x33
    162a:	9c a9       	ldd	r25, Y+52	; 0x34
    162c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1630:	dc 01       	movw	r26, r24
    1632:	cb 01       	movw	r24, r22
    1634:	98 ab       	std	Y+48, r25	; 0x30
    1636:	8f a7       	std	Y+47, r24	; 0x2f
    1638:	8f a5       	ldd	r24, Y+47	; 0x2f
    163a:	98 a9       	ldd	r25, Y+48	; 0x30
    163c:	9c a7       	std	Y+44, r25	; 0x2c
    163e:	8b a7       	std	Y+43, r24	; 0x2b
    1640:	8b a5       	ldd	r24, Y+43	; 0x2b
    1642:	9c a5       	ldd	r25, Y+44	; 0x2c
    1644:	01 97       	sbiw	r24, 0x01	; 1
    1646:	f1 f7       	brne	.-4      	; 0x1644 <LCD_sendCommand+0x528>
    1648:	9c a7       	std	Y+44, r25	; 0x2c
    164a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	Set_Bit(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    164c:	ab e3       	ldi	r26, 0x3B	; 59
    164e:	b0 e0       	ldi	r27, 0x00	; 0
    1650:	eb e3       	ldi	r30, 0x3B	; 59
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	88 60       	ori	r24, 0x08	; 8
    1658:	8c 93       	st	X, r24
    165a:	80 e0       	ldi	r24, 0x00	; 0
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	a0 e8       	ldi	r26, 0x80	; 128
    1660:	bf e3       	ldi	r27, 0x3F	; 63
    1662:	8f a3       	std	Y+39, r24	; 0x27
    1664:	98 a7       	std	Y+40, r25	; 0x28
    1666:	a9 a7       	std	Y+41, r26	; 0x29
    1668:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    166a:	6f a1       	ldd	r22, Y+39	; 0x27
    166c:	78 a5       	ldd	r23, Y+40	; 0x28
    166e:	89 a5       	ldd	r24, Y+41	; 0x29
    1670:	9a a5       	ldd	r25, Y+42	; 0x2a
    1672:	20 e0       	ldi	r18, 0x00	; 0
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	4a ef       	ldi	r20, 0xFA	; 250
    1678:	54 e4       	ldi	r21, 0x44	; 68
    167a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    167e:	dc 01       	movw	r26, r24
    1680:	cb 01       	movw	r24, r22
    1682:	8b a3       	std	Y+35, r24	; 0x23
    1684:	9c a3       	std	Y+36, r25	; 0x24
    1686:	ad a3       	std	Y+37, r26	; 0x25
    1688:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    168a:	6b a1       	ldd	r22, Y+35	; 0x23
    168c:	7c a1       	ldd	r23, Y+36	; 0x24
    168e:	8d a1       	ldd	r24, Y+37	; 0x25
    1690:	9e a1       	ldd	r25, Y+38	; 0x26
    1692:	20 e0       	ldi	r18, 0x00	; 0
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	40 e8       	ldi	r20, 0x80	; 128
    1698:	5f e3       	ldi	r21, 0x3F	; 63
    169a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    169e:	88 23       	and	r24, r24
    16a0:	2c f4       	brge	.+10     	; 0x16ac <LCD_sendCommand+0x590>
		__ticks = 1;
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	9a a3       	std	Y+34, r25	; 0x22
    16a8:	89 a3       	std	Y+33, r24	; 0x21
    16aa:	3f c0       	rjmp	.+126    	; 0x172a <LCD_sendCommand+0x60e>
	else if (__tmp > 65535)
    16ac:	6b a1       	ldd	r22, Y+35	; 0x23
    16ae:	7c a1       	ldd	r23, Y+36	; 0x24
    16b0:	8d a1       	ldd	r24, Y+37	; 0x25
    16b2:	9e a1       	ldd	r25, Y+38	; 0x26
    16b4:	20 e0       	ldi	r18, 0x00	; 0
    16b6:	3f ef       	ldi	r19, 0xFF	; 255
    16b8:	4f e7       	ldi	r20, 0x7F	; 127
    16ba:	57 e4       	ldi	r21, 0x47	; 71
    16bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16c0:	18 16       	cp	r1, r24
    16c2:	4c f5       	brge	.+82     	; 0x1716 <LCD_sendCommand+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16c4:	6f a1       	ldd	r22, Y+39	; 0x27
    16c6:	78 a5       	ldd	r23, Y+40	; 0x28
    16c8:	89 a5       	ldd	r24, Y+41	; 0x29
    16ca:	9a a5       	ldd	r25, Y+42	; 0x2a
    16cc:	20 e0       	ldi	r18, 0x00	; 0
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	40 e2       	ldi	r20, 0x20	; 32
    16d2:	51 e4       	ldi	r21, 0x41	; 65
    16d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16d8:	dc 01       	movw	r26, r24
    16da:	cb 01       	movw	r24, r22
    16dc:	bc 01       	movw	r22, r24
    16de:	cd 01       	movw	r24, r26
    16e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16e4:	dc 01       	movw	r26, r24
    16e6:	cb 01       	movw	r24, r22
    16e8:	9a a3       	std	Y+34, r25	; 0x22
    16ea:	89 a3       	std	Y+33, r24	; 0x21
    16ec:	0f c0       	rjmp	.+30     	; 0x170c <LCD_sendCommand+0x5f0>
    16ee:	88 ec       	ldi	r24, 0xC8	; 200
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	98 a3       	std	Y+32, r25	; 0x20
    16f4:	8f 8f       	std	Y+31, r24	; 0x1f
    16f6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    16f8:	98 a1       	ldd	r25, Y+32	; 0x20
    16fa:	01 97       	sbiw	r24, 0x01	; 1
    16fc:	f1 f7       	brne	.-4      	; 0x16fa <LCD_sendCommand+0x5de>
    16fe:	98 a3       	std	Y+32, r25	; 0x20
    1700:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1702:	89 a1       	ldd	r24, Y+33	; 0x21
    1704:	9a a1       	ldd	r25, Y+34	; 0x22
    1706:	01 97       	sbiw	r24, 0x01	; 1
    1708:	9a a3       	std	Y+34, r25	; 0x22
    170a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    170c:	89 a1       	ldd	r24, Y+33	; 0x21
    170e:	9a a1       	ldd	r25, Y+34	; 0x22
    1710:	00 97       	sbiw	r24, 0x00	; 0
    1712:	69 f7       	brne	.-38     	; 0x16ee <LCD_sendCommand+0x5d2>
    1714:	14 c0       	rjmp	.+40     	; 0x173e <LCD_sendCommand+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1716:	6b a1       	ldd	r22, Y+35	; 0x23
    1718:	7c a1       	ldd	r23, Y+36	; 0x24
    171a:	8d a1       	ldd	r24, Y+37	; 0x25
    171c:	9e a1       	ldd	r25, Y+38	; 0x26
    171e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1722:	dc 01       	movw	r26, r24
    1724:	cb 01       	movw	r24, r22
    1726:	9a a3       	std	Y+34, r25	; 0x22
    1728:	89 a3       	std	Y+33, r24	; 0x21
    172a:	89 a1       	ldd	r24, Y+33	; 0x21
    172c:	9a a1       	ldd	r25, Y+34	; 0x22
    172e:	9e 8f       	std	Y+30, r25	; 0x1e
    1730:	8d 8f       	std	Y+29, r24	; 0x1d
    1732:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1734:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1736:	01 97       	sbiw	r24, 0x01	; 1
    1738:	f1 f7       	brne	.-4      	; 0x1736 <LCD_sendCommand+0x61a>
    173a:	9e 8f       	std	Y+30, r25	; 0x1e
    173c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/* out the lowest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((command & 0x0F) << 4);
    173e:	ab e3       	ldi	r26, 0x3B	; 59
    1740:	b0 e0       	ldi	r27, 0x00	; 0
    1742:	eb e3       	ldi	r30, 0x3B	; 59
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	80 81       	ld	r24, Z
    1748:	28 2f       	mov	r18, r24
    174a:	2f 70       	andi	r18, 0x0F	; 15
    174c:	fe 01       	movw	r30, r28
    174e:	ed 59       	subi	r30, 0x9D	; 157
    1750:	ff 4f       	sbci	r31, 0xFF	; 255
    1752:	80 81       	ld	r24, Z
    1754:	88 2f       	mov	r24, r24
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	82 95       	swap	r24
    175a:	92 95       	swap	r25
    175c:	90 7f       	andi	r25, 0xF0	; 240
    175e:	98 27       	eor	r25, r24
    1760:	80 7f       	andi	r24, 0xF0	; 240
    1762:	98 27       	eor	r25, r24
    1764:	82 2b       	or	r24, r18
    1766:	8c 93       	st	X, r24
    1768:	80 e0       	ldi	r24, 0x00	; 0
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	a0 e8       	ldi	r26, 0x80	; 128
    176e:	bf e3       	ldi	r27, 0x3F	; 63
    1770:	89 8f       	std	Y+25, r24	; 0x19
    1772:	9a 8f       	std	Y+26, r25	; 0x1a
    1774:	ab 8f       	std	Y+27, r26	; 0x1b
    1776:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1778:	69 8d       	ldd	r22, Y+25	; 0x19
    177a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    177c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    177e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1780:	20 e0       	ldi	r18, 0x00	; 0
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	4a ef       	ldi	r20, 0xFA	; 250
    1786:	54 e4       	ldi	r21, 0x44	; 68
    1788:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    178c:	dc 01       	movw	r26, r24
    178e:	cb 01       	movw	r24, r22
    1790:	8d 8b       	std	Y+21, r24	; 0x15
    1792:	9e 8b       	std	Y+22, r25	; 0x16
    1794:	af 8b       	std	Y+23, r26	; 0x17
    1796:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1798:	6d 89       	ldd	r22, Y+21	; 0x15
    179a:	7e 89       	ldd	r23, Y+22	; 0x16
    179c:	8f 89       	ldd	r24, Y+23	; 0x17
    179e:	98 8d       	ldd	r25, Y+24	; 0x18
    17a0:	20 e0       	ldi	r18, 0x00	; 0
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	40 e8       	ldi	r20, 0x80	; 128
    17a6:	5f e3       	ldi	r21, 0x3F	; 63
    17a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17ac:	88 23       	and	r24, r24
    17ae:	2c f4       	brge	.+10     	; 0x17ba <LCD_sendCommand+0x69e>
		__ticks = 1;
    17b0:	81 e0       	ldi	r24, 0x01	; 1
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	9c 8b       	std	Y+20, r25	; 0x14
    17b6:	8b 8b       	std	Y+19, r24	; 0x13
    17b8:	3f c0       	rjmp	.+126    	; 0x1838 <LCD_sendCommand+0x71c>
	else if (__tmp > 65535)
    17ba:	6d 89       	ldd	r22, Y+21	; 0x15
    17bc:	7e 89       	ldd	r23, Y+22	; 0x16
    17be:	8f 89       	ldd	r24, Y+23	; 0x17
    17c0:	98 8d       	ldd	r25, Y+24	; 0x18
    17c2:	20 e0       	ldi	r18, 0x00	; 0
    17c4:	3f ef       	ldi	r19, 0xFF	; 255
    17c6:	4f e7       	ldi	r20, 0x7F	; 127
    17c8:	57 e4       	ldi	r21, 0x47	; 71
    17ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17ce:	18 16       	cp	r1, r24
    17d0:	4c f5       	brge	.+82     	; 0x1824 <LCD_sendCommand+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17d2:	69 8d       	ldd	r22, Y+25	; 0x19
    17d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17da:	20 e0       	ldi	r18, 0x00	; 0
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	40 e2       	ldi	r20, 0x20	; 32
    17e0:	51 e4       	ldi	r21, 0x41	; 65
    17e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17e6:	dc 01       	movw	r26, r24
    17e8:	cb 01       	movw	r24, r22
    17ea:	bc 01       	movw	r22, r24
    17ec:	cd 01       	movw	r24, r26
    17ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17f2:	dc 01       	movw	r26, r24
    17f4:	cb 01       	movw	r24, r22
    17f6:	9c 8b       	std	Y+20, r25	; 0x14
    17f8:	8b 8b       	std	Y+19, r24	; 0x13
    17fa:	0f c0       	rjmp	.+30     	; 0x181a <LCD_sendCommand+0x6fe>
    17fc:	88 ec       	ldi	r24, 0xC8	; 200
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	9a 8b       	std	Y+18, r25	; 0x12
    1802:	89 8b       	std	Y+17, r24	; 0x11
    1804:	89 89       	ldd	r24, Y+17	; 0x11
    1806:	9a 89       	ldd	r25, Y+18	; 0x12
    1808:	01 97       	sbiw	r24, 0x01	; 1
    180a:	f1 f7       	brne	.-4      	; 0x1808 <LCD_sendCommand+0x6ec>
    180c:	9a 8b       	std	Y+18, r25	; 0x12
    180e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1810:	8b 89       	ldd	r24, Y+19	; 0x13
    1812:	9c 89       	ldd	r25, Y+20	; 0x14
    1814:	01 97       	sbiw	r24, 0x01	; 1
    1816:	9c 8b       	std	Y+20, r25	; 0x14
    1818:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    181a:	8b 89       	ldd	r24, Y+19	; 0x13
    181c:	9c 89       	ldd	r25, Y+20	; 0x14
    181e:	00 97       	sbiw	r24, 0x00	; 0
    1820:	69 f7       	brne	.-38     	; 0x17fc <LCD_sendCommand+0x6e0>
    1822:	14 c0       	rjmp	.+40     	; 0x184c <LCD_sendCommand+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1824:	6d 89       	ldd	r22, Y+21	; 0x15
    1826:	7e 89       	ldd	r23, Y+22	; 0x16
    1828:	8f 89       	ldd	r24, Y+23	; 0x17
    182a:	98 8d       	ldd	r25, Y+24	; 0x18
    182c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1830:	dc 01       	movw	r26, r24
    1832:	cb 01       	movw	r24, r22
    1834:	9c 8b       	std	Y+20, r25	; 0x14
    1836:	8b 8b       	std	Y+19, r24	; 0x13
    1838:	8b 89       	ldd	r24, Y+19	; 0x13
    183a:	9c 89       	ldd	r25, Y+20	; 0x14
    183c:	98 8b       	std	Y+16, r25	; 0x10
    183e:	8f 87       	std	Y+15, r24	; 0x0f
    1840:	8f 85       	ldd	r24, Y+15	; 0x0f
    1842:	98 89       	ldd	r25, Y+16	; 0x10
    1844:	01 97       	sbiw	r24, 0x01	; 1
    1846:	f1 f7       	brne	.-4      	; 0x1844 <LCD_sendCommand+0x728>
    1848:	98 8b       	std	Y+16, r25	; 0x10
    184a:	8f 87       	std	Y+15, r24	; 0x0f
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (command & 0x0F);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	Clear_Bit(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    184c:	ab e3       	ldi	r26, 0x3B	; 59
    184e:	b0 e0       	ldi	r27, 0x00	; 0
    1850:	eb e3       	ldi	r30, 0x3B	; 59
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	80 81       	ld	r24, Z
    1856:	87 7f       	andi	r24, 0xF7	; 247
    1858:	8c 93       	st	X, r24
    185a:	80 e0       	ldi	r24, 0x00	; 0
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	a0 e8       	ldi	r26, 0x80	; 128
    1860:	bf e3       	ldi	r27, 0x3F	; 63
    1862:	8b 87       	std	Y+11, r24	; 0x0b
    1864:	9c 87       	std	Y+12, r25	; 0x0c
    1866:	ad 87       	std	Y+13, r26	; 0x0d
    1868:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    186a:	6b 85       	ldd	r22, Y+11	; 0x0b
    186c:	7c 85       	ldd	r23, Y+12	; 0x0c
    186e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1870:	9e 85       	ldd	r25, Y+14	; 0x0e
    1872:	20 e0       	ldi	r18, 0x00	; 0
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	4a ef       	ldi	r20, 0xFA	; 250
    1878:	54 e4       	ldi	r21, 0x44	; 68
    187a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    187e:	dc 01       	movw	r26, r24
    1880:	cb 01       	movw	r24, r22
    1882:	8f 83       	std	Y+7, r24	; 0x07
    1884:	98 87       	std	Y+8, r25	; 0x08
    1886:	a9 87       	std	Y+9, r26	; 0x09
    1888:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    188a:	6f 81       	ldd	r22, Y+7	; 0x07
    188c:	78 85       	ldd	r23, Y+8	; 0x08
    188e:	89 85       	ldd	r24, Y+9	; 0x09
    1890:	9a 85       	ldd	r25, Y+10	; 0x0a
    1892:	20 e0       	ldi	r18, 0x00	; 0
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	40 e8       	ldi	r20, 0x80	; 128
    1898:	5f e3       	ldi	r21, 0x3F	; 63
    189a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    189e:	88 23       	and	r24, r24
    18a0:	2c f4       	brge	.+10     	; 0x18ac <LCD_sendCommand+0x790>
		__ticks = 1;
    18a2:	81 e0       	ldi	r24, 0x01	; 1
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	9e 83       	std	Y+6, r25	; 0x06
    18a8:	8d 83       	std	Y+5, r24	; 0x05
    18aa:	3f c0       	rjmp	.+126    	; 0x192a <LCD_sendCommand+0x80e>
	else if (__tmp > 65535)
    18ac:	6f 81       	ldd	r22, Y+7	; 0x07
    18ae:	78 85       	ldd	r23, Y+8	; 0x08
    18b0:	89 85       	ldd	r24, Y+9	; 0x09
    18b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    18b4:	20 e0       	ldi	r18, 0x00	; 0
    18b6:	3f ef       	ldi	r19, 0xFF	; 255
    18b8:	4f e7       	ldi	r20, 0x7F	; 127
    18ba:	57 e4       	ldi	r21, 0x47	; 71
    18bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18c0:	18 16       	cp	r1, r24
    18c2:	4c f5       	brge	.+82     	; 0x1916 <LCD_sendCommand+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    18c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    18c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    18ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    18cc:	20 e0       	ldi	r18, 0x00	; 0
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	40 e2       	ldi	r20, 0x20	; 32
    18d2:	51 e4       	ldi	r21, 0x41	; 65
    18d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18d8:	dc 01       	movw	r26, r24
    18da:	cb 01       	movw	r24, r22
    18dc:	bc 01       	movw	r22, r24
    18de:	cd 01       	movw	r24, r26
    18e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18e4:	dc 01       	movw	r26, r24
    18e6:	cb 01       	movw	r24, r22
    18e8:	9e 83       	std	Y+6, r25	; 0x06
    18ea:	8d 83       	std	Y+5, r24	; 0x05
    18ec:	0f c0       	rjmp	.+30     	; 0x190c <LCD_sendCommand+0x7f0>
    18ee:	88 ec       	ldi	r24, 0xC8	; 200
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	9c 83       	std	Y+4, r25	; 0x04
    18f4:	8b 83       	std	Y+3, r24	; 0x03
    18f6:	8b 81       	ldd	r24, Y+3	; 0x03
    18f8:	9c 81       	ldd	r25, Y+4	; 0x04
    18fa:	01 97       	sbiw	r24, 0x01	; 1
    18fc:	f1 f7       	brne	.-4      	; 0x18fa <LCD_sendCommand+0x7de>
    18fe:	9c 83       	std	Y+4, r25	; 0x04
    1900:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1902:	8d 81       	ldd	r24, Y+5	; 0x05
    1904:	9e 81       	ldd	r25, Y+6	; 0x06
    1906:	01 97       	sbiw	r24, 0x01	; 1
    1908:	9e 83       	std	Y+6, r25	; 0x06
    190a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    190c:	8d 81       	ldd	r24, Y+5	; 0x05
    190e:	9e 81       	ldd	r25, Y+6	; 0x06
    1910:	00 97       	sbiw	r24, 0x00	; 0
    1912:	69 f7       	brne	.-38     	; 0x18ee <LCD_sendCommand+0x7d2>
    1914:	14 c0       	rjmp	.+40     	; 0x193e <LCD_sendCommand+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1916:	6f 81       	ldd	r22, Y+7	; 0x07
    1918:	78 85       	ldd	r23, Y+8	; 0x08
    191a:	89 85       	ldd	r24, Y+9	; 0x09
    191c:	9a 85       	ldd	r25, Y+10	; 0x0a
    191e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1922:	dc 01       	movw	r26, r24
    1924:	cb 01       	movw	r24, r22
    1926:	9e 83       	std	Y+6, r25	; 0x06
    1928:	8d 83       	std	Y+5, r24	; 0x05
    192a:	8d 81       	ldd	r24, Y+5	; 0x05
    192c:	9e 81       	ldd	r25, Y+6	; 0x06
    192e:	9a 83       	std	Y+2, r25	; 0x02
    1930:	89 83       	std	Y+1, r24	; 0x01
    1932:	89 81       	ldd	r24, Y+1	; 0x01
    1934:	9a 81       	ldd	r25, Y+2	; 0x02
    1936:	01 97       	sbiw	r24, 0x01	; 1
    1938:	f1 f7       	brne	.-4      	; 0x1936 <LCD_sendCommand+0x81a>
    193a:	9a 83       	std	Y+2, r25	; 0x02
    193c:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	Clear_Bit(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    193e:	cd 59       	subi	r28, 0x9D	; 157
    1940:	df 4f       	sbci	r29, 0xFF	; 255
    1942:	0f b6       	in	r0, 0x3f	; 63
    1944:	f8 94       	cli
    1946:	de bf       	out	0x3e, r29	; 62
    1948:	0f be       	out	0x3f, r0	; 63
    194a:	cd bf       	out	0x3d, r28	; 61
    194c:	cf 91       	pop	r28
    194e:	df 91       	pop	r29
    1950:	1f 91       	pop	r17
    1952:	0f 91       	pop	r16
    1954:	08 95       	ret

00001956 <LCD_displayCharacter>:
 * OUTPUTS 		 : void
 *
 * Return		 : void
 **************************************************************************/
void LCD_displayCharacter(uint8 data)
{
    1956:	0f 93       	push	r16
    1958:	1f 93       	push	r17
    195a:	df 93       	push	r29
    195c:	cf 93       	push	r28
    195e:	cd b7       	in	r28, 0x3d	; 61
    1960:	de b7       	in	r29, 0x3e	; 62
    1962:	c3 56       	subi	r28, 0x63	; 99
    1964:	d0 40       	sbci	r29, 0x00	; 0
    1966:	0f b6       	in	r0, 0x3f	; 63
    1968:	f8 94       	cli
    196a:	de bf       	out	0x3e, r29	; 62
    196c:	0f be       	out	0x3f, r0	; 63
    196e:	cd bf       	out	0x3d, r28	; 61
    1970:	fe 01       	movw	r30, r28
    1972:	ed 59       	subi	r30, 0x9D	; 157
    1974:	ff 4f       	sbci	r31, 0xFF	; 255
    1976:	80 83       	st	Z, r24
	Set_Bit(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    1978:	ab e3       	ldi	r26, 0x3B	; 59
    197a:	b0 e0       	ldi	r27, 0x00	; 0
    197c:	eb e3       	ldi	r30, 0x3B	; 59
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	80 81       	ld	r24, Z
    1982:	82 60       	ori	r24, 0x02	; 2
    1984:	8c 93       	st	X, r24
	Clear_Bit(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1986:	ab e3       	ldi	r26, 0x3B	; 59
    1988:	b0 e0       	ldi	r27, 0x00	; 0
    198a:	eb e3       	ldi	r30, 0x3B	; 59
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	80 81       	ld	r24, Z
    1990:	8b 7f       	andi	r24, 0xFB	; 251
    1992:	8c 93       	st	X, r24
    1994:	fe 01       	movw	r30, r28
    1996:	e1 5a       	subi	r30, 0xA1	; 161
    1998:	ff 4f       	sbci	r31, 0xFF	; 255
    199a:	80 e0       	ldi	r24, 0x00	; 0
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	a0 e8       	ldi	r26, 0x80	; 128
    19a0:	bf e3       	ldi	r27, 0x3F	; 63
    19a2:	80 83       	st	Z, r24
    19a4:	91 83       	std	Z+1, r25	; 0x01
    19a6:	a2 83       	std	Z+2, r26	; 0x02
    19a8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19aa:	8e 01       	movw	r16, r28
    19ac:	05 5a       	subi	r16, 0xA5	; 165
    19ae:	1f 4f       	sbci	r17, 0xFF	; 255
    19b0:	fe 01       	movw	r30, r28
    19b2:	e1 5a       	subi	r30, 0xA1	; 161
    19b4:	ff 4f       	sbci	r31, 0xFF	; 255
    19b6:	60 81       	ld	r22, Z
    19b8:	71 81       	ldd	r23, Z+1	; 0x01
    19ba:	82 81       	ldd	r24, Z+2	; 0x02
    19bc:	93 81       	ldd	r25, Z+3	; 0x03
    19be:	20 e0       	ldi	r18, 0x00	; 0
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	4a ef       	ldi	r20, 0xFA	; 250
    19c4:	54 e4       	ldi	r21, 0x44	; 68
    19c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ca:	dc 01       	movw	r26, r24
    19cc:	cb 01       	movw	r24, r22
    19ce:	f8 01       	movw	r30, r16
    19d0:	80 83       	st	Z, r24
    19d2:	91 83       	std	Z+1, r25	; 0x01
    19d4:	a2 83       	std	Z+2, r26	; 0x02
    19d6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19d8:	fe 01       	movw	r30, r28
    19da:	e5 5a       	subi	r30, 0xA5	; 165
    19dc:	ff 4f       	sbci	r31, 0xFF	; 255
    19de:	60 81       	ld	r22, Z
    19e0:	71 81       	ldd	r23, Z+1	; 0x01
    19e2:	82 81       	ldd	r24, Z+2	; 0x02
    19e4:	93 81       	ldd	r25, Z+3	; 0x03
    19e6:	20 e0       	ldi	r18, 0x00	; 0
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	40 e8       	ldi	r20, 0x80	; 128
    19ec:	5f e3       	ldi	r21, 0x3F	; 63
    19ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19f2:	88 23       	and	r24, r24
    19f4:	44 f4       	brge	.+16     	; 0x1a06 <LCD_displayCharacter+0xb0>
		__ticks = 1;
    19f6:	fe 01       	movw	r30, r28
    19f8:	e7 5a       	subi	r30, 0xA7	; 167
    19fa:	ff 4f       	sbci	r31, 0xFF	; 255
    19fc:	81 e0       	ldi	r24, 0x01	; 1
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	91 83       	std	Z+1, r25	; 0x01
    1a02:	80 83       	st	Z, r24
    1a04:	64 c0       	rjmp	.+200    	; 0x1ace <LCD_displayCharacter+0x178>
	else if (__tmp > 65535)
    1a06:	fe 01       	movw	r30, r28
    1a08:	e5 5a       	subi	r30, 0xA5	; 165
    1a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0c:	60 81       	ld	r22, Z
    1a0e:	71 81       	ldd	r23, Z+1	; 0x01
    1a10:	82 81       	ldd	r24, Z+2	; 0x02
    1a12:	93 81       	ldd	r25, Z+3	; 0x03
    1a14:	20 e0       	ldi	r18, 0x00	; 0
    1a16:	3f ef       	ldi	r19, 0xFF	; 255
    1a18:	4f e7       	ldi	r20, 0x7F	; 127
    1a1a:	57 e4       	ldi	r21, 0x47	; 71
    1a1c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a20:	18 16       	cp	r1, r24
    1a22:	0c f0       	brlt	.+2      	; 0x1a26 <LCD_displayCharacter+0xd0>
    1a24:	43 c0       	rjmp	.+134    	; 0x1aac <LCD_displayCharacter+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a26:	fe 01       	movw	r30, r28
    1a28:	e1 5a       	subi	r30, 0xA1	; 161
    1a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2c:	60 81       	ld	r22, Z
    1a2e:	71 81       	ldd	r23, Z+1	; 0x01
    1a30:	82 81       	ldd	r24, Z+2	; 0x02
    1a32:	93 81       	ldd	r25, Z+3	; 0x03
    1a34:	20 e0       	ldi	r18, 0x00	; 0
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	40 e2       	ldi	r20, 0x20	; 32
    1a3a:	51 e4       	ldi	r21, 0x41	; 65
    1a3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a40:	dc 01       	movw	r26, r24
    1a42:	cb 01       	movw	r24, r22
    1a44:	8e 01       	movw	r16, r28
    1a46:	07 5a       	subi	r16, 0xA7	; 167
    1a48:	1f 4f       	sbci	r17, 0xFF	; 255
    1a4a:	bc 01       	movw	r22, r24
    1a4c:	cd 01       	movw	r24, r26
    1a4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a52:	dc 01       	movw	r26, r24
    1a54:	cb 01       	movw	r24, r22
    1a56:	f8 01       	movw	r30, r16
    1a58:	91 83       	std	Z+1, r25	; 0x01
    1a5a:	80 83       	st	Z, r24
    1a5c:	1f c0       	rjmp	.+62     	; 0x1a9c <LCD_displayCharacter+0x146>
    1a5e:	fe 01       	movw	r30, r28
    1a60:	e9 5a       	subi	r30, 0xA9	; 169
    1a62:	ff 4f       	sbci	r31, 0xFF	; 255
    1a64:	88 ec       	ldi	r24, 0xC8	; 200
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	91 83       	std	Z+1, r25	; 0x01
    1a6a:	80 83       	st	Z, r24
    1a6c:	fe 01       	movw	r30, r28
    1a6e:	e9 5a       	subi	r30, 0xA9	; 169
    1a70:	ff 4f       	sbci	r31, 0xFF	; 255
    1a72:	80 81       	ld	r24, Z
    1a74:	91 81       	ldd	r25, Z+1	; 0x01
    1a76:	01 97       	sbiw	r24, 0x01	; 1
    1a78:	f1 f7       	brne	.-4      	; 0x1a76 <LCD_displayCharacter+0x120>
    1a7a:	fe 01       	movw	r30, r28
    1a7c:	e9 5a       	subi	r30, 0xA9	; 169
    1a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a80:	91 83       	std	Z+1, r25	; 0x01
    1a82:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a84:	de 01       	movw	r26, r28
    1a86:	a7 5a       	subi	r26, 0xA7	; 167
    1a88:	bf 4f       	sbci	r27, 0xFF	; 255
    1a8a:	fe 01       	movw	r30, r28
    1a8c:	e7 5a       	subi	r30, 0xA7	; 167
    1a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a90:	80 81       	ld	r24, Z
    1a92:	91 81       	ldd	r25, Z+1	; 0x01
    1a94:	01 97       	sbiw	r24, 0x01	; 1
    1a96:	11 96       	adiw	r26, 0x01	; 1
    1a98:	9c 93       	st	X, r25
    1a9a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a9c:	fe 01       	movw	r30, r28
    1a9e:	e7 5a       	subi	r30, 0xA7	; 167
    1aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa2:	80 81       	ld	r24, Z
    1aa4:	91 81       	ldd	r25, Z+1	; 0x01
    1aa6:	00 97       	sbiw	r24, 0x00	; 0
    1aa8:	d1 f6       	brne	.-76     	; 0x1a5e <LCD_displayCharacter+0x108>
    1aaa:	27 c0       	rjmp	.+78     	; 0x1afa <LCD_displayCharacter+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aac:	8e 01       	movw	r16, r28
    1aae:	07 5a       	subi	r16, 0xA7	; 167
    1ab0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ab2:	fe 01       	movw	r30, r28
    1ab4:	e5 5a       	subi	r30, 0xA5	; 165
    1ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab8:	60 81       	ld	r22, Z
    1aba:	71 81       	ldd	r23, Z+1	; 0x01
    1abc:	82 81       	ldd	r24, Z+2	; 0x02
    1abe:	93 81       	ldd	r25, Z+3	; 0x03
    1ac0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ac4:	dc 01       	movw	r26, r24
    1ac6:	cb 01       	movw	r24, r22
    1ac8:	f8 01       	movw	r30, r16
    1aca:	91 83       	std	Z+1, r25	; 0x01
    1acc:	80 83       	st	Z, r24
    1ace:	de 01       	movw	r26, r28
    1ad0:	ab 5a       	subi	r26, 0xAB	; 171
    1ad2:	bf 4f       	sbci	r27, 0xFF	; 255
    1ad4:	fe 01       	movw	r30, r28
    1ad6:	e7 5a       	subi	r30, 0xA7	; 167
    1ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ada:	80 81       	ld	r24, Z
    1adc:	91 81       	ldd	r25, Z+1	; 0x01
    1ade:	8d 93       	st	X+, r24
    1ae0:	9c 93       	st	X, r25
    1ae2:	fe 01       	movw	r30, r28
    1ae4:	eb 5a       	subi	r30, 0xAB	; 171
    1ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae8:	80 81       	ld	r24, Z
    1aea:	91 81       	ldd	r25, Z+1	; 0x01
    1aec:	01 97       	sbiw	r24, 0x01	; 1
    1aee:	f1 f7       	brne	.-4      	; 0x1aec <LCD_displayCharacter+0x196>
    1af0:	fe 01       	movw	r30, r28
    1af2:	eb 5a       	subi	r30, 0xAB	; 171
    1af4:	ff 4f       	sbci	r31, 0xFF	; 255
    1af6:	91 83       	std	Z+1, r25	; 0x01
    1af8:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	Set_Bit(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1afa:	ab e3       	ldi	r26, 0x3B	; 59
    1afc:	b0 e0       	ldi	r27, 0x00	; 0
    1afe:	eb e3       	ldi	r30, 0x3B	; 59
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	80 81       	ld	r24, Z
    1b04:	88 60       	ori	r24, 0x08	; 8
    1b06:	8c 93       	st	X, r24
    1b08:	fe 01       	movw	r30, r28
    1b0a:	ef 5a       	subi	r30, 0xAF	; 175
    1b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0e:	80 e0       	ldi	r24, 0x00	; 0
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	a0 e8       	ldi	r26, 0x80	; 128
    1b14:	bf e3       	ldi	r27, 0x3F	; 63
    1b16:	80 83       	st	Z, r24
    1b18:	91 83       	std	Z+1, r25	; 0x01
    1b1a:	a2 83       	std	Z+2, r26	; 0x02
    1b1c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b1e:	8e 01       	movw	r16, r28
    1b20:	03 5b       	subi	r16, 0xB3	; 179
    1b22:	1f 4f       	sbci	r17, 0xFF	; 255
    1b24:	fe 01       	movw	r30, r28
    1b26:	ef 5a       	subi	r30, 0xAF	; 175
    1b28:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2a:	60 81       	ld	r22, Z
    1b2c:	71 81       	ldd	r23, Z+1	; 0x01
    1b2e:	82 81       	ldd	r24, Z+2	; 0x02
    1b30:	93 81       	ldd	r25, Z+3	; 0x03
    1b32:	20 e0       	ldi	r18, 0x00	; 0
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	4a ef       	ldi	r20, 0xFA	; 250
    1b38:	54 e4       	ldi	r21, 0x44	; 68
    1b3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b3e:	dc 01       	movw	r26, r24
    1b40:	cb 01       	movw	r24, r22
    1b42:	f8 01       	movw	r30, r16
    1b44:	80 83       	st	Z, r24
    1b46:	91 83       	std	Z+1, r25	; 0x01
    1b48:	a2 83       	std	Z+2, r26	; 0x02
    1b4a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b4c:	fe 01       	movw	r30, r28
    1b4e:	e3 5b       	subi	r30, 0xB3	; 179
    1b50:	ff 4f       	sbci	r31, 0xFF	; 255
    1b52:	60 81       	ld	r22, Z
    1b54:	71 81       	ldd	r23, Z+1	; 0x01
    1b56:	82 81       	ldd	r24, Z+2	; 0x02
    1b58:	93 81       	ldd	r25, Z+3	; 0x03
    1b5a:	20 e0       	ldi	r18, 0x00	; 0
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	40 e8       	ldi	r20, 0x80	; 128
    1b60:	5f e3       	ldi	r21, 0x3F	; 63
    1b62:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b66:	88 23       	and	r24, r24
    1b68:	44 f4       	brge	.+16     	; 0x1b7a <LCD_displayCharacter+0x224>
		__ticks = 1;
    1b6a:	fe 01       	movw	r30, r28
    1b6c:	e5 5b       	subi	r30, 0xB5	; 181
    1b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	91 83       	std	Z+1, r25	; 0x01
    1b76:	80 83       	st	Z, r24
    1b78:	64 c0       	rjmp	.+200    	; 0x1c42 <LCD_displayCharacter+0x2ec>
	else if (__tmp > 65535)
    1b7a:	fe 01       	movw	r30, r28
    1b7c:	e3 5b       	subi	r30, 0xB3	; 179
    1b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b80:	60 81       	ld	r22, Z
    1b82:	71 81       	ldd	r23, Z+1	; 0x01
    1b84:	82 81       	ldd	r24, Z+2	; 0x02
    1b86:	93 81       	ldd	r25, Z+3	; 0x03
    1b88:	20 e0       	ldi	r18, 0x00	; 0
    1b8a:	3f ef       	ldi	r19, 0xFF	; 255
    1b8c:	4f e7       	ldi	r20, 0x7F	; 127
    1b8e:	57 e4       	ldi	r21, 0x47	; 71
    1b90:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b94:	18 16       	cp	r1, r24
    1b96:	0c f0       	brlt	.+2      	; 0x1b9a <LCD_displayCharacter+0x244>
    1b98:	43 c0       	rjmp	.+134    	; 0x1c20 <LCD_displayCharacter+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b9a:	fe 01       	movw	r30, r28
    1b9c:	ef 5a       	subi	r30, 0xAF	; 175
    1b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba0:	60 81       	ld	r22, Z
    1ba2:	71 81       	ldd	r23, Z+1	; 0x01
    1ba4:	82 81       	ldd	r24, Z+2	; 0x02
    1ba6:	93 81       	ldd	r25, Z+3	; 0x03
    1ba8:	20 e0       	ldi	r18, 0x00	; 0
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	40 e2       	ldi	r20, 0x20	; 32
    1bae:	51 e4       	ldi	r21, 0x41	; 65
    1bb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bb4:	dc 01       	movw	r26, r24
    1bb6:	cb 01       	movw	r24, r22
    1bb8:	8e 01       	movw	r16, r28
    1bba:	05 5b       	subi	r16, 0xB5	; 181
    1bbc:	1f 4f       	sbci	r17, 0xFF	; 255
    1bbe:	bc 01       	movw	r22, r24
    1bc0:	cd 01       	movw	r24, r26
    1bc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bc6:	dc 01       	movw	r26, r24
    1bc8:	cb 01       	movw	r24, r22
    1bca:	f8 01       	movw	r30, r16
    1bcc:	91 83       	std	Z+1, r25	; 0x01
    1bce:	80 83       	st	Z, r24
    1bd0:	1f c0       	rjmp	.+62     	; 0x1c10 <LCD_displayCharacter+0x2ba>
    1bd2:	fe 01       	movw	r30, r28
    1bd4:	e7 5b       	subi	r30, 0xB7	; 183
    1bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd8:	88 ec       	ldi	r24, 0xC8	; 200
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	91 83       	std	Z+1, r25	; 0x01
    1bde:	80 83       	st	Z, r24
    1be0:	fe 01       	movw	r30, r28
    1be2:	e7 5b       	subi	r30, 0xB7	; 183
    1be4:	ff 4f       	sbci	r31, 0xFF	; 255
    1be6:	80 81       	ld	r24, Z
    1be8:	91 81       	ldd	r25, Z+1	; 0x01
    1bea:	01 97       	sbiw	r24, 0x01	; 1
    1bec:	f1 f7       	brne	.-4      	; 0x1bea <LCD_displayCharacter+0x294>
    1bee:	fe 01       	movw	r30, r28
    1bf0:	e7 5b       	subi	r30, 0xB7	; 183
    1bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf4:	91 83       	std	Z+1, r25	; 0x01
    1bf6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bf8:	de 01       	movw	r26, r28
    1bfa:	a5 5b       	subi	r26, 0xB5	; 181
    1bfc:	bf 4f       	sbci	r27, 0xFF	; 255
    1bfe:	fe 01       	movw	r30, r28
    1c00:	e5 5b       	subi	r30, 0xB5	; 181
    1c02:	ff 4f       	sbci	r31, 0xFF	; 255
    1c04:	80 81       	ld	r24, Z
    1c06:	91 81       	ldd	r25, Z+1	; 0x01
    1c08:	01 97       	sbiw	r24, 0x01	; 1
    1c0a:	11 96       	adiw	r26, 0x01	; 1
    1c0c:	9c 93       	st	X, r25
    1c0e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c10:	fe 01       	movw	r30, r28
    1c12:	e5 5b       	subi	r30, 0xB5	; 181
    1c14:	ff 4f       	sbci	r31, 0xFF	; 255
    1c16:	80 81       	ld	r24, Z
    1c18:	91 81       	ldd	r25, Z+1	; 0x01
    1c1a:	00 97       	sbiw	r24, 0x00	; 0
    1c1c:	d1 f6       	brne	.-76     	; 0x1bd2 <LCD_displayCharacter+0x27c>
    1c1e:	27 c0       	rjmp	.+78     	; 0x1c6e <LCD_displayCharacter+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c20:	8e 01       	movw	r16, r28
    1c22:	05 5b       	subi	r16, 0xB5	; 181
    1c24:	1f 4f       	sbci	r17, 0xFF	; 255
    1c26:	fe 01       	movw	r30, r28
    1c28:	e3 5b       	subi	r30, 0xB3	; 179
    1c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2c:	60 81       	ld	r22, Z
    1c2e:	71 81       	ldd	r23, Z+1	; 0x01
    1c30:	82 81       	ldd	r24, Z+2	; 0x02
    1c32:	93 81       	ldd	r25, Z+3	; 0x03
    1c34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c38:	dc 01       	movw	r26, r24
    1c3a:	cb 01       	movw	r24, r22
    1c3c:	f8 01       	movw	r30, r16
    1c3e:	91 83       	std	Z+1, r25	; 0x01
    1c40:	80 83       	st	Z, r24
    1c42:	de 01       	movw	r26, r28
    1c44:	a9 5b       	subi	r26, 0xB9	; 185
    1c46:	bf 4f       	sbci	r27, 0xFF	; 255
    1c48:	fe 01       	movw	r30, r28
    1c4a:	e5 5b       	subi	r30, 0xB5	; 181
    1c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4e:	80 81       	ld	r24, Z
    1c50:	91 81       	ldd	r25, Z+1	; 0x01
    1c52:	8d 93       	st	X+, r24
    1c54:	9c 93       	st	X, r25
    1c56:	fe 01       	movw	r30, r28
    1c58:	e9 5b       	subi	r30, 0xB9	; 185
    1c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5c:	80 81       	ld	r24, Z
    1c5e:	91 81       	ldd	r25, Z+1	; 0x01
    1c60:	01 97       	sbiw	r24, 0x01	; 1
    1c62:	f1 f7       	brne	.-4      	; 0x1c60 <LCD_displayCharacter+0x30a>
    1c64:	fe 01       	movw	r30, r28
    1c66:	e9 5b       	subi	r30, 0xB9	; 185
    1c68:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6a:	91 83       	std	Z+1, r25	; 0x01
    1c6c:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (data & 0xF0);
    1c6e:	ab e3       	ldi	r26, 0x3B	; 59
    1c70:	b0 e0       	ldi	r27, 0x00	; 0
    1c72:	eb e3       	ldi	r30, 0x3B	; 59
    1c74:	f0 e0       	ldi	r31, 0x00	; 0
    1c76:	80 81       	ld	r24, Z
    1c78:	98 2f       	mov	r25, r24
    1c7a:	9f 70       	andi	r25, 0x0F	; 15
    1c7c:	fe 01       	movw	r30, r28
    1c7e:	ed 59       	subi	r30, 0x9D	; 157
    1c80:	ff 4f       	sbci	r31, 0xFF	; 255
    1c82:	80 81       	ld	r24, Z
    1c84:	80 7f       	andi	r24, 0xF0	; 240
    1c86:	89 2b       	or	r24, r25
    1c88:	8c 93       	st	X, r24
    1c8a:	fe 01       	movw	r30, r28
    1c8c:	ed 5b       	subi	r30, 0xBD	; 189
    1c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c90:	80 e0       	ldi	r24, 0x00	; 0
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	a0 e8       	ldi	r26, 0x80	; 128
    1c96:	bf e3       	ldi	r27, 0x3F	; 63
    1c98:	80 83       	st	Z, r24
    1c9a:	91 83       	std	Z+1, r25	; 0x01
    1c9c:	a2 83       	std	Z+2, r26	; 0x02
    1c9e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ca0:	8e 01       	movw	r16, r28
    1ca2:	01 5c       	subi	r16, 0xC1	; 193
    1ca4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ca6:	fe 01       	movw	r30, r28
    1ca8:	ed 5b       	subi	r30, 0xBD	; 189
    1caa:	ff 4f       	sbci	r31, 0xFF	; 255
    1cac:	60 81       	ld	r22, Z
    1cae:	71 81       	ldd	r23, Z+1	; 0x01
    1cb0:	82 81       	ldd	r24, Z+2	; 0x02
    1cb2:	93 81       	ldd	r25, Z+3	; 0x03
    1cb4:	20 e0       	ldi	r18, 0x00	; 0
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	4a ef       	ldi	r20, 0xFA	; 250
    1cba:	54 e4       	ldi	r21, 0x44	; 68
    1cbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cc0:	dc 01       	movw	r26, r24
    1cc2:	cb 01       	movw	r24, r22
    1cc4:	f8 01       	movw	r30, r16
    1cc6:	80 83       	st	Z, r24
    1cc8:	91 83       	std	Z+1, r25	; 0x01
    1cca:	a2 83       	std	Z+2, r26	; 0x02
    1ccc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1cce:	fe 01       	movw	r30, r28
    1cd0:	ff 96       	adiw	r30, 0x3f	; 63
    1cd2:	60 81       	ld	r22, Z
    1cd4:	71 81       	ldd	r23, Z+1	; 0x01
    1cd6:	82 81       	ldd	r24, Z+2	; 0x02
    1cd8:	93 81       	ldd	r25, Z+3	; 0x03
    1cda:	20 e0       	ldi	r18, 0x00	; 0
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	40 e8       	ldi	r20, 0x80	; 128
    1ce0:	5f e3       	ldi	r21, 0x3F	; 63
    1ce2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ce6:	88 23       	and	r24, r24
    1ce8:	2c f4       	brge	.+10     	; 0x1cf4 <LCD_displayCharacter+0x39e>
		__ticks = 1;
    1cea:	81 e0       	ldi	r24, 0x01	; 1
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	9e af       	std	Y+62, r25	; 0x3e
    1cf0:	8d af       	std	Y+61, r24	; 0x3d
    1cf2:	46 c0       	rjmp	.+140    	; 0x1d80 <LCD_displayCharacter+0x42a>
	else if (__tmp > 65535)
    1cf4:	fe 01       	movw	r30, r28
    1cf6:	ff 96       	adiw	r30, 0x3f	; 63
    1cf8:	60 81       	ld	r22, Z
    1cfa:	71 81       	ldd	r23, Z+1	; 0x01
    1cfc:	82 81       	ldd	r24, Z+2	; 0x02
    1cfe:	93 81       	ldd	r25, Z+3	; 0x03
    1d00:	20 e0       	ldi	r18, 0x00	; 0
    1d02:	3f ef       	ldi	r19, 0xFF	; 255
    1d04:	4f e7       	ldi	r20, 0x7F	; 127
    1d06:	57 e4       	ldi	r21, 0x47	; 71
    1d08:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d0c:	18 16       	cp	r1, r24
    1d0e:	64 f5       	brge	.+88     	; 0x1d68 <LCD_displayCharacter+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d10:	fe 01       	movw	r30, r28
    1d12:	ed 5b       	subi	r30, 0xBD	; 189
    1d14:	ff 4f       	sbci	r31, 0xFF	; 255
    1d16:	60 81       	ld	r22, Z
    1d18:	71 81       	ldd	r23, Z+1	; 0x01
    1d1a:	82 81       	ldd	r24, Z+2	; 0x02
    1d1c:	93 81       	ldd	r25, Z+3	; 0x03
    1d1e:	20 e0       	ldi	r18, 0x00	; 0
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	40 e2       	ldi	r20, 0x20	; 32
    1d24:	51 e4       	ldi	r21, 0x41	; 65
    1d26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d2a:	dc 01       	movw	r26, r24
    1d2c:	cb 01       	movw	r24, r22
    1d2e:	bc 01       	movw	r22, r24
    1d30:	cd 01       	movw	r24, r26
    1d32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d36:	dc 01       	movw	r26, r24
    1d38:	cb 01       	movw	r24, r22
    1d3a:	9e af       	std	Y+62, r25	; 0x3e
    1d3c:	8d af       	std	Y+61, r24	; 0x3d
    1d3e:	0f c0       	rjmp	.+30     	; 0x1d5e <LCD_displayCharacter+0x408>
    1d40:	88 ec       	ldi	r24, 0xC8	; 200
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	9c af       	std	Y+60, r25	; 0x3c
    1d46:	8b af       	std	Y+59, r24	; 0x3b
    1d48:	8b ad       	ldd	r24, Y+59	; 0x3b
    1d4a:	9c ad       	ldd	r25, Y+60	; 0x3c
    1d4c:	01 97       	sbiw	r24, 0x01	; 1
    1d4e:	f1 f7       	brne	.-4      	; 0x1d4c <LCD_displayCharacter+0x3f6>
    1d50:	9c af       	std	Y+60, r25	; 0x3c
    1d52:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d54:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d56:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d58:	01 97       	sbiw	r24, 0x01	; 1
    1d5a:	9e af       	std	Y+62, r25	; 0x3e
    1d5c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d5e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d60:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d62:	00 97       	sbiw	r24, 0x00	; 0
    1d64:	69 f7       	brne	.-38     	; 0x1d40 <LCD_displayCharacter+0x3ea>
    1d66:	16 c0       	rjmp	.+44     	; 0x1d94 <LCD_displayCharacter+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d68:	fe 01       	movw	r30, r28
    1d6a:	ff 96       	adiw	r30, 0x3f	; 63
    1d6c:	60 81       	ld	r22, Z
    1d6e:	71 81       	ldd	r23, Z+1	; 0x01
    1d70:	82 81       	ldd	r24, Z+2	; 0x02
    1d72:	93 81       	ldd	r25, Z+3	; 0x03
    1d74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d78:	dc 01       	movw	r26, r24
    1d7a:	cb 01       	movw	r24, r22
    1d7c:	9e af       	std	Y+62, r25	; 0x3e
    1d7e:	8d af       	std	Y+61, r24	; 0x3d
    1d80:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d82:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d84:	9a af       	std	Y+58, r25	; 0x3a
    1d86:	89 af       	std	Y+57, r24	; 0x39
    1d88:	89 ad       	ldd	r24, Y+57	; 0x39
    1d8a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d8c:	01 97       	sbiw	r24, 0x01	; 1
    1d8e:	f1 f7       	brne	.-4      	; 0x1d8c <LCD_displayCharacter+0x436>
    1d90:	9a af       	std	Y+58, r25	; 0x3a
    1d92:	89 af       	std	Y+57, r24	; 0x39
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((data & 0xF0) >> 4);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	Clear_Bit(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1d94:	ab e3       	ldi	r26, 0x3B	; 59
    1d96:	b0 e0       	ldi	r27, 0x00	; 0
    1d98:	eb e3       	ldi	r30, 0x3B	; 59
    1d9a:	f0 e0       	ldi	r31, 0x00	; 0
    1d9c:	80 81       	ld	r24, Z
    1d9e:	87 7f       	andi	r24, 0xF7	; 247
    1da0:	8c 93       	st	X, r24
    1da2:	80 e0       	ldi	r24, 0x00	; 0
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	a0 e8       	ldi	r26, 0x80	; 128
    1da8:	bf e3       	ldi	r27, 0x3F	; 63
    1daa:	8d ab       	std	Y+53, r24	; 0x35
    1dac:	9e ab       	std	Y+54, r25	; 0x36
    1dae:	af ab       	std	Y+55, r26	; 0x37
    1db0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1db2:	6d a9       	ldd	r22, Y+53	; 0x35
    1db4:	7e a9       	ldd	r23, Y+54	; 0x36
    1db6:	8f a9       	ldd	r24, Y+55	; 0x37
    1db8:	98 ad       	ldd	r25, Y+56	; 0x38
    1dba:	20 e0       	ldi	r18, 0x00	; 0
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	4a ef       	ldi	r20, 0xFA	; 250
    1dc0:	54 e4       	ldi	r21, 0x44	; 68
    1dc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc6:	dc 01       	movw	r26, r24
    1dc8:	cb 01       	movw	r24, r22
    1dca:	89 ab       	std	Y+49, r24	; 0x31
    1dcc:	9a ab       	std	Y+50, r25	; 0x32
    1dce:	ab ab       	std	Y+51, r26	; 0x33
    1dd0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1dd2:	69 a9       	ldd	r22, Y+49	; 0x31
    1dd4:	7a a9       	ldd	r23, Y+50	; 0x32
    1dd6:	8b a9       	ldd	r24, Y+51	; 0x33
    1dd8:	9c a9       	ldd	r25, Y+52	; 0x34
    1dda:	20 e0       	ldi	r18, 0x00	; 0
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	40 e8       	ldi	r20, 0x80	; 128
    1de0:	5f e3       	ldi	r21, 0x3F	; 63
    1de2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1de6:	88 23       	and	r24, r24
    1de8:	2c f4       	brge	.+10     	; 0x1df4 <LCD_displayCharacter+0x49e>
		__ticks = 1;
    1dea:	81 e0       	ldi	r24, 0x01	; 1
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	98 ab       	std	Y+48, r25	; 0x30
    1df0:	8f a7       	std	Y+47, r24	; 0x2f
    1df2:	3f c0       	rjmp	.+126    	; 0x1e72 <LCD_displayCharacter+0x51c>
	else if (__tmp > 65535)
    1df4:	69 a9       	ldd	r22, Y+49	; 0x31
    1df6:	7a a9       	ldd	r23, Y+50	; 0x32
    1df8:	8b a9       	ldd	r24, Y+51	; 0x33
    1dfa:	9c a9       	ldd	r25, Y+52	; 0x34
    1dfc:	20 e0       	ldi	r18, 0x00	; 0
    1dfe:	3f ef       	ldi	r19, 0xFF	; 255
    1e00:	4f e7       	ldi	r20, 0x7F	; 127
    1e02:	57 e4       	ldi	r21, 0x47	; 71
    1e04:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e08:	18 16       	cp	r1, r24
    1e0a:	4c f5       	brge	.+82     	; 0x1e5e <LCD_displayCharacter+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e0c:	6d a9       	ldd	r22, Y+53	; 0x35
    1e0e:	7e a9       	ldd	r23, Y+54	; 0x36
    1e10:	8f a9       	ldd	r24, Y+55	; 0x37
    1e12:	98 ad       	ldd	r25, Y+56	; 0x38
    1e14:	20 e0       	ldi	r18, 0x00	; 0
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	40 e2       	ldi	r20, 0x20	; 32
    1e1a:	51 e4       	ldi	r21, 0x41	; 65
    1e1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e20:	dc 01       	movw	r26, r24
    1e22:	cb 01       	movw	r24, r22
    1e24:	bc 01       	movw	r22, r24
    1e26:	cd 01       	movw	r24, r26
    1e28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e2c:	dc 01       	movw	r26, r24
    1e2e:	cb 01       	movw	r24, r22
    1e30:	98 ab       	std	Y+48, r25	; 0x30
    1e32:	8f a7       	std	Y+47, r24	; 0x2f
    1e34:	0f c0       	rjmp	.+30     	; 0x1e54 <LCD_displayCharacter+0x4fe>
    1e36:	88 ec       	ldi	r24, 0xC8	; 200
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	9e a7       	std	Y+46, r25	; 0x2e
    1e3c:	8d a7       	std	Y+45, r24	; 0x2d
    1e3e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e40:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e42:	01 97       	sbiw	r24, 0x01	; 1
    1e44:	f1 f7       	brne	.-4      	; 0x1e42 <LCD_displayCharacter+0x4ec>
    1e46:	9e a7       	std	Y+46, r25	; 0x2e
    1e48:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e4a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e4c:	98 a9       	ldd	r25, Y+48	; 0x30
    1e4e:	01 97       	sbiw	r24, 0x01	; 1
    1e50:	98 ab       	std	Y+48, r25	; 0x30
    1e52:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e54:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e56:	98 a9       	ldd	r25, Y+48	; 0x30
    1e58:	00 97       	sbiw	r24, 0x00	; 0
    1e5a:	69 f7       	brne	.-38     	; 0x1e36 <LCD_displayCharacter+0x4e0>
    1e5c:	14 c0       	rjmp	.+40     	; 0x1e86 <LCD_displayCharacter+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e5e:	69 a9       	ldd	r22, Y+49	; 0x31
    1e60:	7a a9       	ldd	r23, Y+50	; 0x32
    1e62:	8b a9       	ldd	r24, Y+51	; 0x33
    1e64:	9c a9       	ldd	r25, Y+52	; 0x34
    1e66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e6a:	dc 01       	movw	r26, r24
    1e6c:	cb 01       	movw	r24, r22
    1e6e:	98 ab       	std	Y+48, r25	; 0x30
    1e70:	8f a7       	std	Y+47, r24	; 0x2f
    1e72:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e74:	98 a9       	ldd	r25, Y+48	; 0x30
    1e76:	9c a7       	std	Y+44, r25	; 0x2c
    1e78:	8b a7       	std	Y+43, r24	; 0x2b
    1e7a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e7c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e7e:	01 97       	sbiw	r24, 0x01	; 1
    1e80:	f1 f7       	brne	.-4      	; 0x1e7e <LCD_displayCharacter+0x528>
    1e82:	9c a7       	std	Y+44, r25	; 0x2c
    1e84:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	Set_Bit(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1e86:	ab e3       	ldi	r26, 0x3B	; 59
    1e88:	b0 e0       	ldi	r27, 0x00	; 0
    1e8a:	eb e3       	ldi	r30, 0x3B	; 59
    1e8c:	f0 e0       	ldi	r31, 0x00	; 0
    1e8e:	80 81       	ld	r24, Z
    1e90:	88 60       	ori	r24, 0x08	; 8
    1e92:	8c 93       	st	X, r24
    1e94:	80 e0       	ldi	r24, 0x00	; 0
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	a0 e8       	ldi	r26, 0x80	; 128
    1e9a:	bf e3       	ldi	r27, 0x3F	; 63
    1e9c:	8f a3       	std	Y+39, r24	; 0x27
    1e9e:	98 a7       	std	Y+40, r25	; 0x28
    1ea0:	a9 a7       	std	Y+41, r26	; 0x29
    1ea2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ea4:	6f a1       	ldd	r22, Y+39	; 0x27
    1ea6:	78 a5       	ldd	r23, Y+40	; 0x28
    1ea8:	89 a5       	ldd	r24, Y+41	; 0x29
    1eaa:	9a a5       	ldd	r25, Y+42	; 0x2a
    1eac:	20 e0       	ldi	r18, 0x00	; 0
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	4a ef       	ldi	r20, 0xFA	; 250
    1eb2:	54 e4       	ldi	r21, 0x44	; 68
    1eb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eb8:	dc 01       	movw	r26, r24
    1eba:	cb 01       	movw	r24, r22
    1ebc:	8b a3       	std	Y+35, r24	; 0x23
    1ebe:	9c a3       	std	Y+36, r25	; 0x24
    1ec0:	ad a3       	std	Y+37, r26	; 0x25
    1ec2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ec4:	6b a1       	ldd	r22, Y+35	; 0x23
    1ec6:	7c a1       	ldd	r23, Y+36	; 0x24
    1ec8:	8d a1       	ldd	r24, Y+37	; 0x25
    1eca:	9e a1       	ldd	r25, Y+38	; 0x26
    1ecc:	20 e0       	ldi	r18, 0x00	; 0
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	40 e8       	ldi	r20, 0x80	; 128
    1ed2:	5f e3       	ldi	r21, 0x3F	; 63
    1ed4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ed8:	88 23       	and	r24, r24
    1eda:	2c f4       	brge	.+10     	; 0x1ee6 <LCD_displayCharacter+0x590>
		__ticks = 1;
    1edc:	81 e0       	ldi	r24, 0x01	; 1
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	9a a3       	std	Y+34, r25	; 0x22
    1ee2:	89 a3       	std	Y+33, r24	; 0x21
    1ee4:	3f c0       	rjmp	.+126    	; 0x1f64 <LCD_displayCharacter+0x60e>
	else if (__tmp > 65535)
    1ee6:	6b a1       	ldd	r22, Y+35	; 0x23
    1ee8:	7c a1       	ldd	r23, Y+36	; 0x24
    1eea:	8d a1       	ldd	r24, Y+37	; 0x25
    1eec:	9e a1       	ldd	r25, Y+38	; 0x26
    1eee:	20 e0       	ldi	r18, 0x00	; 0
    1ef0:	3f ef       	ldi	r19, 0xFF	; 255
    1ef2:	4f e7       	ldi	r20, 0x7F	; 127
    1ef4:	57 e4       	ldi	r21, 0x47	; 71
    1ef6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1efa:	18 16       	cp	r1, r24
    1efc:	4c f5       	brge	.+82     	; 0x1f50 <LCD_displayCharacter+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1efe:	6f a1       	ldd	r22, Y+39	; 0x27
    1f00:	78 a5       	ldd	r23, Y+40	; 0x28
    1f02:	89 a5       	ldd	r24, Y+41	; 0x29
    1f04:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f06:	20 e0       	ldi	r18, 0x00	; 0
    1f08:	30 e0       	ldi	r19, 0x00	; 0
    1f0a:	40 e2       	ldi	r20, 0x20	; 32
    1f0c:	51 e4       	ldi	r21, 0x41	; 65
    1f0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f12:	dc 01       	movw	r26, r24
    1f14:	cb 01       	movw	r24, r22
    1f16:	bc 01       	movw	r22, r24
    1f18:	cd 01       	movw	r24, r26
    1f1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f1e:	dc 01       	movw	r26, r24
    1f20:	cb 01       	movw	r24, r22
    1f22:	9a a3       	std	Y+34, r25	; 0x22
    1f24:	89 a3       	std	Y+33, r24	; 0x21
    1f26:	0f c0       	rjmp	.+30     	; 0x1f46 <LCD_displayCharacter+0x5f0>
    1f28:	88 ec       	ldi	r24, 0xC8	; 200
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	98 a3       	std	Y+32, r25	; 0x20
    1f2e:	8f 8f       	std	Y+31, r24	; 0x1f
    1f30:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f32:	98 a1       	ldd	r25, Y+32	; 0x20
    1f34:	01 97       	sbiw	r24, 0x01	; 1
    1f36:	f1 f7       	brne	.-4      	; 0x1f34 <LCD_displayCharacter+0x5de>
    1f38:	98 a3       	std	Y+32, r25	; 0x20
    1f3a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f3c:	89 a1       	ldd	r24, Y+33	; 0x21
    1f3e:	9a a1       	ldd	r25, Y+34	; 0x22
    1f40:	01 97       	sbiw	r24, 0x01	; 1
    1f42:	9a a3       	std	Y+34, r25	; 0x22
    1f44:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f46:	89 a1       	ldd	r24, Y+33	; 0x21
    1f48:	9a a1       	ldd	r25, Y+34	; 0x22
    1f4a:	00 97       	sbiw	r24, 0x00	; 0
    1f4c:	69 f7       	brne	.-38     	; 0x1f28 <LCD_displayCharacter+0x5d2>
    1f4e:	14 c0       	rjmp	.+40     	; 0x1f78 <LCD_displayCharacter+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f50:	6b a1       	ldd	r22, Y+35	; 0x23
    1f52:	7c a1       	ldd	r23, Y+36	; 0x24
    1f54:	8d a1       	ldd	r24, Y+37	; 0x25
    1f56:	9e a1       	ldd	r25, Y+38	; 0x26
    1f58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f5c:	dc 01       	movw	r26, r24
    1f5e:	cb 01       	movw	r24, r22
    1f60:	9a a3       	std	Y+34, r25	; 0x22
    1f62:	89 a3       	std	Y+33, r24	; 0x21
    1f64:	89 a1       	ldd	r24, Y+33	; 0x21
    1f66:	9a a1       	ldd	r25, Y+34	; 0x22
    1f68:	9e 8f       	std	Y+30, r25	; 0x1e
    1f6a:	8d 8f       	std	Y+29, r24	; 0x1d
    1f6c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f6e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f70:	01 97       	sbiw	r24, 0x01	; 1
    1f72:	f1 f7       	brne	.-4      	; 0x1f70 <LCD_displayCharacter+0x61a>
    1f74:	9e 8f       	std	Y+30, r25	; 0x1e
    1f76:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/* out the lowest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((data & 0x0F) << 4);
    1f78:	ab e3       	ldi	r26, 0x3B	; 59
    1f7a:	b0 e0       	ldi	r27, 0x00	; 0
    1f7c:	eb e3       	ldi	r30, 0x3B	; 59
    1f7e:	f0 e0       	ldi	r31, 0x00	; 0
    1f80:	80 81       	ld	r24, Z
    1f82:	28 2f       	mov	r18, r24
    1f84:	2f 70       	andi	r18, 0x0F	; 15
    1f86:	fe 01       	movw	r30, r28
    1f88:	ed 59       	subi	r30, 0x9D	; 157
    1f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8c:	80 81       	ld	r24, Z
    1f8e:	88 2f       	mov	r24, r24
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	82 95       	swap	r24
    1f94:	92 95       	swap	r25
    1f96:	90 7f       	andi	r25, 0xF0	; 240
    1f98:	98 27       	eor	r25, r24
    1f9a:	80 7f       	andi	r24, 0xF0	; 240
    1f9c:	98 27       	eor	r25, r24
    1f9e:	82 2b       	or	r24, r18
    1fa0:	8c 93       	st	X, r24
    1fa2:	80 e0       	ldi	r24, 0x00	; 0
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	a0 e8       	ldi	r26, 0x80	; 128
    1fa8:	bf e3       	ldi	r27, 0x3F	; 63
    1faa:	89 8f       	std	Y+25, r24	; 0x19
    1fac:	9a 8f       	std	Y+26, r25	; 0x1a
    1fae:	ab 8f       	std	Y+27, r26	; 0x1b
    1fb0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fb2:	69 8d       	ldd	r22, Y+25	; 0x19
    1fb4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fb6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fb8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fba:	20 e0       	ldi	r18, 0x00	; 0
    1fbc:	30 e0       	ldi	r19, 0x00	; 0
    1fbe:	4a ef       	ldi	r20, 0xFA	; 250
    1fc0:	54 e4       	ldi	r21, 0x44	; 68
    1fc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc6:	dc 01       	movw	r26, r24
    1fc8:	cb 01       	movw	r24, r22
    1fca:	8d 8b       	std	Y+21, r24	; 0x15
    1fcc:	9e 8b       	std	Y+22, r25	; 0x16
    1fce:	af 8b       	std	Y+23, r26	; 0x17
    1fd0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1fd2:	6d 89       	ldd	r22, Y+21	; 0x15
    1fd4:	7e 89       	ldd	r23, Y+22	; 0x16
    1fd6:	8f 89       	ldd	r24, Y+23	; 0x17
    1fd8:	98 8d       	ldd	r25, Y+24	; 0x18
    1fda:	20 e0       	ldi	r18, 0x00	; 0
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	40 e8       	ldi	r20, 0x80	; 128
    1fe0:	5f e3       	ldi	r21, 0x3F	; 63
    1fe2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fe6:	88 23       	and	r24, r24
    1fe8:	2c f4       	brge	.+10     	; 0x1ff4 <LCD_displayCharacter+0x69e>
		__ticks = 1;
    1fea:	81 e0       	ldi	r24, 0x01	; 1
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	9c 8b       	std	Y+20, r25	; 0x14
    1ff0:	8b 8b       	std	Y+19, r24	; 0x13
    1ff2:	3f c0       	rjmp	.+126    	; 0x2072 <LCD_displayCharacter+0x71c>
	else if (__tmp > 65535)
    1ff4:	6d 89       	ldd	r22, Y+21	; 0x15
    1ff6:	7e 89       	ldd	r23, Y+22	; 0x16
    1ff8:	8f 89       	ldd	r24, Y+23	; 0x17
    1ffa:	98 8d       	ldd	r25, Y+24	; 0x18
    1ffc:	20 e0       	ldi	r18, 0x00	; 0
    1ffe:	3f ef       	ldi	r19, 0xFF	; 255
    2000:	4f e7       	ldi	r20, 0x7F	; 127
    2002:	57 e4       	ldi	r21, 0x47	; 71
    2004:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2008:	18 16       	cp	r1, r24
    200a:	4c f5       	brge	.+82     	; 0x205e <LCD_displayCharacter+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    200c:	69 8d       	ldd	r22, Y+25	; 0x19
    200e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2010:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2012:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2014:	20 e0       	ldi	r18, 0x00	; 0
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	40 e2       	ldi	r20, 0x20	; 32
    201a:	51 e4       	ldi	r21, 0x41	; 65
    201c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2020:	dc 01       	movw	r26, r24
    2022:	cb 01       	movw	r24, r22
    2024:	bc 01       	movw	r22, r24
    2026:	cd 01       	movw	r24, r26
    2028:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    202c:	dc 01       	movw	r26, r24
    202e:	cb 01       	movw	r24, r22
    2030:	9c 8b       	std	Y+20, r25	; 0x14
    2032:	8b 8b       	std	Y+19, r24	; 0x13
    2034:	0f c0       	rjmp	.+30     	; 0x2054 <LCD_displayCharacter+0x6fe>
    2036:	88 ec       	ldi	r24, 0xC8	; 200
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	9a 8b       	std	Y+18, r25	; 0x12
    203c:	89 8b       	std	Y+17, r24	; 0x11
    203e:	89 89       	ldd	r24, Y+17	; 0x11
    2040:	9a 89       	ldd	r25, Y+18	; 0x12
    2042:	01 97       	sbiw	r24, 0x01	; 1
    2044:	f1 f7       	brne	.-4      	; 0x2042 <LCD_displayCharacter+0x6ec>
    2046:	9a 8b       	std	Y+18, r25	; 0x12
    2048:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    204a:	8b 89       	ldd	r24, Y+19	; 0x13
    204c:	9c 89       	ldd	r25, Y+20	; 0x14
    204e:	01 97       	sbiw	r24, 0x01	; 1
    2050:	9c 8b       	std	Y+20, r25	; 0x14
    2052:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2054:	8b 89       	ldd	r24, Y+19	; 0x13
    2056:	9c 89       	ldd	r25, Y+20	; 0x14
    2058:	00 97       	sbiw	r24, 0x00	; 0
    205a:	69 f7       	brne	.-38     	; 0x2036 <LCD_displayCharacter+0x6e0>
    205c:	14 c0       	rjmp	.+40     	; 0x2086 <LCD_displayCharacter+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    205e:	6d 89       	ldd	r22, Y+21	; 0x15
    2060:	7e 89       	ldd	r23, Y+22	; 0x16
    2062:	8f 89       	ldd	r24, Y+23	; 0x17
    2064:	98 8d       	ldd	r25, Y+24	; 0x18
    2066:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    206a:	dc 01       	movw	r26, r24
    206c:	cb 01       	movw	r24, r22
    206e:	9c 8b       	std	Y+20, r25	; 0x14
    2070:	8b 8b       	std	Y+19, r24	; 0x13
    2072:	8b 89       	ldd	r24, Y+19	; 0x13
    2074:	9c 89       	ldd	r25, Y+20	; 0x14
    2076:	98 8b       	std	Y+16, r25	; 0x10
    2078:	8f 87       	std	Y+15, r24	; 0x0f
    207a:	8f 85       	ldd	r24, Y+15	; 0x0f
    207c:	98 89       	ldd	r25, Y+16	; 0x10
    207e:	01 97       	sbiw	r24, 0x01	; 1
    2080:	f1 f7       	brne	.-4      	; 0x207e <LCD_displayCharacter+0x728>
    2082:	98 8b       	std	Y+16, r25	; 0x10
    2084:	8f 87       	std	Y+15, r24	; 0x0f
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (data & 0x0F);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	Clear_Bit(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2086:	ab e3       	ldi	r26, 0x3B	; 59
    2088:	b0 e0       	ldi	r27, 0x00	; 0
    208a:	eb e3       	ldi	r30, 0x3B	; 59
    208c:	f0 e0       	ldi	r31, 0x00	; 0
    208e:	80 81       	ld	r24, Z
    2090:	87 7f       	andi	r24, 0xF7	; 247
    2092:	8c 93       	st	X, r24
    2094:	80 e0       	ldi	r24, 0x00	; 0
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	a0 e8       	ldi	r26, 0x80	; 128
    209a:	bf e3       	ldi	r27, 0x3F	; 63
    209c:	8b 87       	std	Y+11, r24	; 0x0b
    209e:	9c 87       	std	Y+12, r25	; 0x0c
    20a0:	ad 87       	std	Y+13, r26	; 0x0d
    20a2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    20a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    20a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    20aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    20ac:	20 e0       	ldi	r18, 0x00	; 0
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	4a ef       	ldi	r20, 0xFA	; 250
    20b2:	54 e4       	ldi	r21, 0x44	; 68
    20b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20b8:	dc 01       	movw	r26, r24
    20ba:	cb 01       	movw	r24, r22
    20bc:	8f 83       	std	Y+7, r24	; 0x07
    20be:	98 87       	std	Y+8, r25	; 0x08
    20c0:	a9 87       	std	Y+9, r26	; 0x09
    20c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20c4:	6f 81       	ldd	r22, Y+7	; 0x07
    20c6:	78 85       	ldd	r23, Y+8	; 0x08
    20c8:	89 85       	ldd	r24, Y+9	; 0x09
    20ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    20cc:	20 e0       	ldi	r18, 0x00	; 0
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	40 e8       	ldi	r20, 0x80	; 128
    20d2:	5f e3       	ldi	r21, 0x3F	; 63
    20d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20d8:	88 23       	and	r24, r24
    20da:	2c f4       	brge	.+10     	; 0x20e6 <LCD_displayCharacter+0x790>
		__ticks = 1;
    20dc:	81 e0       	ldi	r24, 0x01	; 1
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	9e 83       	std	Y+6, r25	; 0x06
    20e2:	8d 83       	std	Y+5, r24	; 0x05
    20e4:	3f c0       	rjmp	.+126    	; 0x2164 <LCD_displayCharacter+0x80e>
	else if (__tmp > 65535)
    20e6:	6f 81       	ldd	r22, Y+7	; 0x07
    20e8:	78 85       	ldd	r23, Y+8	; 0x08
    20ea:	89 85       	ldd	r24, Y+9	; 0x09
    20ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ee:	20 e0       	ldi	r18, 0x00	; 0
    20f0:	3f ef       	ldi	r19, 0xFF	; 255
    20f2:	4f e7       	ldi	r20, 0x7F	; 127
    20f4:	57 e4       	ldi	r21, 0x47	; 71
    20f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20fa:	18 16       	cp	r1, r24
    20fc:	4c f5       	brge	.+82     	; 0x2150 <LCD_displayCharacter+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2100:	7c 85       	ldd	r23, Y+12	; 0x0c
    2102:	8d 85       	ldd	r24, Y+13	; 0x0d
    2104:	9e 85       	ldd	r25, Y+14	; 0x0e
    2106:	20 e0       	ldi	r18, 0x00	; 0
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	40 e2       	ldi	r20, 0x20	; 32
    210c:	51 e4       	ldi	r21, 0x41	; 65
    210e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2112:	dc 01       	movw	r26, r24
    2114:	cb 01       	movw	r24, r22
    2116:	bc 01       	movw	r22, r24
    2118:	cd 01       	movw	r24, r26
    211a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    211e:	dc 01       	movw	r26, r24
    2120:	cb 01       	movw	r24, r22
    2122:	9e 83       	std	Y+6, r25	; 0x06
    2124:	8d 83       	std	Y+5, r24	; 0x05
    2126:	0f c0       	rjmp	.+30     	; 0x2146 <LCD_displayCharacter+0x7f0>
    2128:	88 ec       	ldi	r24, 0xC8	; 200
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	9c 83       	std	Y+4, r25	; 0x04
    212e:	8b 83       	std	Y+3, r24	; 0x03
    2130:	8b 81       	ldd	r24, Y+3	; 0x03
    2132:	9c 81       	ldd	r25, Y+4	; 0x04
    2134:	01 97       	sbiw	r24, 0x01	; 1
    2136:	f1 f7       	brne	.-4      	; 0x2134 <LCD_displayCharacter+0x7de>
    2138:	9c 83       	std	Y+4, r25	; 0x04
    213a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    213c:	8d 81       	ldd	r24, Y+5	; 0x05
    213e:	9e 81       	ldd	r25, Y+6	; 0x06
    2140:	01 97       	sbiw	r24, 0x01	; 1
    2142:	9e 83       	std	Y+6, r25	; 0x06
    2144:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2146:	8d 81       	ldd	r24, Y+5	; 0x05
    2148:	9e 81       	ldd	r25, Y+6	; 0x06
    214a:	00 97       	sbiw	r24, 0x00	; 0
    214c:	69 f7       	brne	.-38     	; 0x2128 <LCD_displayCharacter+0x7d2>
    214e:	14 c0       	rjmp	.+40     	; 0x2178 <LCD_displayCharacter+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2150:	6f 81       	ldd	r22, Y+7	; 0x07
    2152:	78 85       	ldd	r23, Y+8	; 0x08
    2154:	89 85       	ldd	r24, Y+9	; 0x09
    2156:	9a 85       	ldd	r25, Y+10	; 0x0a
    2158:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    215c:	dc 01       	movw	r26, r24
    215e:	cb 01       	movw	r24, r22
    2160:	9e 83       	std	Y+6, r25	; 0x06
    2162:	8d 83       	std	Y+5, r24	; 0x05
    2164:	8d 81       	ldd	r24, Y+5	; 0x05
    2166:	9e 81       	ldd	r25, Y+6	; 0x06
    2168:	9a 83       	std	Y+2, r25	; 0x02
    216a:	89 83       	std	Y+1, r24	; 0x01
    216c:	89 81       	ldd	r24, Y+1	; 0x01
    216e:	9a 81       	ldd	r25, Y+2	; 0x02
    2170:	01 97       	sbiw	r24, 0x01	; 1
    2172:	f1 f7       	brne	.-4      	; 0x2170 <LCD_displayCharacter+0x81a>
    2174:	9a 83       	std	Y+2, r25	; 0x02
    2176:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	Clear_Bit(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2178:	cd 59       	subi	r28, 0x9D	; 157
    217a:	df 4f       	sbci	r29, 0xFF	; 255
    217c:	0f b6       	in	r0, 0x3f	; 63
    217e:	f8 94       	cli
    2180:	de bf       	out	0x3e, r29	; 62
    2182:	0f be       	out	0x3f, r0	; 63
    2184:	cd bf       	out	0x3d, r28	; 61
    2186:	cf 91       	pop	r28
    2188:	df 91       	pop	r29
    218a:	1f 91       	pop	r17
    218c:	0f 91       	pop	r16
    218e:	08 95       	ret

00002190 <LCD_displayString>:
 * OUTPUTS 		 : void
 *
 * Return		 : void
 **************************************************************************/
void LCD_displayString(const char *Str)
{
    2190:	df 93       	push	r29
    2192:	cf 93       	push	r28
    2194:	00 d0       	rcall	.+0      	; 0x2196 <LCD_displayString+0x6>
    2196:	0f 92       	push	r0
    2198:	cd b7       	in	r28, 0x3d	; 61
    219a:	de b7       	in	r29, 0x3e	; 62
    219c:	9b 83       	std	Y+3, r25	; 0x03
    219e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    21a0:	19 82       	std	Y+1, r1	; 0x01
    21a2:	0e c0       	rjmp	.+28     	; 0x21c0 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    21a4:	89 81       	ldd	r24, Y+1	; 0x01
    21a6:	28 2f       	mov	r18, r24
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	8a 81       	ldd	r24, Y+2	; 0x02
    21ac:	9b 81       	ldd	r25, Y+3	; 0x03
    21ae:	fc 01       	movw	r30, r24
    21b0:	e2 0f       	add	r30, r18
    21b2:	f3 1f       	adc	r31, r19
    21b4:	80 81       	ld	r24, Z
    21b6:	0e 94 ab 0c 	call	0x1956	; 0x1956 <LCD_displayCharacter>
		i++;
    21ba:	89 81       	ldd	r24, Y+1	; 0x01
    21bc:	8f 5f       	subi	r24, 0xFF	; 255
    21be:	89 83       	std	Y+1, r24	; 0x01
 * Return		 : void
 **************************************************************************/
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    21c0:	89 81       	ldd	r24, Y+1	; 0x01
    21c2:	28 2f       	mov	r18, r24
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	8a 81       	ldd	r24, Y+2	; 0x02
    21c8:	9b 81       	ldd	r25, Y+3	; 0x03
    21ca:	fc 01       	movw	r30, r24
    21cc:	e2 0f       	add	r30, r18
    21ce:	f3 1f       	adc	r31, r19
    21d0:	80 81       	ld	r24, Z
    21d2:	88 23       	and	r24, r24
    21d4:	39 f7       	brne	.-50     	; 0x21a4 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
    21d6:	0f 90       	pop	r0
    21d8:	0f 90       	pop	r0
    21da:	0f 90       	pop	r0
    21dc:	cf 91       	pop	r28
    21de:	df 91       	pop	r29
    21e0:	08 95       	ret

000021e2 <LCD_goToRowColumn>:
 * OUTPUTS 		 : void
 *
 * Return		 : void
 **************************************************************************/
void LCD_goToRowColumn(uint8 row,uint8 col)
{
    21e2:	df 93       	push	r29
    21e4:	cf 93       	push	r28
    21e6:	00 d0       	rcall	.+0      	; 0x21e8 <LCD_goToRowColumn+0x6>
    21e8:	00 d0       	rcall	.+0      	; 0x21ea <LCD_goToRowColumn+0x8>
    21ea:	0f 92       	push	r0
    21ec:	cd b7       	in	r28, 0x3d	; 61
    21ee:	de b7       	in	r29, 0x3e	; 62
    21f0:	8a 83       	std	Y+2, r24	; 0x02
    21f2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;

	/* first of all calculate the required address */
	switch(row)
    21f4:	8a 81       	ldd	r24, Y+2	; 0x02
    21f6:	28 2f       	mov	r18, r24
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	3d 83       	std	Y+5, r19	; 0x05
    21fc:	2c 83       	std	Y+4, r18	; 0x04
    21fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2200:	9d 81       	ldd	r25, Y+5	; 0x05
    2202:	81 30       	cpi	r24, 0x01	; 1
    2204:	91 05       	cpc	r25, r1
    2206:	c1 f0       	breq	.+48     	; 0x2238 <LCD_goToRowColumn+0x56>
    2208:	2c 81       	ldd	r18, Y+4	; 0x04
    220a:	3d 81       	ldd	r19, Y+5	; 0x05
    220c:	22 30       	cpi	r18, 0x02	; 2
    220e:	31 05       	cpc	r19, r1
    2210:	2c f4       	brge	.+10     	; 0x221c <LCD_goToRowColumn+0x3a>
    2212:	8c 81       	ldd	r24, Y+4	; 0x04
    2214:	9d 81       	ldd	r25, Y+5	; 0x05
    2216:	00 97       	sbiw	r24, 0x00	; 0
    2218:	61 f0       	breq	.+24     	; 0x2232 <LCD_goToRowColumn+0x50>
    221a:	19 c0       	rjmp	.+50     	; 0x224e <LCD_goToRowColumn+0x6c>
    221c:	2c 81       	ldd	r18, Y+4	; 0x04
    221e:	3d 81       	ldd	r19, Y+5	; 0x05
    2220:	22 30       	cpi	r18, 0x02	; 2
    2222:	31 05       	cpc	r19, r1
    2224:	69 f0       	breq	.+26     	; 0x2240 <LCD_goToRowColumn+0x5e>
    2226:	8c 81       	ldd	r24, Y+4	; 0x04
    2228:	9d 81       	ldd	r25, Y+5	; 0x05
    222a:	83 30       	cpi	r24, 0x03	; 3
    222c:	91 05       	cpc	r25, r1
    222e:	61 f0       	breq	.+24     	; 0x2248 <LCD_goToRowColumn+0x66>
    2230:	0e c0       	rjmp	.+28     	; 0x224e <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    2232:	8b 81       	ldd	r24, Y+3	; 0x03
    2234:	89 83       	std	Y+1, r24	; 0x01
    2236:	0b c0       	rjmp	.+22     	; 0x224e <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    2238:	8b 81       	ldd	r24, Y+3	; 0x03
    223a:	80 5c       	subi	r24, 0xC0	; 192
    223c:	89 83       	std	Y+1, r24	; 0x01
    223e:	07 c0       	rjmp	.+14     	; 0x224e <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    2240:	8b 81       	ldd	r24, Y+3	; 0x03
    2242:	80 5f       	subi	r24, 0xF0	; 240
    2244:	89 83       	std	Y+1, r24	; 0x01
    2246:	03 c0       	rjmp	.+6      	; 0x224e <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    2248:	8b 81       	ldd	r24, Y+3	; 0x03
    224a:	80 5b       	subi	r24, 0xB0	; 176
    224c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* to write to a specific address in the LCD
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION);
    224e:	89 81       	ldd	r24, Y+1	; 0x01
    2250:	80 68       	ori	r24, 0x80	; 128
    2252:	0e 94 8e 08 	call	0x111c	; 0x111c <LCD_sendCommand>
}
    2256:	0f 90       	pop	r0
    2258:	0f 90       	pop	r0
    225a:	0f 90       	pop	r0
    225c:	0f 90       	pop	r0
    225e:	0f 90       	pop	r0
    2260:	cf 91       	pop	r28
    2262:	df 91       	pop	r29
    2264:	08 95       	ret

00002266 <LCD_displayStringRowColumn>:
 * OUTPUTS 		 : void
 *
 * Return		 : void
 **************************************************************************/
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2266:	df 93       	push	r29
    2268:	cf 93       	push	r28
    226a:	00 d0       	rcall	.+0      	; 0x226c <LCD_displayStringRowColumn+0x6>
    226c:	00 d0       	rcall	.+0      	; 0x226e <LCD_displayStringRowColumn+0x8>
    226e:	cd b7       	in	r28, 0x3d	; 61
    2270:	de b7       	in	r29, 0x3e	; 62
    2272:	89 83       	std	Y+1, r24	; 0x01
    2274:	6a 83       	std	Y+2, r22	; 0x02
    2276:	5c 83       	std	Y+4, r21	; 0x04
    2278:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    227a:	89 81       	ldd	r24, Y+1	; 0x01
    227c:	6a 81       	ldd	r22, Y+2	; 0x02
    227e:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    2282:	8b 81       	ldd	r24, Y+3	; 0x03
    2284:	9c 81       	ldd	r25, Y+4	; 0x04
    2286:	0e 94 c8 10 	call	0x2190	; 0x2190 <LCD_displayString>
}
    228a:	0f 90       	pop	r0
    228c:	0f 90       	pop	r0
    228e:	0f 90       	pop	r0
    2290:	0f 90       	pop	r0
    2292:	cf 91       	pop	r28
    2294:	df 91       	pop	r29
    2296:	08 95       	ret

00002298 <LCD_intgerToString>:
 * OUTPUTS 		 : void
 *
 * Return		 : void
 **************************************************************************/
void LCD_intgerToString(int data)
{
    2298:	df 93       	push	r29
    229a:	cf 93       	push	r28
    229c:	cd b7       	in	r28, 0x3d	; 61
    229e:	de b7       	in	r29, 0x3e	; 62
    22a0:	62 97       	sbiw	r28, 0x12	; 18
    22a2:	0f b6       	in	r0, 0x3f	; 63
    22a4:	f8 94       	cli
    22a6:	de bf       	out	0x3e, r29	; 62
    22a8:	0f be       	out	0x3f, r0	; 63
    22aa:	cd bf       	out	0x3d, r28	; 61
    22ac:	9a 8b       	std	Y+18, r25	; 0x12
    22ae:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    22b0:	89 89       	ldd	r24, Y+17	; 0x11
    22b2:	9a 89       	ldd	r25, Y+18	; 0x12
    22b4:	9e 01       	movw	r18, r28
    22b6:	2f 5f       	subi	r18, 0xFF	; 255
    22b8:	3f 4f       	sbci	r19, 0xFF	; 255
    22ba:	b9 01       	movw	r22, r18
    22bc:	4a e0       	ldi	r20, 0x0A	; 10
    22be:	50 e0       	ldi	r21, 0x00	; 0
    22c0:	0e 94 ed 16 	call	0x2dda	; 0x2dda <itoa>
   LCD_displayString(buff);
    22c4:	ce 01       	movw	r24, r28
    22c6:	01 96       	adiw	r24, 0x01	; 1
    22c8:	0e 94 c8 10 	call	0x2190	; 0x2190 <LCD_displayString>
}
    22cc:	62 96       	adiw	r28, 0x12	; 18
    22ce:	0f b6       	in	r0, 0x3f	; 63
    22d0:	f8 94       	cli
    22d2:	de bf       	out	0x3e, r29	; 62
    22d4:	0f be       	out	0x3f, r0	; 63
    22d6:	cd bf       	out	0x3d, r28	; 61
    22d8:	cf 91       	pop	r28
    22da:	df 91       	pop	r29
    22dc:	08 95       	ret

000022de <LCD_clearScreen>:
 * OUTPUTS 		 : void
 *
 * Return		 : void
 **************************************************************************/
void LCD_clearScreen(void)
{
    22de:	df 93       	push	r29
    22e0:	cf 93       	push	r28
    22e2:	cd b7       	in	r28, 0x3d	; 61
    22e4:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display
    22e6:	81 e0       	ldi	r24, 0x01	; 1
    22e8:	0e 94 8e 08 	call	0x111c	; 0x111c <LCD_sendCommand>
}
    22ec:	cf 91       	pop	r28
    22ee:	df 91       	pop	r29
    22f0:	08 95       	ret

000022f2 <OS_init>:
 * OUTPUTS 		 : void
 *
 * Return		 : void
 **************************************************************************/
void OS_init(void)
{
    22f2:	df 93       	push	r29
    22f4:	cf 93       	push	r28
    22f6:	0f 92       	push	r0
    22f8:	cd b7       	in	r28, 0x3d	; 61
    22fa:	de b7       	in	r29, 0x3e	; 62
	/*Looping index for Initializing Array of structures for tasks */
	uint8 u8_Array_Index;
	/*Enabling Global Interrupt*/
	global_interrupt_enable();
    22fc:	0e 94 51 14 	call	0x28a2	; 0x28a2 <global_interrupt_enable>
	/*Initilizing Timer*/
	timer0_init();
    2300:	0e 94 aa 13 	call	0x2754	; 0x2754 <timer0_init>
	/*Setting Compare match value according to match Tick time*/
	Set_OCR_Value(u8_OS_TickTIme_ms);
    2304:	80 91 df 00 	lds	r24, 0x00DF
    2308:	0e 94 c5 13 	call	0x278a	; 0x278a <Set_OCR_Value>
	/*passing value of call back function to setcallback function*/
	OS_SetCallBack(OS_Long_Term);
    230c:	81 e2       	ldi	r24, 0x21	; 33
    230e:	93 e1       	ldi	r25, 0x13	; 19
    2310:	0e 94 b4 14 	call	0x2968	; 0x2968 <OS_SetCallBack>
	/*Initializing Array of structures for tasks*/
	for(u8_Array_Index=0;u8_Array_Index<MAX_NUM_TASKS;u8_Array_Index++)
    2314:	19 82       	std	Y+1, r1	; 0x01
    2316:	3f c0       	rjmp	.+126    	; 0x2396 <OS_init+0xa4>
	{
		Str_Array_Tasks[u8_Array_Index].OS_PTR_Function=NULL;
    2318:	89 81       	ldd	r24, Y+1	; 0x01
    231a:	28 2f       	mov	r18, r24
    231c:	30 e0       	ldi	r19, 0x00	; 0
    231e:	c9 01       	movw	r24, r18
    2320:	88 0f       	add	r24, r24
    2322:	99 1f       	adc	r25, r25
    2324:	82 0f       	add	r24, r18
    2326:	93 1f       	adc	r25, r19
    2328:	88 0f       	add	r24, r24
    232a:	99 1f       	adc	r25, r25
    232c:	fc 01       	movw	r30, r24
    232e:	e4 50       	subi	r30, 0x04	; 4
    2330:	ff 4f       	sbci	r31, 0xFF	; 255
    2332:	11 82       	std	Z+1, r1	; 0x01
    2334:	10 82       	st	Z, r1
		Str_Array_Tasks[u8_Array_Index].Task_Priority=PRIORITY_ZERO_HIGHEST;
    2336:	89 81       	ldd	r24, Y+1	; 0x01
    2338:	28 2f       	mov	r18, r24
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	c9 01       	movw	r24, r18
    233e:	88 0f       	add	r24, r24
    2340:	99 1f       	adc	r25, r25
    2342:	82 0f       	add	r24, r18
    2344:	93 1f       	adc	r25, r19
    2346:	88 0f       	add	r24, r24
    2348:	99 1f       	adc	r25, r25
    234a:	fc 01       	movw	r30, r24
    234c:	ef 5f       	subi	r30, 0xFF	; 255
    234e:	fe 4f       	sbci	r31, 0xFE	; 254
    2350:	10 82       	st	Z, r1
		Str_Array_Tasks[u8_Array_Index].Task_Periodicity=0u;
    2352:	89 81       	ldd	r24, Y+1	; 0x01
    2354:	28 2f       	mov	r18, r24
    2356:	30 e0       	ldi	r19, 0x00	; 0
    2358:	c9 01       	movw	r24, r18
    235a:	88 0f       	add	r24, r24
    235c:	99 1f       	adc	r25, r25
    235e:	82 0f       	add	r24, r18
    2360:	93 1f       	adc	r25, r19
    2362:	88 0f       	add	r24, r24
    2364:	99 1f       	adc	r25, r25
    2366:	fc 01       	movw	r30, r24
    2368:	e1 50       	subi	r30, 0x01	; 1
    236a:	ff 4f       	sbci	r31, 0xFF	; 255
    236c:	11 82       	std	Z+1, r1	; 0x01
    236e:	10 82       	st	Z, r1
		Str_Array_Tasks[u8_Array_Index].Task_Status=WAITING;
    2370:	89 81       	ldd	r24, Y+1	; 0x01
    2372:	28 2f       	mov	r18, r24
    2374:	30 e0       	ldi	r19, 0x00	; 0
    2376:	c9 01       	movw	r24, r18
    2378:	88 0f       	add	r24, r24
    237a:	99 1f       	adc	r25, r25
    237c:	82 0f       	add	r24, r18
    237e:	93 1f       	adc	r25, r19
    2380:	01 96       	adiw	r24, 0x01	; 1
    2382:	88 0f       	add	r24, r24
    2384:	99 1f       	adc	r25, r25
    2386:	fc 01       	movw	r30, r24
    2388:	e4 50       	subi	r30, 0x04	; 4
    238a:	ff 4f       	sbci	r31, 0xFF	; 255
    238c:	82 e0       	ldi	r24, 0x02	; 2
    238e:	80 83       	st	Z, r24
	/*Setting Compare match value according to match Tick time*/
	Set_OCR_Value(u8_OS_TickTIme_ms);
	/*passing value of call back function to setcallback function*/
	OS_SetCallBack(OS_Long_Term);
	/*Initializing Array of structures for tasks*/
	for(u8_Array_Index=0;u8_Array_Index<MAX_NUM_TASKS;u8_Array_Index++)
    2390:	89 81       	ldd	r24, Y+1	; 0x01
    2392:	8f 5f       	subi	r24, 0xFF	; 255
    2394:	89 83       	std	Y+1, r24	; 0x01
    2396:	89 81       	ldd	r24, Y+1	; 0x01
    2398:	8a 30       	cpi	r24, 0x0A	; 10
    239a:	08 f4       	brcc	.+2      	; 0x239e <OS_init+0xac>
    239c:	bd cf       	rjmp	.-134    	; 0x2318 <OS_init+0x26>
		Str_Array_Tasks[u8_Array_Index].OS_PTR_Function=NULL;
		Str_Array_Tasks[u8_Array_Index].Task_Priority=PRIORITY_ZERO_HIGHEST;
		Str_Array_Tasks[u8_Array_Index].Task_Periodicity=0u;
		Str_Array_Tasks[u8_Array_Index].Task_Status=WAITING;
	}
}
    239e:	0f 90       	pop	r0
    23a0:	cf 91       	pop	r28
    23a2:	df 91       	pop	r29
    23a4:	08 95       	ret

000023a6 <OS_Deinit>:
 * OUTPUTS 		 : void
 *
 * Return		 : void
 **************************************************************************/
void OS_Deinit(void)
{
    23a6:	df 93       	push	r29
    23a8:	cf 93       	push	r28
    23aa:	cd b7       	in	r28, 0x3d	; 61
    23ac:	de b7       	in	r29, 0x3e	; 62
	/*Clearing prescaler value to disable timer and disable OS*/
	timer0_Deinit();
    23ae:	0e 94 32 14 	call	0x2864	; 0x2864 <timer0_Deinit>
}
    23b2:	cf 91       	pop	r28
    23b4:	df 91       	pop	r29
    23b6:	08 95       	ret

000023b8 <Create_Task>:
 * OUTPUTS 		 : void
 *
 * Return		 : void
 **************************************************************************/
OS_Status_t Create_Task(PTR_Function OS_PTR_Function,uint8 Task_Priority,uint16 Task_Periodicity)
{
    23b8:	df 93       	push	r29
    23ba:	cf 93       	push	r28
    23bc:	00 d0       	rcall	.+0      	; 0x23be <Create_Task+0x6>
    23be:	00 d0       	rcall	.+0      	; 0x23c0 <Create_Task+0x8>
    23c0:	00 d0       	rcall	.+0      	; 0x23c2 <Create_Task+0xa>
    23c2:	cd b7       	in	r28, 0x3d	; 61
    23c4:	de b7       	in	r29, 0x3e	; 62
    23c6:	9b 83       	std	Y+3, r25	; 0x03
    23c8:	8a 83       	std	Y+2, r24	; 0x02
    23ca:	6c 83       	std	Y+4, r22	; 0x04
    23cc:	5e 83       	std	Y+6, r21	; 0x06
    23ce:	4d 83       	std	Y+5, r20	; 0x05
	OS_Status_t Ret_Value;
	/*Assigning Value for tasks*/
	/*Initializing Tasks by pointing pointer to function to null and move it to waiting status*/
	if(u8_Tasks_Index<MAX_NUM_TASKS)
    23d0:	80 91 f0 00 	lds	r24, 0x00F0
    23d4:	8a 30       	cpi	r24, 0x0A	; 10
    23d6:	08 f0       	brcs	.+2      	; 0x23da <Create_Task+0x22>
    23d8:	4c c0       	rjmp	.+152    	; 0x2472 <Create_Task+0xba>
	{
		Str_Array_Tasks[u8_Tasks_Index].OS_PTR_Function = OS_PTR_Function;
    23da:	80 91 f0 00 	lds	r24, 0x00F0
    23de:	28 2f       	mov	r18, r24
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	c9 01       	movw	r24, r18
    23e4:	88 0f       	add	r24, r24
    23e6:	99 1f       	adc	r25, r25
    23e8:	82 0f       	add	r24, r18
    23ea:	93 1f       	adc	r25, r19
    23ec:	88 0f       	add	r24, r24
    23ee:	99 1f       	adc	r25, r25
    23f0:	fc 01       	movw	r30, r24
    23f2:	e4 50       	subi	r30, 0x04	; 4
    23f4:	ff 4f       	sbci	r31, 0xFF	; 255
    23f6:	8a 81       	ldd	r24, Y+2	; 0x02
    23f8:	9b 81       	ldd	r25, Y+3	; 0x03
    23fa:	91 83       	std	Z+1, r25	; 0x01
    23fc:	80 83       	st	Z, r24
		Str_Array_Tasks[u8_Tasks_Index].Task_Priority = Task_Priority;
    23fe:	80 91 f0 00 	lds	r24, 0x00F0
    2402:	28 2f       	mov	r18, r24
    2404:	30 e0       	ldi	r19, 0x00	; 0
    2406:	c9 01       	movw	r24, r18
    2408:	88 0f       	add	r24, r24
    240a:	99 1f       	adc	r25, r25
    240c:	82 0f       	add	r24, r18
    240e:	93 1f       	adc	r25, r19
    2410:	88 0f       	add	r24, r24
    2412:	99 1f       	adc	r25, r25
    2414:	fc 01       	movw	r30, r24
    2416:	ef 5f       	subi	r30, 0xFF	; 255
    2418:	fe 4f       	sbci	r31, 0xFE	; 254
    241a:	8c 81       	ldd	r24, Y+4	; 0x04
    241c:	80 83       	st	Z, r24
		Str_Array_Tasks[u8_Tasks_Index].Task_Periodicity = Task_Periodicity;
    241e:	80 91 f0 00 	lds	r24, 0x00F0
    2422:	28 2f       	mov	r18, r24
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	c9 01       	movw	r24, r18
    2428:	88 0f       	add	r24, r24
    242a:	99 1f       	adc	r25, r25
    242c:	82 0f       	add	r24, r18
    242e:	93 1f       	adc	r25, r19
    2430:	88 0f       	add	r24, r24
    2432:	99 1f       	adc	r25, r25
    2434:	fc 01       	movw	r30, r24
    2436:	e1 50       	subi	r30, 0x01	; 1
    2438:	ff 4f       	sbci	r31, 0xFF	; 255
    243a:	8d 81       	ldd	r24, Y+5	; 0x05
    243c:	9e 81       	ldd	r25, Y+6	; 0x06
    243e:	91 83       	std	Z+1, r25	; 0x01
    2440:	80 83       	st	Z, r24
		Str_Array_Tasks[u8_Tasks_Index].Task_Status = WAITING;
    2442:	80 91 f0 00 	lds	r24, 0x00F0
    2446:	28 2f       	mov	r18, r24
    2448:	30 e0       	ldi	r19, 0x00	; 0
    244a:	c9 01       	movw	r24, r18
    244c:	88 0f       	add	r24, r24
    244e:	99 1f       	adc	r25, r25
    2450:	82 0f       	add	r24, r18
    2452:	93 1f       	adc	r25, r19
    2454:	01 96       	adiw	r24, 0x01	; 1
    2456:	88 0f       	add	r24, r24
    2458:	99 1f       	adc	r25, r25
    245a:	fc 01       	movw	r30, r24
    245c:	e4 50       	subi	r30, 0x04	; 4
    245e:	ff 4f       	sbci	r31, 0xFF	; 255
    2460:	82 e0       	ldi	r24, 0x02	; 2
    2462:	80 83       	st	Z, r24
		u8_Tasks_Index++;
    2464:	80 91 f0 00 	lds	r24, 0x00F0
    2468:	8f 5f       	subi	r24, 0xFF	; 255
    246a:	80 93 f0 00 	sts	0x00F0, r24
		Ret_Value=OS_OK;
    246e:	19 82       	std	Y+1, r1	; 0x01
    2470:	02 c0       	rjmp	.+4      	; 0x2476 <Create_Task+0xbe>
	}
	else
	{
		Ret_Value=OS_NOT_OK;
    2472:	81 e0       	ldi	r24, 0x01	; 1
    2474:	89 83       	std	Y+1, r24	; 0x01
	}
	return Ret_Value;
    2476:	89 81       	ldd	r24, Y+1	; 0x01
}
    2478:	26 96       	adiw	r28, 0x06	; 6
    247a:	0f b6       	in	r0, 0x3f	; 63
    247c:	f8 94       	cli
    247e:	de bf       	out	0x3e, r29	; 62
    2480:	0f be       	out	0x3f, r0	; 63
    2482:	cd bf       	out	0x3d, r28	; 61
    2484:	cf 91       	pop	r28
    2486:	df 91       	pop	r29
    2488:	08 95       	ret

0000248a <Delete_Task>:
 * OUTPUTS 		 : void
 *
 * Return		 : void
 **************************************************************************/
OS_Status_t Delete_Task(PTR_Function OS_PTR_Function)
{
    248a:	df 93       	push	r29
    248c:	cf 93       	push	r28
    248e:	00 d0       	rcall	.+0      	; 0x2490 <Delete_Task+0x6>
    2490:	00 d0       	rcall	.+0      	; 0x2492 <Delete_Task+0x8>
    2492:	cd b7       	in	r28, 0x3d	; 61
    2494:	de b7       	in	r29, 0x3e	; 62
    2496:	9c 83       	std	Y+4, r25	; 0x04
    2498:	8b 83       	std	Y+3, r24	; 0x03
	/*Looping index for Deleting tasks of structures for tasks */
	uint8 u8_Array_Index;
	OS_Status_t Ret_Value=OS_NOT_OK;
    249a:	81 e0       	ldi	r24, 0x01	; 1
    249c:	89 83       	std	Y+1, r24	; 0x01
	/*Deleting Tasks by pointing pointer to function to null and move it to deleted status*/
	for(u8_Array_Index=0;u8_Array_Index<u8_Tasks_Index;u8_Array_Index++)
    249e:	1a 82       	std	Y+2, r1	; 0x02
    24a0:	54 c0       	rjmp	.+168    	; 0x254a <Delete_Task+0xc0>
	{
		/*Deleting Tasks by pointing pointer to function to null and move it to deleted status*/
		/*Searching for address of task needed to be deleted */
		if(Str_Array_Tasks[u8_Array_Index].OS_PTR_Function==OS_PTR_Function)
    24a2:	8a 81       	ldd	r24, Y+2	; 0x02
    24a4:	28 2f       	mov	r18, r24
    24a6:	30 e0       	ldi	r19, 0x00	; 0
    24a8:	c9 01       	movw	r24, r18
    24aa:	88 0f       	add	r24, r24
    24ac:	99 1f       	adc	r25, r25
    24ae:	82 0f       	add	r24, r18
    24b0:	93 1f       	adc	r25, r19
    24b2:	88 0f       	add	r24, r24
    24b4:	99 1f       	adc	r25, r25
    24b6:	fc 01       	movw	r30, r24
    24b8:	e4 50       	subi	r30, 0x04	; 4
    24ba:	ff 4f       	sbci	r31, 0xFF	; 255
    24bc:	20 81       	ld	r18, Z
    24be:	31 81       	ldd	r19, Z+1	; 0x01
    24c0:	8b 81       	ldd	r24, Y+3	; 0x03
    24c2:	9c 81       	ldd	r25, Y+4	; 0x04
    24c4:	28 17       	cp	r18, r24
    24c6:	39 07       	cpc	r19, r25
    24c8:	e9 f5       	brne	.+122    	; 0x2544 <Delete_Task+0xba>
		{
			Str_Array_Tasks[u8_Array_Index].OS_PTR_Function=NULL;
    24ca:	8a 81       	ldd	r24, Y+2	; 0x02
    24cc:	28 2f       	mov	r18, r24
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	c9 01       	movw	r24, r18
    24d2:	88 0f       	add	r24, r24
    24d4:	99 1f       	adc	r25, r25
    24d6:	82 0f       	add	r24, r18
    24d8:	93 1f       	adc	r25, r19
    24da:	88 0f       	add	r24, r24
    24dc:	99 1f       	adc	r25, r25
    24de:	fc 01       	movw	r30, r24
    24e0:	e4 50       	subi	r30, 0x04	; 4
    24e2:	ff 4f       	sbci	r31, 0xFF	; 255
    24e4:	11 82       	std	Z+1, r1	; 0x01
    24e6:	10 82       	st	Z, r1
			Str_Array_Tasks[u8_Array_Index].Task_Priority=PRIORITY_ZERO_HIGHEST;
    24e8:	8a 81       	ldd	r24, Y+2	; 0x02
    24ea:	28 2f       	mov	r18, r24
    24ec:	30 e0       	ldi	r19, 0x00	; 0
    24ee:	c9 01       	movw	r24, r18
    24f0:	88 0f       	add	r24, r24
    24f2:	99 1f       	adc	r25, r25
    24f4:	82 0f       	add	r24, r18
    24f6:	93 1f       	adc	r25, r19
    24f8:	88 0f       	add	r24, r24
    24fa:	99 1f       	adc	r25, r25
    24fc:	fc 01       	movw	r30, r24
    24fe:	ef 5f       	subi	r30, 0xFF	; 255
    2500:	fe 4f       	sbci	r31, 0xFE	; 254
    2502:	10 82       	st	Z, r1
			Str_Array_Tasks[u8_Array_Index].Task_Periodicity=0u;
    2504:	8a 81       	ldd	r24, Y+2	; 0x02
    2506:	28 2f       	mov	r18, r24
    2508:	30 e0       	ldi	r19, 0x00	; 0
    250a:	c9 01       	movw	r24, r18
    250c:	88 0f       	add	r24, r24
    250e:	99 1f       	adc	r25, r25
    2510:	82 0f       	add	r24, r18
    2512:	93 1f       	adc	r25, r19
    2514:	88 0f       	add	r24, r24
    2516:	99 1f       	adc	r25, r25
    2518:	fc 01       	movw	r30, r24
    251a:	e1 50       	subi	r30, 0x01	; 1
    251c:	ff 4f       	sbci	r31, 0xFF	; 255
    251e:	11 82       	std	Z+1, r1	; 0x01
    2520:	10 82       	st	Z, r1
			Str_Array_Tasks[u8_Array_Index].Task_Status=DELETED;
    2522:	8a 81       	ldd	r24, Y+2	; 0x02
    2524:	28 2f       	mov	r18, r24
    2526:	30 e0       	ldi	r19, 0x00	; 0
    2528:	c9 01       	movw	r24, r18
    252a:	88 0f       	add	r24, r24
    252c:	99 1f       	adc	r25, r25
    252e:	82 0f       	add	r24, r18
    2530:	93 1f       	adc	r25, r19
    2532:	01 96       	adiw	r24, 0x01	; 1
    2534:	88 0f       	add	r24, r24
    2536:	99 1f       	adc	r25, r25
    2538:	fc 01       	movw	r30, r24
    253a:	e4 50       	subi	r30, 0x04	; 4
    253c:	ff 4f       	sbci	r31, 0xFF	; 255
    253e:	83 e0       	ldi	r24, 0x03	; 3
    2540:	80 83       	st	Z, r24
			Ret_Value=OS_OK;
    2542:	19 82       	std	Y+1, r1	; 0x01
{
	/*Looping index for Deleting tasks of structures for tasks */
	uint8 u8_Array_Index;
	OS_Status_t Ret_Value=OS_NOT_OK;
	/*Deleting Tasks by pointing pointer to function to null and move it to deleted status*/
	for(u8_Array_Index=0;u8_Array_Index<u8_Tasks_Index;u8_Array_Index++)
    2544:	8a 81       	ldd	r24, Y+2	; 0x02
    2546:	8f 5f       	subi	r24, 0xFF	; 255
    2548:	8a 83       	std	Y+2, r24	; 0x02
    254a:	90 91 f0 00 	lds	r25, 0x00F0
    254e:	8a 81       	ldd	r24, Y+2	; 0x02
    2550:	89 17       	cp	r24, r25
    2552:	08 f4       	brcc	.+2      	; 0x2556 <Delete_Task+0xcc>
    2554:	a6 cf       	rjmp	.-180    	; 0x24a2 <Delete_Task+0x18>
			Str_Array_Tasks[u8_Array_Index].Task_Periodicity=0u;
			Str_Array_Tasks[u8_Array_Index].Task_Status=DELETED;
			Ret_Value=OS_OK;
		}
	}
	return Ret_Value;
    2556:	89 81       	ldd	r24, Y+1	; 0x01
}
    2558:	0f 90       	pop	r0
    255a:	0f 90       	pop	r0
    255c:	0f 90       	pop	r0
    255e:	0f 90       	pop	r0
    2560:	cf 91       	pop	r28
    2562:	df 91       	pop	r29
    2564:	08 95       	ret

00002566 <OS_Run>:
 * OUTPUTS 		 : void
 *
 * Return		 : void
 **************************************************************************/
void OS_Run(void)
{
    2566:	df 93       	push	r29
    2568:	cf 93       	push	r28
    256a:	00 d0       	rcall	.+0      	; 0x256c <OS_Run+0x6>
    256c:	cd b7       	in	r28, 0x3d	; 61
    256e:	de b7       	in	r29, 0x3e	; 62
	/*Checking for index of tasks*/
	uint8 u8_Priority_Index;
	while(1)
	{
		/*looping to check for ready tasks*/
		for(u8_Array_Index = 0 ;u8_Array_Index < u8_Tasks_Index ; u8_Array_Index++)
    2570:	1a 82       	std	Y+2, r1	; 0x02
    2572:	60 c0       	rjmp	.+192    	; 0x2634 <OS_Run+0xce>
		{
			if( Str_Array_Tasks[u8_Array_Index].Task_Status == READY)
    2574:	8a 81       	ldd	r24, Y+2	; 0x02
    2576:	28 2f       	mov	r18, r24
    2578:	30 e0       	ldi	r19, 0x00	; 0
    257a:	c9 01       	movw	r24, r18
    257c:	88 0f       	add	r24, r24
    257e:	99 1f       	adc	r25, r25
    2580:	82 0f       	add	r24, r18
    2582:	93 1f       	adc	r25, r19
    2584:	01 96       	adiw	r24, 0x01	; 1
    2586:	88 0f       	add	r24, r24
    2588:	99 1f       	adc	r25, r25
    258a:	fc 01       	movw	r30, r24
    258c:	e4 50       	subi	r30, 0x04	; 4
    258e:	ff 4f       	sbci	r31, 0xFF	; 255
    2590:	80 81       	ld	r24, Z
    2592:	88 23       	and	r24, r24
    2594:	09 f0       	breq	.+2      	; 0x2598 <OS_Run+0x32>
    2596:	4b c0       	rjmp	.+150    	; 0x262e <OS_Run+0xc8>
			{
				/*looping to check for ready tasks and finding highest priority to move them to
				 * running state and then call the task to operate and then move it to waiting state
				 * after finishing implementation*/
				for(u8_Priority_Index = PRIORITY_ZERO_HIGHEST ; u8_Priority_Index <= PRIORITY_FIVE_LOWEST ; u8_Priority_Index++)
    2598:	19 82       	std	Y+1, r1	; 0x01
    259a:	45 c0       	rjmp	.+138    	; 0x2626 <OS_Run+0xc0>
				{
					if( Str_Array_Tasks[u8_Array_Index].Task_Priority == u8_Priority_Index )
    259c:	8a 81       	ldd	r24, Y+2	; 0x02
    259e:	28 2f       	mov	r18, r24
    25a0:	30 e0       	ldi	r19, 0x00	; 0
    25a2:	c9 01       	movw	r24, r18
    25a4:	88 0f       	add	r24, r24
    25a6:	99 1f       	adc	r25, r25
    25a8:	82 0f       	add	r24, r18
    25aa:	93 1f       	adc	r25, r19
    25ac:	88 0f       	add	r24, r24
    25ae:	99 1f       	adc	r25, r25
    25b0:	fc 01       	movw	r30, r24
    25b2:	ef 5f       	subi	r30, 0xFF	; 255
    25b4:	fe 4f       	sbci	r31, 0xFE	; 254
    25b6:	90 81       	ld	r25, Z
    25b8:	89 81       	ldd	r24, Y+1	; 0x01
    25ba:	98 17       	cp	r25, r24
    25bc:	89 f5       	brne	.+98     	; 0x2620 <OS_Run+0xba>
					{
						Str_Array_Tasks[u8_Array_Index].Task_Status = RUNNING;
    25be:	8a 81       	ldd	r24, Y+2	; 0x02
    25c0:	28 2f       	mov	r18, r24
    25c2:	30 e0       	ldi	r19, 0x00	; 0
    25c4:	c9 01       	movw	r24, r18
    25c6:	88 0f       	add	r24, r24
    25c8:	99 1f       	adc	r25, r25
    25ca:	82 0f       	add	r24, r18
    25cc:	93 1f       	adc	r25, r19
    25ce:	01 96       	adiw	r24, 0x01	; 1
    25d0:	88 0f       	add	r24, r24
    25d2:	99 1f       	adc	r25, r25
    25d4:	fc 01       	movw	r30, r24
    25d6:	e4 50       	subi	r30, 0x04	; 4
    25d8:	ff 4f       	sbci	r31, 0xFF	; 255
    25da:	81 e0       	ldi	r24, 0x01	; 1
    25dc:	80 83       	st	Z, r24
						Str_Array_Tasks[u8_Array_Index].OS_PTR_Function();
    25de:	8a 81       	ldd	r24, Y+2	; 0x02
    25e0:	28 2f       	mov	r18, r24
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	c9 01       	movw	r24, r18
    25e6:	88 0f       	add	r24, r24
    25e8:	99 1f       	adc	r25, r25
    25ea:	82 0f       	add	r24, r18
    25ec:	93 1f       	adc	r25, r19
    25ee:	88 0f       	add	r24, r24
    25f0:	99 1f       	adc	r25, r25
    25f2:	fc 01       	movw	r30, r24
    25f4:	e4 50       	subi	r30, 0x04	; 4
    25f6:	ff 4f       	sbci	r31, 0xFF	; 255
    25f8:	01 90       	ld	r0, Z+
    25fa:	f0 81       	ld	r31, Z
    25fc:	e0 2d       	mov	r30, r0
    25fe:	09 95       	icall
						Str_Array_Tasks[u8_Array_Index].Task_Status = WAITING;
    2600:	8a 81       	ldd	r24, Y+2	; 0x02
    2602:	28 2f       	mov	r18, r24
    2604:	30 e0       	ldi	r19, 0x00	; 0
    2606:	c9 01       	movw	r24, r18
    2608:	88 0f       	add	r24, r24
    260a:	99 1f       	adc	r25, r25
    260c:	82 0f       	add	r24, r18
    260e:	93 1f       	adc	r25, r19
    2610:	01 96       	adiw	r24, 0x01	; 1
    2612:	88 0f       	add	r24, r24
    2614:	99 1f       	adc	r25, r25
    2616:	fc 01       	movw	r30, r24
    2618:	e4 50       	subi	r30, 0x04	; 4
    261a:	ff 4f       	sbci	r31, 0xFF	; 255
    261c:	82 e0       	ldi	r24, 0x02	; 2
    261e:	80 83       	st	Z, r24
			if( Str_Array_Tasks[u8_Array_Index].Task_Status == READY)
			{
				/*looping to check for ready tasks and finding highest priority to move them to
				 * running state and then call the task to operate and then move it to waiting state
				 * after finishing implementation*/
				for(u8_Priority_Index = PRIORITY_ZERO_HIGHEST ; u8_Priority_Index <= PRIORITY_FIVE_LOWEST ; u8_Priority_Index++)
    2620:	89 81       	ldd	r24, Y+1	; 0x01
    2622:	8f 5f       	subi	r24, 0xFF	; 255
    2624:	89 83       	std	Y+1, r24	; 0x01
    2626:	89 81       	ldd	r24, Y+1	; 0x01
    2628:	86 30       	cpi	r24, 0x06	; 6
    262a:	08 f4       	brcc	.+2      	; 0x262e <OS_Run+0xc8>
    262c:	b7 cf       	rjmp	.-146    	; 0x259c <OS_Run+0x36>
	/*Checking for index of tasks*/
	uint8 u8_Priority_Index;
	while(1)
	{
		/*looping to check for ready tasks*/
		for(u8_Array_Index = 0 ;u8_Array_Index < u8_Tasks_Index ; u8_Array_Index++)
    262e:	8a 81       	ldd	r24, Y+2	; 0x02
    2630:	8f 5f       	subi	r24, 0xFF	; 255
    2632:	8a 83       	std	Y+2, r24	; 0x02
    2634:	90 91 f0 00 	lds	r25, 0x00F0
    2638:	8a 81       	ldd	r24, Y+2	; 0x02
    263a:	89 17       	cp	r24, r25
    263c:	08 f4       	brcc	.+2      	; 0x2640 <OS_Run+0xda>
    263e:	9a cf       	rjmp	.-204    	; 0x2574 <OS_Run+0xe>
    2640:	97 cf       	rjmp	.-210    	; 0x2570 <OS_Run+0xa>

00002642 <OS_Long_Term>:
 * OUTPUTS 		 : void
 *
 * Return		 : void
 **************************************************************************/
void OS_Long_Term(void)
{
    2642:	df 93       	push	r29
    2644:	cf 93       	push	r28
    2646:	0f 92       	push	r0
    2648:	cd b7       	in	r28, 0x3d	; 61
    264a:	de b7       	in	r29, 0x3e	; 62
	/*Looping index for searching for tasks */
	uint8 u8_Array_Index;
	/*looping to check for tasks that met their time period*/
	for(u8_Array_Index = 0 ;u8_Array_Index < u8_Tasks_Index ; u8_Array_Index++)
    264c:	19 82       	std	Y+1, r1	; 0x01
    264e:	3c c0       	rjmp	.+120    	; 0x26c8 <OS_Long_Term+0x86>
	{
		/*if time counter met time perdiocity of function move it to ready state*/
		if( OS_TickCounter % Str_Array_Tasks[u8_Array_Index].Task_Periodicity==0)/**/
    2650:	40 91 dc 00 	lds	r20, 0x00DC
    2654:	50 91 dd 00 	lds	r21, 0x00DD
    2658:	89 81       	ldd	r24, Y+1	; 0x01
    265a:	28 2f       	mov	r18, r24
    265c:	30 e0       	ldi	r19, 0x00	; 0
    265e:	c9 01       	movw	r24, r18
    2660:	88 0f       	add	r24, r24
    2662:	99 1f       	adc	r25, r25
    2664:	82 0f       	add	r24, r18
    2666:	93 1f       	adc	r25, r19
    2668:	88 0f       	add	r24, r24
    266a:	99 1f       	adc	r25, r25
    266c:	fc 01       	movw	r30, r24
    266e:	e1 50       	subi	r30, 0x01	; 1
    2670:	ff 4f       	sbci	r31, 0xFF	; 255
    2672:	20 81       	ld	r18, Z
    2674:	31 81       	ldd	r19, Z+1	; 0x01
    2676:	ca 01       	movw	r24, r20
    2678:	b9 01       	movw	r22, r18
    267a:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__udivmodhi4>
    267e:	00 97       	sbiw	r24, 0x00	; 0
    2680:	81 f4       	brne	.+32     	; 0x26a2 <OS_Long_Term+0x60>
		{
			Str_Array_Tasks[u8_Array_Index].Task_Status = READY;
    2682:	89 81       	ldd	r24, Y+1	; 0x01
    2684:	28 2f       	mov	r18, r24
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	c9 01       	movw	r24, r18
    268a:	88 0f       	add	r24, r24
    268c:	99 1f       	adc	r25, r25
    268e:	82 0f       	add	r24, r18
    2690:	93 1f       	adc	r25, r19
    2692:	01 96       	adiw	r24, 0x01	; 1
    2694:	88 0f       	add	r24, r24
    2696:	99 1f       	adc	r25, r25
    2698:	fc 01       	movw	r30, r24
    269a:	e4 50       	subi	r30, 0x04	; 4
    269c:	ff 4f       	sbci	r31, 0xFF	; 255
    269e:	10 82       	st	Z, r1
    26a0:	10 c0       	rjmp	.+32     	; 0x26c2 <OS_Long_Term+0x80>
		}
		/*if time counter didn't meet time perdiocity of function move it to waiting state*/
		else
		{
			Str_Array_Tasks[u8_Array_Index].Task_Status = WAITING;
    26a2:	89 81       	ldd	r24, Y+1	; 0x01
    26a4:	28 2f       	mov	r18, r24
    26a6:	30 e0       	ldi	r19, 0x00	; 0
    26a8:	c9 01       	movw	r24, r18
    26aa:	88 0f       	add	r24, r24
    26ac:	99 1f       	adc	r25, r25
    26ae:	82 0f       	add	r24, r18
    26b0:	93 1f       	adc	r25, r19
    26b2:	01 96       	adiw	r24, 0x01	; 1
    26b4:	88 0f       	add	r24, r24
    26b6:	99 1f       	adc	r25, r25
    26b8:	fc 01       	movw	r30, r24
    26ba:	e4 50       	subi	r30, 0x04	; 4
    26bc:	ff 4f       	sbci	r31, 0xFF	; 255
    26be:	82 e0       	ldi	r24, 0x02	; 2
    26c0:	80 83       	st	Z, r24
void OS_Long_Term(void)
{
	/*Looping index for searching for tasks */
	uint8 u8_Array_Index;
	/*looping to check for tasks that met their time period*/
	for(u8_Array_Index = 0 ;u8_Array_Index < u8_Tasks_Index ; u8_Array_Index++)
    26c2:	89 81       	ldd	r24, Y+1	; 0x01
    26c4:	8f 5f       	subi	r24, 0xFF	; 255
    26c6:	89 83       	std	Y+1, r24	; 0x01
    26c8:	90 91 f0 00 	lds	r25, 0x00F0
    26cc:	89 81       	ldd	r24, Y+1	; 0x01
    26ce:	89 17       	cp	r24, r25
    26d0:	08 f4       	brcc	.+2      	; 0x26d4 <OS_Long_Term+0x92>
    26d2:	be cf       	rjmp	.-132    	; 0x2650 <OS_Long_Term+0xe>
		else
		{
			Str_Array_Tasks[u8_Array_Index].Task_Status = WAITING;
		}
	}
	OS_TickCounter++;
    26d4:	80 91 dc 00 	lds	r24, 0x00DC
    26d8:	90 91 dd 00 	lds	r25, 0x00DD
    26dc:	01 96       	adiw	r24, 0x01	; 1
    26de:	90 93 dd 00 	sts	0x00DD, r25
    26e2:	80 93 dc 00 	sts	0x00DC, r24
}
    26e6:	0f 90       	pop	r0
    26e8:	cf 91       	pop	r28
    26ea:	df 91       	pop	r29
    26ec:	08 95       	ret

000026ee <__vector_10>:

//struct Timer0_config init={N_256,CTC_Normal};
static void (*OS_CallBackPtr_g)(void) = NULL;

ISR(TIMER0_COMP_vect)
{
    26ee:	1f 92       	push	r1
    26f0:	0f 92       	push	r0
    26f2:	0f b6       	in	r0, 0x3f	; 63
    26f4:	0f 92       	push	r0
    26f6:	11 24       	eor	r1, r1
    26f8:	2f 93       	push	r18
    26fa:	3f 93       	push	r19
    26fc:	4f 93       	push	r20
    26fe:	5f 93       	push	r21
    2700:	6f 93       	push	r22
    2702:	7f 93       	push	r23
    2704:	8f 93       	push	r24
    2706:	9f 93       	push	r25
    2708:	af 93       	push	r26
    270a:	bf 93       	push	r27
    270c:	ef 93       	push	r30
    270e:	ff 93       	push	r31
    2710:	df 93       	push	r29
    2712:	cf 93       	push	r28
    2714:	cd b7       	in	r28, 0x3d	; 61
    2716:	de b7       	in	r29, 0x3e	; 62
	if(OS_CallBackPtr_g != NULL)
    2718:	80 91 f1 00 	lds	r24, 0x00F1
    271c:	90 91 f2 00 	lds	r25, 0x00F2
    2720:	00 97       	sbiw	r24, 0x00	; 0
    2722:	29 f0       	breq	.+10     	; 0x272e <__vector_10+0x40>
	{
		OS_CallBackPtr_g();
    2724:	e0 91 f1 00 	lds	r30, 0x00F1
    2728:	f0 91 f2 00 	lds	r31, 0x00F2
    272c:	09 95       	icall
	}
}
    272e:	cf 91       	pop	r28
    2730:	df 91       	pop	r29
    2732:	ff 91       	pop	r31
    2734:	ef 91       	pop	r30
    2736:	bf 91       	pop	r27
    2738:	af 91       	pop	r26
    273a:	9f 91       	pop	r25
    273c:	8f 91       	pop	r24
    273e:	7f 91       	pop	r23
    2740:	6f 91       	pop	r22
    2742:	5f 91       	pop	r21
    2744:	4f 91       	pop	r20
    2746:	3f 91       	pop	r19
    2748:	2f 91       	pop	r18
    274a:	0f 90       	pop	r0
    274c:	0f be       	out	0x3f, r0	; 63
    274e:	0f 90       	pop	r0
    2750:	1f 90       	pop	r1
    2752:	18 95       	reti

00002754 <timer0_init>:
void timer0_init(void)
{
    2754:	df 93       	push	r29
    2756:	cf 93       	push	r28
    2758:	cd b7       	in	r28, 0x3d	; 61
    275a:	de b7       	in	r29, 0x3e	; 62
	TCCR0=0;
    275c:	e3 e5       	ldi	r30, 0x53	; 83
    275e:	f0 e0       	ldi	r31, 0x00	; 0
    2760:	10 82       	st	Z, r1
	TCNT0=0;
    2762:	e2 e5       	ldi	r30, 0x52	; 82
    2764:	f0 e0       	ldi	r31, 0x00	; 0
    2766:	10 82       	st	Z, r1
	//TCCR0|=(T0_config->PRE_SCALER)|(T0_config->Wave_generation_mode);
	Set_Bit(TIMSK,OCIE0);
    2768:	a9 e5       	ldi	r26, 0x59	; 89
    276a:	b0 e0       	ldi	r27, 0x00	; 0
    276c:	e9 e5       	ldi	r30, 0x59	; 89
    276e:	f0 e0       	ldi	r31, 0x00	; 0
    2770:	80 81       	ld	r24, Z
    2772:	82 60       	ori	r24, 0x02	; 2
    2774:	8c 93       	st	X, r24
	TCCR0|=(N_256)|(CTC_Normal);
    2776:	a3 e5       	ldi	r26, 0x53	; 83
    2778:	b0 e0       	ldi	r27, 0x00	; 0
    277a:	e3 e5       	ldi	r30, 0x53	; 83
    277c:	f0 e0       	ldi	r31, 0x00	; 0
    277e:	80 81       	ld	r24, Z
    2780:	8c 60       	ori	r24, 0x0C	; 12
    2782:	8c 93       	st	X, r24
}
    2784:	cf 91       	pop	r28
    2786:	df 91       	pop	r29
    2788:	08 95       	ret

0000278a <Set_OCR_Value>:
void Set_OCR_Value(uint8 Tick_Time_ms)
{
    278a:	df 93       	push	r29
    278c:	cf 93       	push	r28
    278e:	00 d0       	rcall	.+0      	; 0x2790 <Set_OCR_Value+0x6>
    2790:	0f 92       	push	r0
    2792:	cd b7       	in	r28, 0x3d	; 61
    2794:	de b7       	in	r29, 0x3e	; 62
    2796:	89 83       	std	Y+1, r24	; 0x01
	switch(Tick_Time_ms)
    2798:	89 81       	ldd	r24, Y+1	; 0x01
    279a:	28 2f       	mov	r18, r24
    279c:	30 e0       	ldi	r19, 0x00	; 0
    279e:	3b 83       	std	Y+3, r19	; 0x03
    27a0:	2a 83       	std	Y+2, r18	; 0x02
    27a2:	8a 81       	ldd	r24, Y+2	; 0x02
    27a4:	9b 81       	ldd	r25, Y+3	; 0x03
    27a6:	84 30       	cpi	r24, 0x04	; 4
    27a8:	91 05       	cpc	r25, r1
    27aa:	c9 f1       	breq	.+114    	; 0x281e <Set_OCR_Value+0x94>
    27ac:	2a 81       	ldd	r18, Y+2	; 0x02
    27ae:	3b 81       	ldd	r19, Y+3	; 0x03
    27b0:	25 30       	cpi	r18, 0x05	; 5
    27b2:	31 05       	cpc	r19, r1
    27b4:	84 f4       	brge	.+32     	; 0x27d6 <Set_OCR_Value+0x4c>
    27b6:	8a 81       	ldd	r24, Y+2	; 0x02
    27b8:	9b 81       	ldd	r25, Y+3	; 0x03
    27ba:	82 30       	cpi	r24, 0x02	; 2
    27bc:	91 05       	cpc	r25, r1
    27be:	29 f1       	breq	.+74     	; 0x280a <Set_OCR_Value+0x80>
    27c0:	2a 81       	ldd	r18, Y+2	; 0x02
    27c2:	3b 81       	ldd	r19, Y+3	; 0x03
    27c4:	23 30       	cpi	r18, 0x03	; 3
    27c6:	31 05       	cpc	r19, r1
    27c8:	2c f5       	brge	.+74     	; 0x2814 <Set_OCR_Value+0x8a>
    27ca:	8a 81       	ldd	r24, Y+2	; 0x02
    27cc:	9b 81       	ldd	r25, Y+3	; 0x03
    27ce:	81 30       	cpi	r24, 0x01	; 1
    27d0:	91 05       	cpc	r25, r1
    27d2:	b1 f0       	breq	.+44     	; 0x2800 <Set_OCR_Value+0x76>
    27d4:	3d c0       	rjmp	.+122    	; 0x2850 <Set_OCR_Value+0xc6>
    27d6:	2a 81       	ldd	r18, Y+2	; 0x02
    27d8:	3b 81       	ldd	r19, Y+3	; 0x03
    27da:	26 30       	cpi	r18, 0x06	; 6
    27dc:	31 05       	cpc	r19, r1
    27de:	49 f1       	breq	.+82     	; 0x2832 <Set_OCR_Value+0xa8>
    27e0:	8a 81       	ldd	r24, Y+2	; 0x02
    27e2:	9b 81       	ldd	r25, Y+3	; 0x03
    27e4:	86 30       	cpi	r24, 0x06	; 6
    27e6:	91 05       	cpc	r25, r1
    27e8:	fc f0       	brlt	.+62     	; 0x2828 <Set_OCR_Value+0x9e>
    27ea:	2a 81       	ldd	r18, Y+2	; 0x02
    27ec:	3b 81       	ldd	r19, Y+3	; 0x03
    27ee:	27 30       	cpi	r18, 0x07	; 7
    27f0:	31 05       	cpc	r19, r1
    27f2:	21 f1       	breq	.+72     	; 0x283c <Set_OCR_Value+0xb2>
    27f4:	8a 81       	ldd	r24, Y+2	; 0x02
    27f6:	9b 81       	ldd	r25, Y+3	; 0x03
    27f8:	88 30       	cpi	r24, 0x08	; 8
    27fa:	91 05       	cpc	r25, r1
    27fc:	21 f1       	breq	.+72     	; 0x2846 <Set_OCR_Value+0xbc>
    27fe:	28 c0       	rjmp	.+80     	; 0x2850 <Set_OCR_Value+0xc6>
	{
	case 1u:
		OCR0=31u;
    2800:	ec e5       	ldi	r30, 0x5C	; 92
    2802:	f0 e0       	ldi	r31, 0x00	; 0
    2804:	8f e1       	ldi	r24, 0x1F	; 31
    2806:	80 83       	st	Z, r24
    2808:	27 c0       	rjmp	.+78     	; 0x2858 <Set_OCR_Value+0xce>
		break;
	case 2u:
		OCR0=62u;
    280a:	ec e5       	ldi	r30, 0x5C	; 92
    280c:	f0 e0       	ldi	r31, 0x00	; 0
    280e:	8e e3       	ldi	r24, 0x3E	; 62
    2810:	80 83       	st	Z, r24
    2812:	22 c0       	rjmp	.+68     	; 0x2858 <Set_OCR_Value+0xce>
		break;
	case 3u:
		OCR0=94u;
    2814:	ec e5       	ldi	r30, 0x5C	; 92
    2816:	f0 e0       	ldi	r31, 0x00	; 0
    2818:	8e e5       	ldi	r24, 0x5E	; 94
    281a:	80 83       	st	Z, r24
    281c:	1d c0       	rjmp	.+58     	; 0x2858 <Set_OCR_Value+0xce>
		break;
	case 4u:
		OCR0=125u;
    281e:	ec e5       	ldi	r30, 0x5C	; 92
    2820:	f0 e0       	ldi	r31, 0x00	; 0
    2822:	8d e7       	ldi	r24, 0x7D	; 125
    2824:	80 83       	st	Z, r24
    2826:	18 c0       	rjmp	.+48     	; 0x2858 <Set_OCR_Value+0xce>
		break;
	case 5u:
		OCR0=156u;
    2828:	ec e5       	ldi	r30, 0x5C	; 92
    282a:	f0 e0       	ldi	r31, 0x00	; 0
    282c:	8c e9       	ldi	r24, 0x9C	; 156
    282e:	80 83       	st	Z, r24
    2830:	13 c0       	rjmp	.+38     	; 0x2858 <Set_OCR_Value+0xce>
		break;
	case 6u:
		OCR0=187u;
    2832:	ec e5       	ldi	r30, 0x5C	; 92
    2834:	f0 e0       	ldi	r31, 0x00	; 0
    2836:	8b eb       	ldi	r24, 0xBB	; 187
    2838:	80 83       	st	Z, r24
    283a:	0e c0       	rjmp	.+28     	; 0x2858 <Set_OCR_Value+0xce>
		break;
	case 7u:
		OCR0=219u;
    283c:	ec e5       	ldi	r30, 0x5C	; 92
    283e:	f0 e0       	ldi	r31, 0x00	; 0
    2840:	8b ed       	ldi	r24, 0xDB	; 219
    2842:	80 83       	st	Z, r24
    2844:	09 c0       	rjmp	.+18     	; 0x2858 <Set_OCR_Value+0xce>
		break;
	case 8u:
		OCR0=250u;
    2846:	ec e5       	ldi	r30, 0x5C	; 92
    2848:	f0 e0       	ldi	r31, 0x00	; 0
    284a:	8a ef       	ldi	r24, 0xFA	; 250
    284c:	80 83       	st	Z, r24
    284e:	04 c0       	rjmp	.+8      	; 0x2858 <Set_OCR_Value+0xce>
		break;
	default :
		OCR0=250u;
    2850:	ec e5       	ldi	r30, 0x5C	; 92
    2852:	f0 e0       	ldi	r31, 0x00	; 0
    2854:	8a ef       	ldi	r24, 0xFA	; 250
    2856:	80 83       	st	Z, r24
		break;
	}
}
    2858:	0f 90       	pop	r0
    285a:	0f 90       	pop	r0
    285c:	0f 90       	pop	r0
    285e:	cf 91       	pop	r28
    2860:	df 91       	pop	r29
    2862:	08 95       	ret

00002864 <timer0_Deinit>:
void timer0_Deinit(void)
{
    2864:	df 93       	push	r29
    2866:	cf 93       	push	r28
    2868:	cd b7       	in	r28, 0x3d	; 61
    286a:	de b7       	in	r29, 0x3e	; 62
	Clear_Bit(TCCR0,CS00);
    286c:	a3 e5       	ldi	r26, 0x53	; 83
    286e:	b0 e0       	ldi	r27, 0x00	; 0
    2870:	e3 e5       	ldi	r30, 0x53	; 83
    2872:	f0 e0       	ldi	r31, 0x00	; 0
    2874:	80 81       	ld	r24, Z
    2876:	8e 7f       	andi	r24, 0xFE	; 254
    2878:	8c 93       	st	X, r24
	Clear_Bit(TCCR0,CS01);
    287a:	a3 e5       	ldi	r26, 0x53	; 83
    287c:	b0 e0       	ldi	r27, 0x00	; 0
    287e:	e3 e5       	ldi	r30, 0x53	; 83
    2880:	f0 e0       	ldi	r31, 0x00	; 0
    2882:	80 81       	ld	r24, Z
    2884:	8d 7f       	andi	r24, 0xFD	; 253
    2886:	8c 93       	st	X, r24
	Clear_Bit(TCCR0,CS02);
    2888:	a3 e5       	ldi	r26, 0x53	; 83
    288a:	b0 e0       	ldi	r27, 0x00	; 0
    288c:	e3 e5       	ldi	r30, 0x53	; 83
    288e:	f0 e0       	ldi	r31, 0x00	; 0
    2890:	80 81       	ld	r24, Z
    2892:	8b 7f       	andi	r24, 0xFB	; 251
    2894:	8c 93       	st	X, r24
	OCR0=0;
    2896:	ec e5       	ldi	r30, 0x5C	; 92
    2898:	f0 e0       	ldi	r31, 0x00	; 0
    289a:	10 82       	st	Z, r1
}
    289c:	cf 91       	pop	r28
    289e:	df 91       	pop	r29
    28a0:	08 95       	ret

000028a2 <global_interrupt_enable>:
void global_interrupt_enable(void)
{
    28a2:	df 93       	push	r29
    28a4:	cf 93       	push	r28
    28a6:	cd b7       	in	r28, 0x3d	; 61
    28a8:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(SREG,I);
    28aa:	af e5       	ldi	r26, 0x5F	; 95
    28ac:	b0 e0       	ldi	r27, 0x00	; 0
    28ae:	ef e5       	ldi	r30, 0x5F	; 95
    28b0:	f0 e0       	ldi	r31, 0x00	; 0
    28b2:	80 81       	ld	r24, Z
    28b4:	80 68       	ori	r24, 0x80	; 128
    28b6:	8c 93       	st	X, r24
}
    28b8:	cf 91       	pop	r28
    28ba:	df 91       	pop	r29
    28bc:	08 95       	ret

000028be <global_interrupt_disable>:
void global_interrupt_disable(void)
{
    28be:	df 93       	push	r29
    28c0:	cf 93       	push	r28
    28c2:	cd b7       	in	r28, 0x3d	; 61
    28c4:	de b7       	in	r29, 0x3e	; 62
	Clear_Bit(SREG,I);
    28c6:	af e5       	ldi	r26, 0x5F	; 95
    28c8:	b0 e0       	ldi	r27, 0x00	; 0
    28ca:	ef e5       	ldi	r30, 0x5F	; 95
    28cc:	f0 e0       	ldi	r31, 0x00	; 0
    28ce:	80 81       	ld	r24, Z
    28d0:	8f 77       	andi	r24, 0x7F	; 127
    28d2:	8c 93       	st	X, r24
}
    28d4:	cf 91       	pop	r28
    28d6:	df 91       	pop	r29
    28d8:	08 95       	ret

000028da <timer_delay>:
void timer_delay(uint32 delay)
{
    28da:	df 93       	push	r29
    28dc:	cf 93       	push	r28
    28de:	cd b7       	in	r28, 0x3d	; 61
    28e0:	de b7       	in	r29, 0x3e	; 62
    28e2:	28 97       	sbiw	r28, 0x08	; 8
    28e4:	0f b6       	in	r0, 0x3f	; 63
    28e6:	f8 94       	cli
    28e8:	de bf       	out	0x3e, r29	; 62
    28ea:	0f be       	out	0x3f, r0	; 63
    28ec:	cd bf       	out	0x3d, r28	; 61
    28ee:	6d 83       	std	Y+5, r22	; 0x05
    28f0:	7e 83       	std	Y+6, r23	; 0x06
    28f2:	8f 83       	std	Y+7, r24	; 0x07
    28f4:	98 87       	std	Y+8, r25	; 0x08
	uint32 i;
	TCNT0=0;
    28f6:	e2 e5       	ldi	r30, 0x52	; 82
    28f8:	f0 e0       	ldi	r31, 0x00	; 0
    28fa:	10 82       	st	Z, r1
	for(i=0;i<(delay);i++)
    28fc:	19 82       	std	Y+1, r1	; 0x01
    28fe:	1a 82       	std	Y+2, r1	; 0x02
    2900:	1b 82       	std	Y+3, r1	; 0x03
    2902:	1c 82       	std	Y+4, r1	; 0x04
    2904:	1b c0       	rjmp	.+54     	; 0x293c <timer_delay+0x62>
	{
		while(!(TIFR&(1<<OCF0)));
    2906:	e8 e5       	ldi	r30, 0x58	; 88
    2908:	f0 e0       	ldi	r31, 0x00	; 0
    290a:	80 81       	ld	r24, Z
    290c:	88 2f       	mov	r24, r24
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	82 70       	andi	r24, 0x02	; 2
    2912:	90 70       	andi	r25, 0x00	; 0
    2914:	00 97       	sbiw	r24, 0x00	; 0
    2916:	b9 f3       	breq	.-18     	; 0x2906 <timer_delay+0x2c>
		Set_Bit(TIFR,OCF0);
    2918:	a8 e5       	ldi	r26, 0x58	; 88
    291a:	b0 e0       	ldi	r27, 0x00	; 0
    291c:	e8 e5       	ldi	r30, 0x58	; 88
    291e:	f0 e0       	ldi	r31, 0x00	; 0
    2920:	80 81       	ld	r24, Z
    2922:	82 60       	ori	r24, 0x02	; 2
    2924:	8c 93       	st	X, r24
}
void timer_delay(uint32 delay)
{
	uint32 i;
	TCNT0=0;
	for(i=0;i<(delay);i++)
    2926:	89 81       	ldd	r24, Y+1	; 0x01
    2928:	9a 81       	ldd	r25, Y+2	; 0x02
    292a:	ab 81       	ldd	r26, Y+3	; 0x03
    292c:	bc 81       	ldd	r27, Y+4	; 0x04
    292e:	01 96       	adiw	r24, 0x01	; 1
    2930:	a1 1d       	adc	r26, r1
    2932:	b1 1d       	adc	r27, r1
    2934:	89 83       	std	Y+1, r24	; 0x01
    2936:	9a 83       	std	Y+2, r25	; 0x02
    2938:	ab 83       	std	Y+3, r26	; 0x03
    293a:	bc 83       	std	Y+4, r27	; 0x04
    293c:	29 81       	ldd	r18, Y+1	; 0x01
    293e:	3a 81       	ldd	r19, Y+2	; 0x02
    2940:	4b 81       	ldd	r20, Y+3	; 0x03
    2942:	5c 81       	ldd	r21, Y+4	; 0x04
    2944:	8d 81       	ldd	r24, Y+5	; 0x05
    2946:	9e 81       	ldd	r25, Y+6	; 0x06
    2948:	af 81       	ldd	r26, Y+7	; 0x07
    294a:	b8 85       	ldd	r27, Y+8	; 0x08
    294c:	28 17       	cp	r18, r24
    294e:	39 07       	cpc	r19, r25
    2950:	4a 07       	cpc	r20, r26
    2952:	5b 07       	cpc	r21, r27
    2954:	c0 f2       	brcs	.-80     	; 0x2906 <timer_delay+0x2c>
	{
		while(!(TIFR&(1<<OCF0)));
		Set_Bit(TIFR,OCF0);
	}
}
    2956:	28 96       	adiw	r28, 0x08	; 8
    2958:	0f b6       	in	r0, 0x3f	; 63
    295a:	f8 94       	cli
    295c:	de bf       	out	0x3e, r29	; 62
    295e:	0f be       	out	0x3f, r0	; 63
    2960:	cd bf       	out	0x3d, r28	; 61
    2962:	cf 91       	pop	r28
    2964:	df 91       	pop	r29
    2966:	08 95       	ret

00002968 <OS_SetCallBack>:
void OS_SetCallBack(void(*a_ptr)(void))
{
    2968:	df 93       	push	r29
    296a:	cf 93       	push	r28
    296c:	00 d0       	rcall	.+0      	; 0x296e <OS_SetCallBack+0x6>
    296e:	cd b7       	in	r28, 0x3d	; 61
    2970:	de b7       	in	r29, 0x3e	; 62
    2972:	9a 83       	std	Y+2, r25	; 0x02
    2974:	89 83       	std	Y+1, r24	; 0x01
	OS_CallBackPtr_g=a_ptr;
    2976:	89 81       	ldd	r24, Y+1	; 0x01
    2978:	9a 81       	ldd	r25, Y+2	; 0x02
    297a:	90 93 f2 00 	sts	0x00F2, r25
    297e:	80 93 f1 00 	sts	0x00F1, r24
}
    2982:	0f 90       	pop	r0
    2984:	0f 90       	pop	r0
    2986:	cf 91       	pop	r28
    2988:	df 91       	pop	r29
    298a:	08 95       	ret

0000298c <Infotainment_Start>:
 * OUTPUTS 		 : void
 *
 * Return		 : void
 **************************************************************************/
void Infotainment_Start(void) 
{
    298c:	df 93       	push	r29
    298e:	cf 93       	push	r28
    2990:	cd b7       	in	r28, 0x3d	; 61
    2992:	de b7       	in	r29, 0x3e	; 62
	static uint8 result =0;
	sampling_rate=2;
    2994:	82 e0       	ldi	r24, 0x02	; 2
    2996:	80 93 38 01 	sts	0x0138, r24
	Infotainment_Result_g=0;
    299a:	10 92 f5 00 	sts	0x00F5, r1
	Infotainment_Question_Index_g=0;
    299e:	10 92 f6 00 	sts	0x00F6, r1
	Infotainment_Score = 0;
    29a2:	10 92 f7 00 	sts	0x00F7, r1
	LCD_clearScreen();
    29a6:	0e 94 6f 11 	call	0x22de	; 0x22de <LCD_clearScreen>
	LCD_displayString("Want play game?");
    29aa:	82 ea       	ldi	r24, 0xA2	; 162
    29ac:	90 e0       	ldi	r25, 0x00	; 0
    29ae:	0e 94 c8 10 	call	0x2190	; 0x2190 <LCD_displayString>
	result = key_getpressed();
    29b2:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <key_getpressed>
    29b6:	80 93 f8 00 	sts	0x00F8, r24
	if (result == YES)
    29ba:	80 91 f8 00 	lds	r24, 0x00F8
    29be:	81 30       	cpi	r24, 0x01	; 1
    29c0:	31 f4       	brne	.+12     	; 0x29ce <Infotainment_Start+0x42>
	{
		Infotainment_NewDataFlag_g=1 ;
    29c2:	81 e0       	ldi	r24, 0x01	; 1
    29c4:	80 93 f4 00 	sts	0x00F4, r24
		Infotainment_Status = INFOTAINMENT_QUESTION;
    29c8:	81 e0       	ldi	r24, 0x01	; 1
    29ca:	80 93 f3 00 	sts	0x00F3, r24
	}	
	else if (result == NO )
	{
		/*nothing */
	}	
}
    29ce:	cf 91       	pop	r28
    29d0:	df 91       	pop	r29
    29d2:	08 95       	ret

000029d4 <Infotainment_PrintQuestion>:
 * OUTPUTS 		 : void
 *
 * Return		 : void
 **************************************************************************/
void Infotainment_PrintQuestion (void)
{	
    29d4:	df 93       	push	r29
    29d6:	cf 93       	push	r28
    29d8:	cd b7       	in	r28, 0x3d	; 61
    29da:	de b7       	in	r29, 0x3e	; 62

	if (Infotainment_NewDataFlag_g==1u)
    29dc:	80 91 f4 00 	lds	r24, 0x00F4
    29e0:	81 30       	cpi	r24, 0x01	; 1
    29e2:	b9 f4       	brne	.+46     	; 0x2a12 <Infotainment_PrintQuestion+0x3e>
	{
		LCD_clearScreen();
    29e4:	0e 94 6f 11 	call	0x22de	; 0x22de <LCD_clearScreen>
		LCD_displayString(Infotainment_Questions_arr[Infotainment_Question_Index_g]);
    29e8:	80 91 f6 00 	lds	r24, 0x00F6
    29ec:	88 2f       	mov	r24, r24
    29ee:	90 e0       	ldi	r25, 0x00	; 0
    29f0:	88 0f       	add	r24, r24
    29f2:	99 1f       	adc	r25, r25
    29f4:	fc 01       	movw	r30, r24
    29f6:	e0 52       	subi	r30, 0x20	; 32
    29f8:	ff 4f       	sbci	r31, 0xFF	; 255
    29fa:	80 81       	ld	r24, Z
    29fc:	91 81       	ldd	r25, Z+1	; 0x01
    29fe:	0e 94 c8 10 	call	0x2190	; 0x2190 <LCD_displayString>
		Infotainment_Question_Index_g ++;
    2a02:	80 91 f6 00 	lds	r24, 0x00F6
    2a06:	8f 5f       	subi	r24, 0xFF	; 255
    2a08:	80 93 f6 00 	sts	0x00F6, r24
		Infotainment_Status = INFOTAINMENT_GET_ANSWER ;
    2a0c:	82 e0       	ldi	r24, 0x02	; 2
    2a0e:	80 93 f3 00 	sts	0x00F3, r24

	else 
	{
		/*Do nothing*/
	}	
}
    2a12:	cf 91       	pop	r28
    2a14:	df 91       	pop	r29
    2a16:	08 95       	ret

00002a18 <Infotainment_GetAnswer>:
 * OUTPUTS 		 : void
 *
 * Return		 : void
 **************************************************************************/
void Infotainment_GetAnswer (void)
{
    2a18:	df 93       	push	r29
    2a1a:	cf 93       	push	r28
    2a1c:	0f 92       	push	r0
    2a1e:	cd b7       	in	r28, 0x3d	; 61
    2a20:	de b7       	in	r29, 0x3e	; 62
	uint8 result ;

	result = key_getpressed();
    2a22:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <key_getpressed>
    2a26:	89 83       	std	Y+1, r24	; 0x01
	if(result==1)
    2a28:	89 81       	ldd	r24, Y+1	; 0x01
    2a2a:	81 30       	cpi	r24, 0x01	; 1
    2a2c:	69 f4       	brne	.+26     	; 0x2a48 <Infotainment_GetAnswer+0x30>
	{
		DIO_SetPinDirection(PinB4,LOW);
    2a2e:	8c e0       	ldi	r24, 0x0C	; 12
    2a30:	60 e0       	ldi	r22, 0x00	; 0
    2a32:	0e 94 78 07 	call	0xef0	; 0xef0 <DIO_SetPinDirection>
		Toggle_Bit(PORTB,(PinB4-8));
    2a36:	a8 e3       	ldi	r26, 0x38	; 56
    2a38:	b0 e0       	ldi	r27, 0x00	; 0
    2a3a:	e8 e3       	ldi	r30, 0x38	; 56
    2a3c:	f0 e0       	ldi	r31, 0x00	; 0
    2a3e:	90 81       	ld	r25, Z
    2a40:	80 e1       	ldi	r24, 0x10	; 16
    2a42:	89 27       	eor	r24, r25
    2a44:	8c 93       	st	X, r24
    2a46:	04 c0       	rjmp	.+8      	; 0x2a50 <Infotainment_GetAnswer+0x38>
	}
	else
	{
		//DIO_SetPinDirection(PinB4,LOW);
		DIO_WritePin(PinB4,LOW);
    2a48:	8c e0       	ldi	r24, 0x0C	; 12
    2a4a:	60 e0       	ldi	r22, 0x00	; 0
    2a4c:	0e 94 12 06 	call	0xc24	; 0xc24 <DIO_WritePin>
	}
	DIO_SetPinDirection(PinB0,OUTPUT);
    2a50:	88 e0       	ldi	r24, 0x08	; 8
    2a52:	61 e0       	ldi	r22, 0x01	; 1
    2a54:	0e 94 78 07 	call	0xef0	; 0xef0 <DIO_SetPinDirection>
	if (result == YES)
    2a58:	89 81       	ldd	r24, Y+1	; 0x01
    2a5a:	81 30       	cpi	r24, 0x01	; 1
    2a5c:	71 f4       	brne	.+28     	; 0x2a7a <Infotainment_GetAnswer+0x62>
	{
		DIO_WritePin(PinB0,HIGH);
    2a5e:	88 e0       	ldi	r24, 0x08	; 8
    2a60:	61 e0       	ldi	r22, 0x01	; 1
    2a62:	0e 94 12 06 	call	0xc24	; 0xc24 <DIO_WritePin>
		Infotainment_Result_g = 'Y' ;
    2a66:	89 e5       	ldi	r24, 0x59	; 89
    2a68:	80 93 f5 00 	sts	0x00F5, r24
		Infotainment_NewDataFlag_g = 1u;
    2a6c:	81 e0       	ldi	r24, 0x01	; 1
    2a6e:	80 93 f4 00 	sts	0x00F4, r24
		Infotainment_Status = INFOTAINMENT_SCORE ;
    2a72:	83 e0       	ldi	r24, 0x03	; 3
    2a74:	80 93 f3 00 	sts	0x00F3, r24
    2a78:	0c c0       	rjmp	.+24     	; 0x2a92 <Infotainment_GetAnswer+0x7a>
	}
	else if (result == NO)
    2a7a:	89 81       	ldd	r24, Y+1	; 0x01
    2a7c:	89 30       	cpi	r24, 0x09	; 9
    2a7e:	49 f4       	brne	.+18     	; 0x2a92 <Infotainment_GetAnswer+0x7a>
	{
		Infotainment_Result_g = 'N' ;
    2a80:	8e e4       	ldi	r24, 0x4E	; 78
    2a82:	80 93 f5 00 	sts	0x00F5, r24
		Infotainment_NewDataFlag_g = 1u;
    2a86:	81 e0       	ldi	r24, 0x01	; 1
    2a88:	80 93 f4 00 	sts	0x00F4, r24
		Infotainment_Status = INFOTAINMENT_SCORE ;
    2a8c:	83 e0       	ldi	r24, 0x03	; 3
    2a8e:	80 93 f3 00 	sts	0x00F3, r24
	else 
	{
		//Infotainment_NewDataFlag_g = 0u;
	}

}
    2a92:	0f 90       	pop	r0
    2a94:	cf 91       	pop	r28
    2a96:	df 91       	pop	r29
    2a98:	08 95       	ret

00002a9a <Infotainment_ScoreDisplay>:
 * OUTPUTS 		 : void
 *
 * Return		 : void
 **************************************************************************/
void Infotainment_ScoreDisplay (void)
{
    2a9a:	df 93       	push	r29
    2a9c:	cf 93       	push	r28
    2a9e:	cd b7       	in	r28, 0x3d	; 61
    2aa0:	de b7       	in	r29, 0x3e	; 62


	if (Infotainment_Result_g == Infotainment_Answers_arr[Infotainment_Question_Index_g -1])
    2aa2:	80 91 f6 00 	lds	r24, 0x00F6
    2aa6:	88 2f       	mov	r24, r24
    2aa8:	90 e0       	ldi	r25, 0x00	; 0
    2aaa:	01 97       	sbiw	r24, 0x01	; 1
    2aac:	fc 01       	movw	r30, r24
    2aae:	e5 51       	subi	r30, 0x15	; 21
    2ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab2:	90 81       	ld	r25, Z
    2ab4:	80 91 f5 00 	lds	r24, 0x00F5
    2ab8:	98 17       	cp	r25, r24
    2aba:	79 f4       	brne	.+30     	; 0x2ada <Infotainment_ScoreDisplay+0x40>
	{
		Infotainment_Score ++ ;
    2abc:	80 91 f7 00 	lds	r24, 0x00F7
    2ac0:	8f 5f       	subi	r24, 0xFF	; 255
    2ac2:	80 93 f7 00 	sts	0x00F7, r24
		LCD_clearScreen();
    2ac6:	0e 94 6f 11 	call	0x22de	; 0x22de <LCD_clearScreen>
		LCD_displayString("Correct:)");
    2aca:	82 eb       	ldi	r24, 0xB2	; 178
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	0e 94 c8 10 	call	0x2190	; 0x2190 <LCD_displayString>
		Infotainment_NewDataFlag_g = 1u;
    2ad2:	81 e0       	ldi	r24, 0x01	; 1
    2ad4:	80 93 f4 00 	sts	0x00F4, r24
    2ad8:	09 c0       	rjmp	.+18     	; 0x2aec <Infotainment_ScoreDisplay+0x52>
	}
	else
	{
		LCD_clearScreen();
    2ada:	0e 94 6f 11 	call	0x22de	; 0x22de <LCD_clearScreen>
		LCD_displayString("Wrong :(");
    2ade:	8c eb       	ldi	r24, 0xBC	; 188
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	0e 94 c8 10 	call	0x2190	; 0x2190 <LCD_displayString>
		Infotainment_NewDataFlag_g = 1u;
    2ae6:	81 e0       	ldi	r24, 0x01	; 1
    2ae8:	80 93 f4 00 	sts	0x00F4, r24
	}
	if (Infotainment_Question_Index_g == INFOTAINMENT_NUMBER_OF_QUESTIONS)
    2aec:	80 91 f6 00 	lds	r24, 0x00F6
    2af0:	85 30       	cpi	r24, 0x05	; 5
    2af2:	21 f4       	brne	.+8      	; 0x2afc <Infotainment_ScoreDisplay+0x62>
	{
		Infotainment_Status = INFOTAINMENT_FINAL ;
    2af4:	84 e0       	ldi	r24, 0x04	; 4
    2af6:	80 93 f3 00 	sts	0x00F3, r24
    2afa:	07 c0       	rjmp	.+14     	; 0x2b0a <Infotainment_ScoreDisplay+0x70>
	}
	else if (Infotainment_Question_Index_g < INFOTAINMENT_NUMBER_OF_QUESTIONS)
    2afc:	80 91 f6 00 	lds	r24, 0x00F6
    2b00:	85 30       	cpi	r24, 0x05	; 5
    2b02:	18 f4       	brcc	.+6      	; 0x2b0a <Infotainment_ScoreDisplay+0x70>
	{
		Infotainment_Status = INFOTAINMENT_QUESTION ;
    2b04:	81 e0       	ldi	r24, 0x01	; 1
    2b06:	80 93 f3 00 	sts	0x00F3, r24
	}
}
    2b0a:	cf 91       	pop	r28
    2b0c:	df 91       	pop	r29
    2b0e:	08 95       	ret

00002b10 <Infotainment_FinalScore>:
 * OUTPUTS 		 : void
 *
 * Return		 : void
 **************************************************************************/
void Infotainment_FinalScore(void)
{
    2b10:	df 93       	push	r29
    2b12:	cf 93       	push	r28
    2b14:	cd b7       	in	r28, 0x3d	; 61
    2b16:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    2b18:	0e 94 6f 11 	call	0x22de	; 0x22de <LCD_clearScreen>
	LCD_displayString("Final Score = ");
    2b1c:	85 ec       	ldi	r24, 0xC5	; 197
    2b1e:	90 e0       	ldi	r25, 0x00	; 0
    2b20:	0e 94 c8 10 	call	0x2190	; 0x2190 <LCD_displayString>
	LCD_intgerToString(Infotainment_Score);
    2b24:	80 91 f7 00 	lds	r24, 0x00F7
    2b28:	88 2f       	mov	r24, r24
    2b2a:	90 e0       	ldi	r25, 0x00	; 0
    2b2c:	0e 94 4c 11 	call	0x2298	; 0x2298 <LCD_intgerToString>
	Infotainment_NewDataFlag_g = 0u;
    2b30:	10 92 f4 00 	sts	0x00F4, r1

	Infotainment_Status = INFOTAINMENT_IDLE ;
    2b34:	10 92 f3 00 	sts	0x00F3, r1
}
    2b38:	cf 91       	pop	r28
    2b3a:	df 91       	pop	r29
    2b3c:	08 95       	ret

00002b3e <keypad_init>:
 * OUTPUTS 		 : void
 *
 * Return		 : void
 **************************************************************************/
void keypad_init(void)
{
    2b3e:	df 93       	push	r29
    2b40:	cf 93       	push	r28
    2b42:	cd b7       	in	r28, 0x3d	; 61
    2b44:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinDirection(PinC2,INPUT);
    2b46:	82 e1       	ldi	r24, 0x12	; 18
    2b48:	60 e0       	ldi	r22, 0x00	; 0
    2b4a:	0e 94 78 07 	call	0xef0	; 0xef0 <DIO_SetPinDirection>
	DIO_SetPinDirection(PinC3,INPUT);
    2b4e:	83 e1       	ldi	r24, 0x13	; 19
    2b50:	60 e0       	ldi	r22, 0x00	; 0
    2b52:	0e 94 78 07 	call	0xef0	; 0xef0 <DIO_SetPinDirection>
	DIO_SetPinDirection(PinC4,INPUT);
    2b56:	84 e1       	ldi	r24, 0x14	; 20
    2b58:	60 e0       	ldi	r22, 0x00	; 0
    2b5a:	0e 94 78 07 	call	0xef0	; 0xef0 <DIO_SetPinDirection>

	DIO_WritePin(PinC2,HIGH);
    2b5e:	82 e1       	ldi	r24, 0x12	; 18
    2b60:	61 e0       	ldi	r22, 0x01	; 1
    2b62:	0e 94 12 06 	call	0xc24	; 0xc24 <DIO_WritePin>
	DIO_WritePin(PinC3,HIGH);
    2b66:	83 e1       	ldi	r24, 0x13	; 19
    2b68:	61 e0       	ldi	r22, 0x01	; 1
    2b6a:	0e 94 12 06 	call	0xc24	; 0xc24 <DIO_WritePin>
	DIO_WritePin(PinC4,HIGH);
    2b6e:	84 e1       	ldi	r24, 0x14	; 20
    2b70:	61 e0       	ldi	r22, 0x01	; 1
    2b72:	0e 94 12 06 	call	0xc24	; 0xc24 <DIO_WritePin>

	DIO_SetPinDirection(PinC5,OUTPUT);
    2b76:	85 e1       	ldi	r24, 0x15	; 21
    2b78:	61 e0       	ldi	r22, 0x01	; 1
    2b7a:	0e 94 78 07 	call	0xef0	; 0xef0 <DIO_SetPinDirection>
	DIO_SetPinDirection(PinC6,OUTPUT);
    2b7e:	86 e1       	ldi	r24, 0x16	; 22
    2b80:	61 e0       	ldi	r22, 0x01	; 1
    2b82:	0e 94 78 07 	call	0xef0	; 0xef0 <DIO_SetPinDirection>
	DIO_SetPinDirection(PinC7,OUTPUT);
    2b86:	87 e1       	ldi	r24, 0x17	; 23
    2b88:	61 e0       	ldi	r22, 0x01	; 1
    2b8a:	0e 94 78 07 	call	0xef0	; 0xef0 <DIO_SetPinDirection>
}
    2b8e:	cf 91       	pop	r28
    2b90:	df 91       	pop	r29
    2b92:	08 95       	ret

00002b94 <key_getpressed>:
 * OUTPUTS 		 : void
 *
 * Return		 : uint8 key button
 **************************************************************************/
uint8 key_getpressed(void)
{
    2b94:	df 93       	push	r29
    2b96:	cf 93       	push	r28
    2b98:	00 d0       	rcall	.+0      	; 0x2b9a <key_getpressed+0x6>
    2b9a:	00 d0       	rcall	.+0      	; 0x2b9c <key_getpressed+0x8>
    2b9c:	00 d0       	rcall	.+0      	; 0x2b9e <key_getpressed+0xa>
    2b9e:	cd b7       	in	r28, 0x3d	; 61
    2ba0:	de b7       	in	r29, 0x3e	; 62
	uint8 row,col;
	static uint8 value=0;
	uint8 ret_value=0;
    2ba2:	1a 82       	std	Y+2, r1	; 0x02
	static uint8 sampler=1;
	static uint8 temp_row=0;
	uint8 break_flag=0;
    2ba4:	19 82       	std	Y+1, r1	; 0x01
	static uint8 keypad_status=KEY_IDLE;
	switch(keypad_status)
    2ba6:	80 91 f9 00 	lds	r24, 0x00F9
    2baa:	28 2f       	mov	r18, r24
    2bac:	30 e0       	ldi	r19, 0x00	; 0
    2bae:	3e 83       	std	Y+6, r19	; 0x06
    2bb0:	2d 83       	std	Y+5, r18	; 0x05
    2bb2:	4d 81       	ldd	r20, Y+5	; 0x05
    2bb4:	5e 81       	ldd	r21, Y+6	; 0x06
    2bb6:	41 30       	cpi	r20, 0x01	; 1
    2bb8:	51 05       	cpc	r21, r1
    2bba:	09 f4       	brne	.+2      	; 0x2bbe <key_getpressed+0x2a>
    2bbc:	7d c0       	rjmp	.+250    	; 0x2cb8 <key_getpressed+0x124>
    2bbe:	8d 81       	ldd	r24, Y+5	; 0x05
    2bc0:	9e 81       	ldd	r25, Y+6	; 0x06
    2bc2:	82 30       	cpi	r24, 0x02	; 2
    2bc4:	91 05       	cpc	r25, r1
    2bc6:	34 f4       	brge	.+12     	; 0x2bd4 <key_getpressed+0x40>
    2bc8:	2d 81       	ldd	r18, Y+5	; 0x05
    2bca:	3e 81       	ldd	r19, Y+6	; 0x06
    2bcc:	21 15       	cp	r18, r1
    2bce:	31 05       	cpc	r19, r1
    2bd0:	71 f0       	breq	.+28     	; 0x2bee <key_getpressed+0x5a>
    2bd2:	a3 c0       	rjmp	.+326    	; 0x2d1a <key_getpressed+0x186>
    2bd4:	4d 81       	ldd	r20, Y+5	; 0x05
    2bd6:	5e 81       	ldd	r21, Y+6	; 0x06
    2bd8:	42 30       	cpi	r20, 0x02	; 2
    2bda:	51 05       	cpc	r21, r1
    2bdc:	09 f4       	brne	.+2      	; 0x2be0 <key_getpressed+0x4c>
    2bde:	94 c0       	rjmp	.+296    	; 0x2d08 <key_getpressed+0x174>
    2be0:	8d 81       	ldd	r24, Y+5	; 0x05
    2be2:	9e 81       	ldd	r25, Y+6	; 0x06
    2be4:	83 30       	cpi	r24, 0x03	; 3
    2be6:	91 05       	cpc	r25, r1
    2be8:	09 f4       	brne	.+2      	; 0x2bec <key_getpressed+0x58>
    2bea:	94 c0       	rjmp	.+296    	; 0x2d14 <key_getpressed+0x180>
    2bec:	96 c0       	rjmp	.+300    	; 0x2d1a <key_getpressed+0x186>
	{
	case KEY_IDLE:
		for(col=0;col<N_col;col++)
    2bee:	1b 82       	std	Y+3, r1	; 0x03
    2bf0:	5e c0       	rjmp	.+188    	; 0x2cae <key_getpressed+0x11a>
		{
			KEYPAD_PORT_DIR=(0b00100000<<col);
    2bf2:	e4 e3       	ldi	r30, 0x34	; 52
    2bf4:	f0 e0       	ldi	r31, 0x00	; 0
    2bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    2bf8:	28 2f       	mov	r18, r24
    2bfa:	30 e0       	ldi	r19, 0x00	; 0
    2bfc:	80 e2       	ldi	r24, 0x20	; 32
    2bfe:	90 e0       	ldi	r25, 0x00	; 0
    2c00:	02 c0       	rjmp	.+4      	; 0x2c06 <key_getpressed+0x72>
    2c02:	88 0f       	add	r24, r24
    2c04:	99 1f       	adc	r25, r25
    2c06:	2a 95       	dec	r18
    2c08:	e2 f7       	brpl	.-8      	; 0x2c02 <key_getpressed+0x6e>
    2c0a:	80 83       	st	Z, r24
			KEYPAD_PORT_OUT=(~(0b00100000<<col));
    2c0c:	e5 e3       	ldi	r30, 0x35	; 53
    2c0e:	f0 e0       	ldi	r31, 0x00	; 0
    2c10:	8b 81       	ldd	r24, Y+3	; 0x03
    2c12:	28 2f       	mov	r18, r24
    2c14:	30 e0       	ldi	r19, 0x00	; 0
    2c16:	80 e2       	ldi	r24, 0x20	; 32
    2c18:	90 e0       	ldi	r25, 0x00	; 0
    2c1a:	02 2e       	mov	r0, r18
    2c1c:	02 c0       	rjmp	.+4      	; 0x2c22 <key_getpressed+0x8e>
    2c1e:	88 0f       	add	r24, r24
    2c20:	99 1f       	adc	r25, r25
    2c22:	0a 94       	dec	r0
    2c24:	e2 f7       	brpl	.-8      	; 0x2c1e <key_getpressed+0x8a>
    2c26:	80 95       	com	r24
    2c28:	80 83       	st	Z, r24
			for(row=2;row<N_row+2;row++)
    2c2a:	82 e0       	ldi	r24, 0x02	; 2
    2c2c:	8c 83       	std	Y+4, r24	; 0x04
    2c2e:	34 c0       	rjmp	.+104    	; 0x2c98 <key_getpressed+0x104>
			{
				if(Get_Bit(KEYPAD_PORT_IN,row)==0)
    2c30:	e3 e3       	ldi	r30, 0x33	; 51
    2c32:	f0 e0       	ldi	r31, 0x00	; 0
    2c34:	80 81       	ld	r24, Z
    2c36:	28 2f       	mov	r18, r24
    2c38:	30 e0       	ldi	r19, 0x00	; 0
    2c3a:	8c 81       	ldd	r24, Y+4	; 0x04
    2c3c:	88 2f       	mov	r24, r24
    2c3e:	90 e0       	ldi	r25, 0x00	; 0
    2c40:	a9 01       	movw	r20, r18
    2c42:	02 c0       	rjmp	.+4      	; 0x2c48 <key_getpressed+0xb4>
    2c44:	55 95       	asr	r21
    2c46:	47 95       	ror	r20
    2c48:	8a 95       	dec	r24
    2c4a:	e2 f7       	brpl	.-8      	; 0x2c44 <key_getpressed+0xb0>
    2c4c:	ca 01       	movw	r24, r20
    2c4e:	81 70       	andi	r24, 0x01	; 1
    2c50:	90 70       	andi	r25, 0x00	; 0
    2c52:	00 97       	sbiw	r24, 0x00	; 0
    2c54:	f1 f4       	brne	.+60     	; 0x2c92 <key_getpressed+0xfe>
				{
#if (N_row==3) && (N_col==3)
					value=keypad3x3((row*N_col)+col+1-6);
    2c56:	8c 81       	ldd	r24, Y+4	; 0x04
    2c58:	28 2f       	mov	r18, r24
    2c5a:	30 e0       	ldi	r19, 0x00	; 0
    2c5c:	c9 01       	movw	r24, r18
    2c5e:	88 0f       	add	r24, r24
    2c60:	99 1f       	adc	r25, r25
    2c62:	82 0f       	add	r24, r18
    2c64:	93 1f       	adc	r25, r19
    2c66:	98 2f       	mov	r25, r24
    2c68:	8b 81       	ldd	r24, Y+3	; 0x03
    2c6a:	89 0f       	add	r24, r25
    2c6c:	85 50       	subi	r24, 0x05	; 5
    2c6e:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <keypad3x3>
    2c72:	80 93 fb 00 	sts	0x00FB, r24
#elif (N_row==4) && (N_col==3)
					value=keypad4x3((row*N_col)+col+1);
#elif (N_row==4) && (N_col==4)
					value=keypad4x4((row*N_col)+col+1);
#endif
					keypad_status=KEY_PREPRESSED;
    2c76:	81 e0       	ldi	r24, 0x01	; 1
    2c78:	80 93 f9 00 	sts	0x00F9, r24
					temp_row=row;
    2c7c:	8c 81       	ldd	r24, Y+4	; 0x04
    2c7e:	80 93 fa 00 	sts	0x00FA, r24
					break_flag=1;
    2c82:	81 e0       	ldi	r24, 0x01	; 1
    2c84:	89 83       	std	Y+1, r24	; 0x01
					ret_value=0;
    2c86:	1a 82       	std	Y+2, r1	; 0x02
					DIO_WritePin(PinB4,HIGH);
    2c88:	8c e0       	ldi	r24, 0x0C	; 12
    2c8a:	61 e0       	ldi	r22, 0x01	; 1
    2c8c:	0e 94 12 06 	call	0xc24	; 0xc24 <DIO_WritePin>
    2c90:	06 c0       	rjmp	.+12     	; 0x2c9e <key_getpressed+0x10a>
	case KEY_IDLE:
		for(col=0;col<N_col;col++)
		{
			KEYPAD_PORT_DIR=(0b00100000<<col);
			KEYPAD_PORT_OUT=(~(0b00100000<<col));
			for(row=2;row<N_row+2;row++)
    2c92:	8c 81       	ldd	r24, Y+4	; 0x04
    2c94:	8f 5f       	subi	r24, 0xFF	; 255
    2c96:	8c 83       	std	Y+4, r24	; 0x04
    2c98:	8c 81       	ldd	r24, Y+4	; 0x04
    2c9a:	85 30       	cpi	r24, 0x05	; 5
    2c9c:	48 f2       	brcs	.-110    	; 0x2c30 <key_getpressed+0x9c>
					ret_value=0;
					DIO_WritePin(PinB4,HIGH);
					break;
				}
			}
			if(break_flag==1)
    2c9e:	89 81       	ldd	r24, Y+1	; 0x01
    2ca0:	81 30       	cpi	r24, 0x01	; 1
    2ca2:	11 f4       	brne	.+4      	; 0x2ca8 <key_getpressed+0x114>
			{
				break_flag=0;
    2ca4:	19 82       	std	Y+1, r1	; 0x01
    2ca6:	39 c0       	rjmp	.+114    	; 0x2d1a <key_getpressed+0x186>
	uint8 break_flag=0;
	static uint8 keypad_status=KEY_IDLE;
	switch(keypad_status)
	{
	case KEY_IDLE:
		for(col=0;col<N_col;col++)
    2ca8:	8b 81       	ldd	r24, Y+3	; 0x03
    2caa:	8f 5f       	subi	r24, 0xFF	; 255
    2cac:	8b 83       	std	Y+3, r24	; 0x03
    2cae:	8b 81       	ldd	r24, Y+3	; 0x03
    2cb0:	83 30       	cpi	r24, 0x03	; 3
    2cb2:	08 f4       	brcc	.+2      	; 0x2cb6 <key_getpressed+0x122>
    2cb4:	9e cf       	rjmp	.-196    	; 0x2bf2 <key_getpressed+0x5e>
    2cb6:	31 c0       	rjmp	.+98     	; 0x2d1a <key_getpressed+0x186>
			}
		}	

		break;
	case KEY_PREPRESSED:
		keypad_status=KEY_PRESSED;
    2cb8:	82 e0       	ldi	r24, 0x02	; 2
    2cba:	80 93 f9 00 	sts	0x00F9, r24
		ret_value=0;
    2cbe:	1a 82       	std	Y+2, r1	; 0x02
		if(Get_Bit(KEYPAD_PORT_IN,temp_row)==0)
    2cc0:	e3 e3       	ldi	r30, 0x33	; 51
    2cc2:	f0 e0       	ldi	r31, 0x00	; 0
    2cc4:	80 81       	ld	r24, Z
    2cc6:	28 2f       	mov	r18, r24
    2cc8:	30 e0       	ldi	r19, 0x00	; 0
    2cca:	80 91 fa 00 	lds	r24, 0x00FA
    2cce:	88 2f       	mov	r24, r24
    2cd0:	90 e0       	ldi	r25, 0x00	; 0
    2cd2:	a9 01       	movw	r20, r18
    2cd4:	02 c0       	rjmp	.+4      	; 0x2cda <key_getpressed+0x146>
    2cd6:	55 95       	asr	r21
    2cd8:	47 95       	ror	r20
    2cda:	8a 95       	dec	r24
    2cdc:	e2 f7       	brpl	.-8      	; 0x2cd6 <key_getpressed+0x142>
    2cde:	ca 01       	movw	r24, r20
    2ce0:	81 70       	andi	r24, 0x01	; 1
    2ce2:	90 70       	andi	r25, 0x00	; 0
    2ce4:	00 97       	sbiw	r24, 0x00	; 0
    2ce6:	31 f4       	brne	.+12     	; 0x2cf4 <key_getpressed+0x160>
		{
			sampler++;
    2ce8:	80 91 ea 00 	lds	r24, 0x00EA
    2cec:	8f 5f       	subi	r24, 0xFF	; 255
    2cee:	80 93 ea 00 	sts	0x00EA, r24
    2cf2:	03 c0       	rjmp	.+6      	; 0x2cfa <key_getpressed+0x166>
		}
		else
		{
			//sampler=1;
			keypad_status=KEY_NOTPRESSED;
    2cf4:	83 e0       	ldi	r24, 0x03	; 3
    2cf6:	80 93 f9 00 	sts	0x00F9, r24
		}

		if(sampler>=0)
		{
			sampler=1;
    2cfa:	81 e0       	ldi	r24, 0x01	; 1
    2cfc:	80 93 ea 00 	sts	0x00EA, r24
			keypad_status=KEY_PRESSED;
    2d00:	82 e0       	ldi	r24, 0x02	; 2
    2d02:	80 93 f9 00 	sts	0x00F9, r24
    2d06:	09 c0       	rjmp	.+18     	; 0x2d1a <key_getpressed+0x186>
		}
		break;

	case KEY_PRESSED:

		ret_value=value;
    2d08:	80 91 fb 00 	lds	r24, 0x00FB
    2d0c:	8a 83       	std	Y+2, r24	; 0x02
		keypad_status=KEY_IDLE;
    2d0e:	10 92 f9 00 	sts	0x00F9, r1
    2d12:	03 c0       	rjmp	.+6      	; 0x2d1a <key_getpressed+0x186>
		break;
	case KEY_NOTPRESSED:
		ret_value=0;
    2d14:	1a 82       	std	Y+2, r1	; 0x02
		keypad_status=KEY_IDLE;
    2d16:	10 92 f9 00 	sts	0x00F9, r1
		break;
	}
	return ret_value;
    2d1a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2d1c:	26 96       	adiw	r28, 0x06	; 6
    2d1e:	0f b6       	in	r0, 0x3f	; 63
    2d20:	f8 94       	cli
    2d22:	de bf       	out	0x3e, r29	; 62
    2d24:	0f be       	out	0x3f, r0	; 63
    2d26:	cd bf       	out	0x3d, r28	; 61
    2d28:	cf 91       	pop	r28
    2d2a:	df 91       	pop	r29
    2d2c:	08 95       	ret

00002d2e <keypad3x3>:
#if (N_row==3) && (N_col==3)
uint8 keypad3x3(uint8 value)
{
    2d2e:	df 93       	push	r29
    2d30:	cf 93       	push	r28
    2d32:	0f 92       	push	r0
    2d34:	cd b7       	in	r28, 0x3d	; 61
    2d36:	de b7       	in	r29, 0x3e	; 62
    2d38:	89 83       	std	Y+1, r24	; 0x01
	return value;
    2d3a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d3c:	0f 90       	pop	r0
    2d3e:	cf 91       	pop	r28
    2d40:	df 91       	pop	r29
    2d42:	08 95       	ret

00002d44 <__udivmodhi4>:
    2d44:	aa 1b       	sub	r26, r26
    2d46:	bb 1b       	sub	r27, r27
    2d48:	51 e1       	ldi	r21, 0x11	; 17
    2d4a:	07 c0       	rjmp	.+14     	; 0x2d5a <__udivmodhi4_ep>

00002d4c <__udivmodhi4_loop>:
    2d4c:	aa 1f       	adc	r26, r26
    2d4e:	bb 1f       	adc	r27, r27
    2d50:	a6 17       	cp	r26, r22
    2d52:	b7 07       	cpc	r27, r23
    2d54:	10 f0       	brcs	.+4      	; 0x2d5a <__udivmodhi4_ep>
    2d56:	a6 1b       	sub	r26, r22
    2d58:	b7 0b       	sbc	r27, r23

00002d5a <__udivmodhi4_ep>:
    2d5a:	88 1f       	adc	r24, r24
    2d5c:	99 1f       	adc	r25, r25
    2d5e:	5a 95       	dec	r21
    2d60:	a9 f7       	brne	.-22     	; 0x2d4c <__udivmodhi4_loop>
    2d62:	80 95       	com	r24
    2d64:	90 95       	com	r25
    2d66:	bc 01       	movw	r22, r24
    2d68:	cd 01       	movw	r24, r26
    2d6a:	08 95       	ret

00002d6c <__prologue_saves__>:
    2d6c:	2f 92       	push	r2
    2d6e:	3f 92       	push	r3
    2d70:	4f 92       	push	r4
    2d72:	5f 92       	push	r5
    2d74:	6f 92       	push	r6
    2d76:	7f 92       	push	r7
    2d78:	8f 92       	push	r8
    2d7a:	9f 92       	push	r9
    2d7c:	af 92       	push	r10
    2d7e:	bf 92       	push	r11
    2d80:	cf 92       	push	r12
    2d82:	df 92       	push	r13
    2d84:	ef 92       	push	r14
    2d86:	ff 92       	push	r15
    2d88:	0f 93       	push	r16
    2d8a:	1f 93       	push	r17
    2d8c:	cf 93       	push	r28
    2d8e:	df 93       	push	r29
    2d90:	cd b7       	in	r28, 0x3d	; 61
    2d92:	de b7       	in	r29, 0x3e	; 62
    2d94:	ca 1b       	sub	r28, r26
    2d96:	db 0b       	sbc	r29, r27
    2d98:	0f b6       	in	r0, 0x3f	; 63
    2d9a:	f8 94       	cli
    2d9c:	de bf       	out	0x3e, r29	; 62
    2d9e:	0f be       	out	0x3f, r0	; 63
    2da0:	cd bf       	out	0x3d, r28	; 61
    2da2:	09 94       	ijmp

00002da4 <__epilogue_restores__>:
    2da4:	2a 88       	ldd	r2, Y+18	; 0x12
    2da6:	39 88       	ldd	r3, Y+17	; 0x11
    2da8:	48 88       	ldd	r4, Y+16	; 0x10
    2daa:	5f 84       	ldd	r5, Y+15	; 0x0f
    2dac:	6e 84       	ldd	r6, Y+14	; 0x0e
    2dae:	7d 84       	ldd	r7, Y+13	; 0x0d
    2db0:	8c 84       	ldd	r8, Y+12	; 0x0c
    2db2:	9b 84       	ldd	r9, Y+11	; 0x0b
    2db4:	aa 84       	ldd	r10, Y+10	; 0x0a
    2db6:	b9 84       	ldd	r11, Y+9	; 0x09
    2db8:	c8 84       	ldd	r12, Y+8	; 0x08
    2dba:	df 80       	ldd	r13, Y+7	; 0x07
    2dbc:	ee 80       	ldd	r14, Y+6	; 0x06
    2dbe:	fd 80       	ldd	r15, Y+5	; 0x05
    2dc0:	0c 81       	ldd	r16, Y+4	; 0x04
    2dc2:	1b 81       	ldd	r17, Y+3	; 0x03
    2dc4:	aa 81       	ldd	r26, Y+2	; 0x02
    2dc6:	b9 81       	ldd	r27, Y+1	; 0x01
    2dc8:	ce 0f       	add	r28, r30
    2dca:	d1 1d       	adc	r29, r1
    2dcc:	0f b6       	in	r0, 0x3f	; 63
    2dce:	f8 94       	cli
    2dd0:	de bf       	out	0x3e, r29	; 62
    2dd2:	0f be       	out	0x3f, r0	; 63
    2dd4:	cd bf       	out	0x3d, r28	; 61
    2dd6:	ed 01       	movw	r28, r26
    2dd8:	08 95       	ret

00002dda <itoa>:
    2dda:	fb 01       	movw	r30, r22
    2ddc:	9f 01       	movw	r18, r30
    2dde:	e8 94       	clt
    2de0:	42 30       	cpi	r20, 0x02	; 2
    2de2:	c4 f0       	brlt	.+48     	; 0x2e14 <itoa+0x3a>
    2de4:	45 32       	cpi	r20, 0x25	; 37
    2de6:	b4 f4       	brge	.+44     	; 0x2e14 <itoa+0x3a>
    2de8:	4a 30       	cpi	r20, 0x0A	; 10
    2dea:	29 f4       	brne	.+10     	; 0x2df6 <itoa+0x1c>
    2dec:	97 fb       	bst	r25, 7
    2dee:	1e f4       	brtc	.+6      	; 0x2df6 <itoa+0x1c>
    2df0:	90 95       	com	r25
    2df2:	81 95       	neg	r24
    2df4:	9f 4f       	sbci	r25, 0xFF	; 255
    2df6:	64 2f       	mov	r22, r20
    2df8:	77 27       	eor	r23, r23
    2dfa:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__udivmodhi4>
    2dfe:	80 5d       	subi	r24, 0xD0	; 208
    2e00:	8a 33       	cpi	r24, 0x3A	; 58
    2e02:	0c f0       	brlt	.+2      	; 0x2e06 <itoa+0x2c>
    2e04:	89 5d       	subi	r24, 0xD9	; 217
    2e06:	81 93       	st	Z+, r24
    2e08:	cb 01       	movw	r24, r22
    2e0a:	00 97       	sbiw	r24, 0x00	; 0
    2e0c:	a1 f7       	brne	.-24     	; 0x2df6 <itoa+0x1c>
    2e0e:	16 f4       	brtc	.+4      	; 0x2e14 <itoa+0x3a>
    2e10:	5d e2       	ldi	r21, 0x2D	; 45
    2e12:	51 93       	st	Z+, r21
    2e14:	10 82       	st	Z, r1
    2e16:	c9 01       	movw	r24, r18
    2e18:	0c 94 0e 17 	jmp	0x2e1c	; 0x2e1c <strrev>

00002e1c <strrev>:
    2e1c:	dc 01       	movw	r26, r24
    2e1e:	fc 01       	movw	r30, r24
    2e20:	67 2f       	mov	r22, r23
    2e22:	71 91       	ld	r23, Z+
    2e24:	77 23       	and	r23, r23
    2e26:	e1 f7       	brne	.-8      	; 0x2e20 <strrev+0x4>
    2e28:	32 97       	sbiw	r30, 0x02	; 2
    2e2a:	04 c0       	rjmp	.+8      	; 0x2e34 <strrev+0x18>
    2e2c:	7c 91       	ld	r23, X
    2e2e:	6d 93       	st	X+, r22
    2e30:	70 83       	st	Z, r23
    2e32:	62 91       	ld	r22, -Z
    2e34:	ae 17       	cp	r26, r30
    2e36:	bf 07       	cpc	r27, r31
    2e38:	c8 f3       	brcs	.-14     	; 0x2e2c <strrev+0x10>
    2e3a:	08 95       	ret

00002e3c <_exit>:
    2e3c:	f8 94       	cli

00002e3e <__stop_program>:
    2e3e:	ff cf       	rjmp	.-2      	; 0x2e3e <__stop_program>
